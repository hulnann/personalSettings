{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"üî•ÊåÅÁª≠Êõ¥Êñ∞üî• CSDNÂπøÂëäÂÆåÂÖ®ËøáÊª§„ÄÅ‰∫∫ÊÄßÂåñËÑöÊú¨‰ºòÂåñÔºöüÜï ‰∏çÁî®ÂÜçÁôªÂΩï‰∫ÜÔºÅËÆ©‰Ω†‰ΩìÈ™å‰ª§‰∫∫ÊÉäÂñúÁöÑÂ¥≠Êñ∞CSDN„ÄÇ","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["www.csdn.net"],"orig_excludes":[],"orig_includes":["*://*.csdn.net/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1662639210286,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/378351-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0-csdn%E5%B9%BF%E5%91%8A%E5%AE%8C%E5%85%A8%E8%BF%87%E6%BB%A4-%E4%BA%BA%E6%80%A7%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BC%98%E5%8C%96-%E4%B8%8D%E7%94%A8%E5%86%8D%E7%99%BB%E5%BD%95%E4%BA%86-%E8%AE%A9%E4%BD%A0%E4%BD%93%E9%AA%8C%E4%BB%A4%E4%BA%BA%E6%83%8A%E5%96%9C%E7%9A%84%E5%B4%AD%E6%96%B0csdn/code/%F0%9F%94%A5%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%F0%9F%94%A5%20CSDN%E5%B9%BF%E5%91%8A%E5%AE%8C%E5%85%A8%E8%BF%87%E6%BB%A4%E3%80%81%E4%BA%BA%E6%80%A7%E5%8C%96%E8%84%9A%E6%9C%AC%E4%BC%98%E5%8C%96%EF%BC%9A%F0%9F%86%95%20%E4%B8%8D%E7%94%A8%E5%86%8D%E7%99%BB%E5%BD%95%E4%BA%86%EF%BC%81%E8%AE%A9%E4%BD%A0%E4%BD%93%E9%AA%8C%E4%BB%A4%E4%BA%BA%E6%83%8A%E5%96%9C%E7%9A%84%E5%B4%AD%E6%96%B0CSDN%E3%80%82.user.js","uuid":"3a6d76d3-0d3d-4134-9e14-46b8a8a5e364","source":"","requires":[{"meta":{"name":"jquery.cookie.min.js","url":"https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery-cookie/1.4.1/jquery.cookie.min.js","ts":1662639210277,"mimetype":"text/javascript"},"source":"LyohIGpxdWVyeS5jb29raWUgdjEuNC4xIHwgTUlUICovCiFmdW5jdGlvbihhKXsiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbImpxdWVyeSJdLGEpOiJvYmplY3QiPT10eXBlb2YgZXhwb3J0cz9hKHJlcXVpcmUoImpxdWVyeSIpKTphKGpRdWVyeSl9KGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7cmV0dXJuIGgucmF3P2E6ZW5jb2RlVVJJQ29tcG9uZW50KGEpfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIGgucmF3P2E6ZGVjb2RlVVJJQ29tcG9uZW50KGEpfWZ1bmN0aW9uIGQoYSl7cmV0dXJuIGIoaC5qc29uP0pTT04uc3RyaW5naWZ5KGEpOlN0cmluZyhhKSl9ZnVuY3Rpb24gZShhKXswPT09YS5pbmRleE9mKCciJykmJihhPWEuc2xpY2UoMSwtMSkucmVwbGFjZSgvXFwiL2csJyInKS5yZXBsYWNlKC9cXFxcL2csIlxcIikpO3RyeXtyZXR1cm4gYT1kZWNvZGVVUklDb21wb25lbnQoYS5yZXBsYWNlKGcsIiAiKSksaC5qc29uP0pTT04ucGFyc2UoYSk6YX1jYXRjaChiKXt9fWZ1bmN0aW9uIGYoYixjKXt2YXIgZD1oLnJhdz9iOmUoYik7cmV0dXJuIGEuaXNGdW5jdGlvbihjKT9jKGQpOmR9dmFyIGc9L1wrL2csaD1hLmNvb2tpZT1mdW5jdGlvbihlLGcsaSl7aWYodm9pZCAwIT09ZyYmIWEuaXNGdW5jdGlvbihnKSl7aWYoaT1hLmV4dGVuZCh7fSxoLmRlZmF1bHRzLGkpLCJudW1iZXIiPT10eXBlb2YgaS5leHBpcmVzKXt2YXIgaj1pLmV4cGlyZXMsaz1pLmV4cGlyZXM9bmV3IERhdGU7ay5zZXRUaW1lKCtrKzg2NGU1KmopfXJldHVybiBkb2N1bWVudC5jb29raWU9W2IoZSksIj0iLGQoZyksaS5leHBpcmVzPyI7IGV4cGlyZXM9IitpLmV4cGlyZXMudG9VVENTdHJpbmcoKToiIixpLnBhdGg/IjsgcGF0aD0iK2kucGF0aDoiIixpLmRvbWFpbj8iOyBkb21haW49IitpLmRvbWFpbjoiIixpLnNlY3VyZT8iOyBzZWN1cmUiOiIiXS5qb2luKCIiKX1mb3IodmFyIGw9ZT92b2lkIDA6e30sbT1kb2N1bWVudC5jb29raWU/ZG9jdW1lbnQuY29va2llLnNwbGl0KCI7ICIpOltdLG49MCxvPW0ubGVuZ3RoO28+bjtuKyspe3ZhciBwPW1bbl0uc3BsaXQoIj0iKSxxPWMocC5zaGlmdCgpKSxyPXAuam9pbigiPSIpO2lmKGUmJmU9PT1xKXtsPWYocixnKTticmVha31lfHx2b2lkIDA9PT0ocj1mKHIpKXx8KGxbcV09cil9cmV0dXJuIGx9O2guZGVmYXVsdHM9e30sYS5yZW1vdmVDb29raWU9ZnVuY3Rpb24oYixjKXtyZXR1cm4gdm9pZCAwPT09YS5jb29raWUoYik/ITE6KGEuY29va2llKGIsIiIsYS5leHRlbmQoe30sYyx7ZXhwaXJlczotMX0pKSwhYS5jb29raWUoYikpfX0pOw=="},{"meta":{"name":"nprogress.min.js","url":"https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/nprogress/0.2.0/nprogress.min.js","ts":1662639210277,"mimetype":"text/javascript"},"source":"IWZ1bmN0aW9uKG4sZSl7ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWUoKTpuLk5Qcm9ncmVzcz1lKCl9KHRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4sZSx0KXtyZXR1cm4gZT5uP2U6bj50P3Q6bn1mdW5jdGlvbiBlKG4pe3JldHVybiAxMDAqKC0xK24pfWZ1bmN0aW9uIHQobix0LHIpe3ZhciBpO3JldHVybiBpPSJ0cmFuc2xhdGUzZCI9PT1jLnBvc2l0aW9uVXNpbmc/e3RyYW5zZm9ybToidHJhbnNsYXRlM2QoIitlKG4pKyIlLDAsMCkifToidHJhbnNsYXRlIj09PWMucG9zaXRpb25Vc2luZz97dHJhbnNmb3JtOiJ0cmFuc2xhdGUoIitlKG4pKyIlLDApIn06eyJtYXJnaW4tbGVmdCI6ZShuKSsiJSJ9LGkudHJhbnNpdGlvbj0iYWxsICIrdCsibXMgIityLGl9ZnVuY3Rpb24gcihuLGUpe3ZhciB0PSJzdHJpbmciPT10eXBlb2Ygbj9uOm8obik7cmV0dXJuIHQuaW5kZXhPZigiICIrZSsiICIpPj0wfWZ1bmN0aW9uIGkobixlKXt2YXIgdD1vKG4pLGk9dCtlO3IodCxlKXx8KG4uY2xhc3NOYW1lPWkuc3Vic3RyaW5nKDEpKX1mdW5jdGlvbiBzKG4sZSl7dmFyIHQsaT1vKG4pO3IobixlKSYmKHQ9aS5yZXBsYWNlKCIgIitlKyIgIiwiICIpLG4uY2xhc3NOYW1lPXQuc3Vic3RyaW5nKDEsdC5sZW5ndGgtMSkpfWZ1bmN0aW9uIG8obil7cmV0dXJuKCIgIisobi5jbGFzc05hbWV8fCIiKSsiICIpLnJlcGxhY2UoL1xzKy9naSwiICIpfWZ1bmN0aW9uIGEobil7biYmbi5wYXJlbnROb2RlJiZuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobil9dmFyIHU9e307dS52ZXJzaW9uPSIwLjIuMCI7dmFyIGM9dS5zZXR0aW5ncz17bWluaW11bTouMDgsZWFzaW5nOiJlYXNlIixwb3NpdGlvblVzaW5nOiIiLHNwZWVkOjIwMCx0cmlja2xlOiEwLHRyaWNrbGVSYXRlOi4wMix0cmlja2xlU3BlZWQ6ODAwLHNob3dTcGlubmVyOiEwLGJhclNlbGVjdG9yOidbcm9sZT0iYmFyIl0nLHNwaW5uZXJTZWxlY3RvcjonW3JvbGU9InNwaW5uZXIiXScscGFyZW50OiJib2R5Iix0ZW1wbGF0ZTonPGRpdiBjbGFzcz0iYmFyIiByb2xlPSJiYXIiPjxkaXYgY2xhc3M9InBlZyI+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz0ic3Bpbm5lciIgcm9sZT0ic3Bpbm5lciI+PGRpdiBjbGFzcz0ic3Bpbm5lci1pY29uIj48L2Rpdj48L2Rpdj4nfTt1LmNvbmZpZ3VyZT1mdW5jdGlvbihuKXt2YXIgZSx0O2ZvcihlIGluIG4pdD1uW2VdLHZvaWQgMCE9PXQmJm4uaGFzT3duUHJvcGVydHkoZSkmJihjW2VdPXQpO3JldHVybiB0aGlzfSx1LnN0YXR1cz1udWxsLHUuc2V0PWZ1bmN0aW9uKGUpe3ZhciByPXUuaXNTdGFydGVkKCk7ZT1uKGUsYy5taW5pbXVtLDEpLHUuc3RhdHVzPTE9PT1lP251bGw6ZTt2YXIgaT11LnJlbmRlcighcikscz1pLnF1ZXJ5U2VsZWN0b3IoYy5iYXJTZWxlY3Rvciksbz1jLnNwZWVkLGE9Yy5lYXNpbmc7cmV0dXJuIGkub2Zmc2V0V2lkdGgsbChmdW5jdGlvbihuKXsiIj09PWMucG9zaXRpb25Vc2luZyYmKGMucG9zaXRpb25Vc2luZz11LmdldFBvc2l0aW9uaW5nQ1NTKCkpLGYocyx0KGUsbyxhKSksMT09PWU/KGYoaSx7dHJhbnNpdGlvbjoibm9uZSIsb3BhY2l0eToxfSksaS5vZmZzZXRXaWR0aCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZihpLHt0cmFuc2l0aW9uOiJhbGwgIitvKyJtcyBsaW5lYXIiLG9wYWNpdHk6MH0pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt1LnJlbW92ZSgpLG4oKX0sbyl9LG8pKTpzZXRUaW1lb3V0KG4sbyl9KSx0aGlzfSx1LmlzU3RhcnRlZD1mdW5jdGlvbigpe3JldHVybiJudW1iZXIiPT10eXBlb2YgdS5zdGF0dXN9LHUuc3RhcnQ9ZnVuY3Rpb24oKXt1LnN0YXR1c3x8dS5zZXQoMCk7dmFyIG49ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dS5zdGF0dXMmJih1LnRyaWNrbGUoKSxuKCkpfSxjLnRyaWNrbGVTcGVlZCl9O3JldHVybiBjLnRyaWNrbGUmJm4oKSx0aGlzfSx1LmRvbmU9ZnVuY3Rpb24obil7cmV0dXJuIG58fHUuc3RhdHVzP3UuaW5jKC4zKy41Kk1hdGgucmFuZG9tKCkpLnNldCgxKTp0aGlzfSx1LmluYz1mdW5jdGlvbihlKXt2YXIgdD11LnN0YXR1cztyZXR1cm4gdD8oIm51bWJlciIhPXR5cGVvZiBlJiYoZT0oMS10KSpuKE1hdGgucmFuZG9tKCkqdCwuMSwuOTUpKSx0PW4odCtlLDAsLjk5NCksdS5zZXQodCkpOnUuc3RhcnQoKX0sdS50cmlja2xlPWZ1bmN0aW9uKCl7cmV0dXJuIHUuaW5jKE1hdGgucmFuZG9tKCkqYy50cmlja2xlUmF0ZSl9LGZ1bmN0aW9uKCl7dmFyIG49MCxlPTA7dS5wcm9taXNlPWZ1bmN0aW9uKHQpe3JldHVybiB0JiYicmVzb2x2ZWQiIT09dC5zdGF0ZSgpPygwPT09ZSYmdS5zdGFydCgpLG4rKyxlKyssdC5hbHdheXMoZnVuY3Rpb24oKXtlLS0sMD09PWU/KG49MCx1LmRvbmUoKSk6dS5zZXQoKG4tZSkvbil9KSx0aGlzKTp0aGlzfX0oKSx1LnJlbmRlcj1mdW5jdGlvbihuKXtpZih1LmlzUmVuZGVyZWQoKSlyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm5wcm9ncmVzcyIpO2koZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCJucHJvZ3Jlc3MtYnVzeSIpO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpO3QuaWQ9Im5wcm9ncmVzcyIsdC5pbm5lckhUTUw9Yy50ZW1wbGF0ZTt2YXIgcixzPXQucXVlcnlTZWxlY3RvcihjLmJhclNlbGVjdG9yKSxvPW4/Ii0xMDAiOmUodS5zdGF0dXN8fDApLGw9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjLnBhcmVudCk7cmV0dXJuIGYocyx7dHJhbnNpdGlvbjoiYWxsIDAgbGluZWFyIix0cmFuc2Zvcm06InRyYW5zbGF0ZTNkKCIrbysiJSwwLDApIn0pLGMuc2hvd1NwaW5uZXJ8fChyPXQucXVlcnlTZWxlY3RvcihjLnNwaW5uZXJTZWxlY3RvciksciYmYShyKSksbCE9ZG9jdW1lbnQuYm9keSYmaShsLCJucHJvZ3Jlc3MtY3VzdG9tLXBhcmVudCIpLGwuYXBwZW5kQ2hpbGQodCksdH0sdS5yZW1vdmU9ZnVuY3Rpb24oKXtzKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwibnByb2dyZXNzLWJ1c3kiKSxzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYy5wYXJlbnQpLCJucHJvZ3Jlc3MtY3VzdG9tLXBhcmVudCIpO3ZhciBuPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJucHJvZ3Jlc3MiKTtuJiZhKG4pfSx1LmlzUmVuZGVyZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJucHJvZ3Jlc3MiKX0sdS5nZXRQb3NpdGlvbmluZ0NTUz1mdW5jdGlvbigpe3ZhciBuPWRvY3VtZW50LmJvZHkuc3R5bGUsZT0iV2Via2l0VHJhbnNmb3JtImluIG4/IldlYmtpdCI6Ik1velRyYW5zZm9ybSJpbiBuPyJNb3oiOiJtc1RyYW5zZm9ybSJpbiBuPyJtcyI6Ik9UcmFuc2Zvcm0iaW4gbj8iTyI6IiI7cmV0dXJuIGUrIlBlcnNwZWN0aXZlImluIG4/InRyYW5zbGF0ZTNkIjplKyJUcmFuc2Zvcm0iaW4gbj8idHJhbnNsYXRlIjoibWFyZ2luIn07dmFyIGw9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7dmFyIHQ9ZS5zaGlmdCgpO3QmJnQobil9dmFyIGU9W107cmV0dXJuIGZ1bmN0aW9uKHQpe2UucHVzaCh0KSwxPT1lLmxlbmd0aCYmbigpfX0oKSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuKXtyZXR1cm4gbi5yZXBsYWNlKC9eLW1zLS8sIm1zLSIpLnJlcGxhY2UoLy0oW1xkYS16XSkvZ2ksZnVuY3Rpb24obixlKXtyZXR1cm4gZS50b1VwcGVyQ2FzZSgpfSl9ZnVuY3Rpb24gZShuKXt2YXIgZT1kb2N1bWVudC5ib2R5LnN0eWxlO2lmKG4gaW4gZSlyZXR1cm4gbjtmb3IodmFyIHQscj1pLmxlbmd0aCxzPW4uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKTtyLS07KWlmKHQ9aVtyXStzLHQgaW4gZSlyZXR1cm4gdDtyZXR1cm4gbn1mdW5jdGlvbiB0KHQpe3JldHVybiB0PW4odCksc1t0XXx8KHNbdF09ZSh0KSl9ZnVuY3Rpb24gcihuLGUscil7ZT10KGUpLG4uc3R5bGVbZV09cn12YXIgaT1bIldlYmtpdCIsIk8iLCJNb3oiLCJtcyJdLHM9e307cmV0dXJuIGZ1bmN0aW9uKG4sZSl7dmFyIHQsaSxzPWFyZ3VtZW50cztpZigyPT1zLmxlbmd0aClmb3IodCBpbiBlKWk9ZVt0XSx2b2lkIDAhPT1pJiZlLmhhc093blByb3BlcnR5KHQpJiZyKG4sdCxpKTtlbHNlIHIobixzWzFdLHNbMl0pfX0oKTtyZXR1cm4gdX0pOw=="},{"meta":{"name":"clipboard.min.js","url":"https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/clipboard.js/2.0.10/clipboard.min.js","ts":1662639210278,"mimetype":"text/javascript"},"source":""}]},{"name":"ÁôæÂ∫¶ÁΩëÁõòÁÆÄÊòì‰∏ãËΩΩÂä©ÊâãÔºàÁõ¥Èìæ‰∏ãËΩΩÂ§çÊ¥ªÁâàÔºâ","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["localhost","127.0.0.1","yyxxs.cn","softxm.cn","softxm.vip","42.193.51.61","119.28.33.23","119.28.139.214","49.234.47.193","82.156.65.179","42.193.127.85","81.70.253.99","49.232.252.126","82.156.15.149","59.110.224.13","59.110.225.22","59.110.226.3","baidu.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/*","*://yun.baidu.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1662639210310,"data":{"softxm_storageName_common_start":"n1643875920568","softxm_storageName_last_code":"s2398","softxm_storageName_last_jsonRpc":"shttp://localhost:6800/jsonrpc","softxm_storageName_last_mine":"s","softxm_storageName_last_savePath":"sD:\\__easyHelper__","softxm_storageName_last_token":"s"}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/418182-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B%EF%BC%88%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88%EF%BC%89.user.js","uuid":"39c13d6c-e6b3-40d3-a186-fd6fca8f0fe7","source":"","requires":[{"meta":{"name":"jquery.js","url":"https://lib.baomitu.com/jquery/3.6.0/jquery.js","ts":1662639210297,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"sweetalert.min.js","url":"https://lib.baomitu.com/sweetalert/2.1.2/sweetalert.min.js","ts":1662639210299,"mimetype":"text/javascript"},"source":"IWZ1bmN0aW9uKHQsZSl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuc3dhbD1lKCk6dC5zd2FsPWUoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtmdW5jdGlvbiBlKG8pe2lmKG5bb10pcmV0dXJuIG5bb10uZXhwb3J0czt2YXIgcj1uW29dPXtpOm8sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtvXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxlKSxyLmw9ITAsci5leHBvcnRzfXZhciBuPXt9O3JldHVybiBlLm09dCxlLmM9bixlLmQ9ZnVuY3Rpb24odCxuLG8pe2Uubyh0LG4pfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6b30pfSxlLm49ZnVuY3Rpb24odCl7dmFyIG49dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIGUuZChuLCJhIixuKSxufSxlLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LGUucD0iIixlKGUucz04KX0oW2Z1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPSJzd2FsLWJ1dHRvbiI7ZS5DTEFTU19OQU1FUz17TU9EQUw6InN3YWwtbW9kYWwiLE9WRVJMQVk6InN3YWwtb3ZlcmxheSIsU0hPV19NT0RBTDoic3dhbC1vdmVybGF5LS1zaG93LW1vZGFsIixNT0RBTF9USVRMRToic3dhbC10aXRsZSIsTU9EQUxfVEVYVDoic3dhbC10ZXh0IixJQ09OOiJzd2FsLWljb24iLElDT05fQ1VTVE9NOiJzd2FsLWljb24tLWN1c3RvbSIsQ09OVEVOVDoic3dhbC1jb250ZW50IixGT09URVI6InN3YWwtZm9vdGVyIixCVVRUT05fQ09OVEFJTkVSOiJzd2FsLWJ1dHRvbi1jb250YWluZXIiLEJVVFRPTjpvLENPTkZJUk1fQlVUVE9OOm8rIi0tY29uZmlybSIsQ0FOQ0VMX0JVVFRPTjpvKyItLWNhbmNlbCIsREFOR0VSX0JVVFRPTjpvKyItLWRhbmdlciIsQlVUVE9OX0xPQURJTkc6bysiLS1sb2FkaW5nIixCVVRUT05fTE9BREVSOm8rIl9fbG9hZGVyIn0sZS5kZWZhdWx0PWUuQ0xBU1NfTkFNRVN9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGUuZ2V0Tm9kZT1mdW5jdGlvbih0KXt2YXIgZT0iLiIrdDtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKX0sZS5zdHJpbmdUb05vZGU9ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7cmV0dXJuIGUuaW5uZXJIVE1MPXQudHJpbSgpLGUuZmlyc3RDaGlsZH0sZS5pbnNlcnRBZnRlcj1mdW5jdGlvbih0LGUpe3ZhciBuPWUubmV4dFNpYmxpbmc7ZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LG4pfSxlLnJlbW92ZU5vZGU9ZnVuY3Rpb24odCl7dC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHQpfSxlLnRocm93RXJyPWZ1bmN0aW9uKHQpe3Rocm93IHQ9dC5yZXBsYWNlKC8gKyg/PSApL2csIiIpLCJTd2VldEFsZXJ0OiAiKyh0PXQudHJpbSgpKX0sZS5pc1BsYWluT2JqZWN0PWZ1bmN0aW9uKHQpe2lmKCJbb2JqZWN0IE9iamVjdF0iIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKXJldHVybiExO3ZhciBlPU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4gbnVsbD09PWV8fGU9PT1PYmplY3QucHJvdG90eXBlfSxlLm9yZGluYWxTdWZmaXhPZj1mdW5jdGlvbih0KXt2YXIgZT10JTEwLG49dCUxMDA7cmV0dXJuIDE9PT1lJiYxMSE9PW4/dCsic3QiOjI9PT1lJiYxMiE9PW4/dCsibmQiOjM9PT1lJiYxMyE9PW4/dCsicmQiOnQrInRoIn19LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbyh0KXtmb3IodmFyIG4gaW4gdCllLmhhc093blByb3BlcnR5KG4pfHwoZVtuXT10W25dKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksbyhuKDI1KSk7dmFyIHI9bigyNik7ZS5vdmVybGF5TWFya3VwPXIuZGVmYXVsdCxvKG4oMjcpKSxvKG4oMjgpKSxvKG4oMjkpKTt2YXIgaT1uKDApLGE9aS5kZWZhdWx0Lk1PREFMX1RJVExFLHM9aS5kZWZhdWx0Lk1PREFMX1RFWFQsYz1pLmRlZmF1bHQuSUNPTixsPWkuZGVmYXVsdC5GT09URVI7ZS5pY29uTWFya3VwPSdcbiAgPGRpdiBjbGFzcz0iJytjKyciPjwvZGl2PicsZS50aXRsZU1hcmt1cD0nXG4gIDxkaXYgY2xhc3M9IicrYSsnIj48L2Rpdj5cbicsZS50ZXh0TWFya3VwPSdcbiAgPGRpdiBjbGFzcz0iJytzKyciPjwvZGl2PicsZS5mb290ZXJNYXJrdXA9J1xuICA8ZGl2IGNsYXNzPSInK2wrJyI+PC9kaXY+XG4nfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpO2UuQ09ORklSTV9LRVk9ImNvbmZpcm0iLGUuQ0FOQ0VMX0tFWT0iY2FuY2VsIjt2YXIgcj17dmlzaWJsZTohMCx0ZXh0Om51bGwsdmFsdWU6bnVsbCxjbGFzc05hbWU6IiIsY2xvc2VNb2RhbDohMH0saT1PYmplY3QuYXNzaWduKHt9LHIse3Zpc2libGU6ITEsdGV4dDoiQ2FuY2VsIix2YWx1ZTpudWxsfSksYT1PYmplY3QuYXNzaWduKHt9LHIse3RleHQ6Ik9LIix2YWx1ZTohMH0pO2UuZGVmYXVsdEJ1dHRvbkxpc3Q9e2NhbmNlbDppLGNvbmZpcm06YX07dmFyIHM9ZnVuY3Rpb24odCl7c3dpdGNoKHQpe2Nhc2UgZS5DT05GSVJNX0tFWTpyZXR1cm4gYTtjYXNlIGUuQ0FOQ0VMX0tFWTpyZXR1cm4gaTtkZWZhdWx0OnZhciBuPXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKTtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxyLHt0ZXh0Om4sdmFsdWU6dH0pfX0sYz1mdW5jdGlvbih0LGUpe3ZhciBuPXModCk7cmV0dXJuITA9PT1lP09iamVjdC5hc3NpZ24oe30sbix7dmlzaWJsZTohMH0pOiJzdHJpbmciPT10eXBlb2YgZT9PYmplY3QuYXNzaWduKHt9LG4se3Zpc2libGU6ITAsdGV4dDplfSk6by5pc1BsYWluT2JqZWN0KGUpP09iamVjdC5hc3NpZ24oe3Zpc2libGU6ITB9LG4sZSk6T2JqZWN0LmFzc2lnbih7fSxuLHt2aXNpYmxlOiExfSl9LGw9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXt9LG49MCxvPU9iamVjdC5rZXlzKHQpO248by5sZW5ndGg7bisrKXt2YXIgcj1vW25dLGE9dFtyXSxzPWMocixhKTtlW3JdPXN9cmV0dXJuIGUuY2FuY2VsfHwoZS5jYW5jZWw9aSksZX0sdT1mdW5jdGlvbih0KXt2YXIgbj17fTtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMTpuW2UuQ0FOQ0VMX0tFWV09T2JqZWN0LmFzc2lnbih7fSxpLHt2aXNpYmxlOiExfSk7YnJlYWs7Y2FzZSAyOm5bZS5DQU5DRUxfS0VZXT1jKGUuQ0FOQ0VMX0tFWSx0WzBdKSxuW2UuQ09ORklSTV9LRVldPWMoZS5DT05GSVJNX0tFWSx0WzFdKTticmVhaztkZWZhdWx0Om8udGhyb3dFcnIoIkludmFsaWQgbnVtYmVyIG9mICdidXR0b25zJyBpbiBhcnJheSAoIit0Lmxlbmd0aCsiKS5cbiAgICAgIElmIHlvdSB3YW50IG1vcmUgdGhhbiAyIGJ1dHRvbnMsIHlvdSBuZWVkIHRvIHVzZSBhbiBvYmplY3QhIil9cmV0dXJuIG59O2UuZ2V0QnV0dG9uTGlzdE9wdHM9ZnVuY3Rpb24odCl7dmFyIG49ZS5kZWZhdWx0QnV0dG9uTGlzdDtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHQ/bltlLkNPTkZJUk1fS0VZXT1jKGUuQ09ORklSTV9LRVksdCk6QXJyYXkuaXNBcnJheSh0KT9uPXUodCk6by5pc1BsYWluT2JqZWN0KHQpP249bCh0KTohMD09PXQ/bj11KFshMCwhMF0pOiExPT09dD9uPXUoWyExLCExXSk6dm9pZCAwPT09dCYmKG49ZS5kZWZhdWx0QnV0dG9uTGlzdCksbn19LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSkscj1uKDIpLGk9bigwKSxhPWkuZGVmYXVsdC5NT0RBTCxzPWkuZGVmYXVsdC5PVkVSTEFZLGM9bigzMCksbD1uKDMxKSx1PW4oMzIpLGY9bigzMyk7ZS5pbmplY3RFbEludG9Nb2RhbD1mdW5jdGlvbih0KXt2YXIgZT1vLmdldE5vZGUoYSksbj1vLnN0cmluZ1RvTm9kZSh0KTtyZXR1cm4gZS5hcHBlbmRDaGlsZChuKSxufTt2YXIgZD1mdW5jdGlvbih0KXt0LmNsYXNzTmFtZT1hLHQudGV4dENvbnRlbnQ9IiJ9LHA9ZnVuY3Rpb24odCxlKXtkKHQpO3ZhciBuPWUuY2xhc3NOYW1lO24mJnQuY2xhc3NMaXN0LmFkZChuKX07ZS5pbml0TW9kYWxDb250ZW50PWZ1bmN0aW9uKHQpe3ZhciBlPW8uZ2V0Tm9kZShhKTtwKGUsdCksYy5kZWZhdWx0KHQuaWNvbiksbC5pbml0VGl0bGUodC50aXRsZSksbC5pbml0VGV4dCh0LnRleHQpLGYuZGVmYXVsdCh0LmNvbnRlbnQpLHUuZGVmYXVsdCh0LmJ1dHRvbnMsdC5kYW5nZXJNb2RlKX07dmFyIG09ZnVuY3Rpb24oKXt2YXIgdD1vLmdldE5vZGUocyksZT1vLnN0cmluZ1RvTm9kZShyLm1vZGFsTWFya3VwKTt0LmFwcGVuZENoaWxkKGUpfTtlLmRlZmF1bHQ9bX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigzKSxyPXtpc09wZW46ITEscHJvbWlzZTpudWxsLGFjdGlvbnM6e30sdGltZXI6bnVsbH0saT1PYmplY3QuYXNzaWduKHt9LHIpO2UucmVzZXRTdGF0ZT1mdW5jdGlvbigpe2k9T2JqZWN0LmFzc2lnbih7fSxyKX0sZS5zZXRBY3Rpb25WYWx1ZT1mdW5jdGlvbih0KXtpZigic3RyaW5nIj09dHlwZW9mIHQpcmV0dXJuIGEoby5DT05GSVJNX0tFWSx0KTtmb3IodmFyIGUgaW4gdClhKGUsdFtlXSl9O3ZhciBhPWZ1bmN0aW9uKHQsZSl7aS5hY3Rpb25zW3RdfHwoaS5hY3Rpb25zW3RdPXt9KSxPYmplY3QuYXNzaWduKGkuYWN0aW9uc1t0XSx7dmFsdWU6ZX0pfTtlLnNldEFjdGlvbk9wdGlvbnNGb3I9ZnVuY3Rpb24odCxlKXt2YXIgbj0odm9pZCAwPT09ZT97fTplKS5jbG9zZU1vZGFsLG89dm9pZCAwPT09bnx8bjtPYmplY3QuYXNzaWduKGkuYWN0aW9uc1t0XSx7Y2xvc2VNb2RhbDpvfSl9LGUuZGVmYXVsdD1pfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLHI9bigzKSxpPW4oMCksYT1pLmRlZmF1bHQuT1ZFUkxBWSxzPWkuZGVmYXVsdC5TSE9XX01PREFMLGM9aS5kZWZhdWx0LkJVVFRPTixsPWkuZGVmYXVsdC5CVVRUT05fTE9BRElORyx1PW4oNSk7ZS5vcGVuTW9kYWw9ZnVuY3Rpb24oKXtvLmdldE5vZGUoYSkuY2xhc3NMaXN0LmFkZChzKSx1LmRlZmF1bHQuaXNPcGVuPSEwfTt2YXIgZj1mdW5jdGlvbigpe28uZ2V0Tm9kZShhKS5jbGFzc0xpc3QucmVtb3ZlKHMpLHUuZGVmYXVsdC5pc09wZW49ITF9O2Uub25BY3Rpb249ZnVuY3Rpb24odCl7dm9pZCAwPT09dCYmKHQ9ci5DQU5DRUxfS0VZKTt2YXIgZT11LmRlZmF1bHQuYWN0aW9uc1t0XSxuPWUudmFsdWU7aWYoITE9PT1lLmNsb3NlTW9kYWwpe3ZhciBpPWMrIi0tIit0O28uZ2V0Tm9kZShpKS5jbGFzc0xpc3QuYWRkKGwpfWVsc2UgZigpO3UuZGVmYXVsdC5wcm9taXNlLnJlc29sdmUobil9LGUuZ2V0U3RhdGU9ZnVuY3Rpb24oKXt2YXIgdD1PYmplY3QuYXNzaWduKHt9LHUuZGVmYXVsdCk7cmV0dXJuIGRlbGV0ZSB0LnByb21pc2UsZGVsZXRlIHQudGltZXIsdH0sZS5zdG9wTG9hZGluZz1mdW5jdGlvbigpe2Zvcih2YXIgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuIitjKSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3RbZV0uY2xhc3NMaXN0LnJlbW92ZShsKX19fSxmdW5jdGlvbih0LGUpe3ZhciBuO249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKTt0cnl7bj1ufHxGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpfHwoMCxldmFsKSgidGhpcyIpfWNhdGNoKHQpeyJvYmplY3QiPT10eXBlb2Ygd2luZG93JiYobj13aW5kb3cpfXQuZXhwb3J0cz1ufSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGUpe3QuZXhwb3J0cz1lLnN3ZWV0QWxlcnQ9big5KX0pLmNhbGwoZSxuKDcpKX0sZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbihlKXt0LmV4cG9ydHM9ZS5zd2FsPW4oMTApfSkuY2FsbChlLG4oNykpfSxmdW5jdGlvbih0LGUsbil7InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJm4oMTEpLG4oMTYpO3ZhciBvPW4oMjMpLmRlZmF1bHQ7dC5leHBvcnRzPW99LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDEyKTsic3RyaW5nIj09dHlwZW9mIG8mJihvPVtbdC5pLG8sIiJdXSk7dmFyIHI9e2luc2VydEF0OiJ0b3AifTtyLnRyYW5zZm9ybT12b2lkIDA7bigxNCkobyxyKTtvLmxvY2FscyYmKHQuZXhwb3J0cz1vLmxvY2Fscyl9LGZ1bmN0aW9uKHQsZSxuKXtlPXQuZXhwb3J0cz1uKDEzKSh2b2lkIDApLGUucHVzaChbdC5pLCcuc3dhbC1pY29uLS1lcnJvcntib3JkZXItY29sb3I6I2YyNzQ3NDstd2Via2l0LWFuaW1hdGlvbjphbmltYXRlRXJyb3JJY29uIC41czthbmltYXRpb246YW5pbWF0ZUVycm9ySWNvbiAuNXN9LnN3YWwtaWNvbi0tZXJyb3JfX3gtbWFya3twb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrOy13ZWJraXQtYW5pbWF0aW9uOmFuaW1hdGVYTWFyayAuNXM7YW5pbWF0aW9uOmFuaW1hdGVYTWFyayAuNXN9LnN3YWwtaWNvbi0tZXJyb3JfX2xpbmV7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjVweDt3aWR0aDo0N3B4O2JhY2tncm91bmQtY29sb3I6I2YyNzQ3NDtkaXNwbGF5OmJsb2NrO3RvcDozN3B4O2JvcmRlci1yYWRpdXM6MnB4fS5zd2FsLWljb24tLWVycm9yX19saW5lLS1sZWZ0ey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7bGVmdDoxN3B4fS5zd2FsLWljb24tLWVycm9yX19saW5lLS1yaWdodHstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7cmlnaHQ6MTZweH1ALXdlYmtpdC1rZXlmcmFtZXMgYW5pbWF0ZUVycm9ySWNvbnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGVYKDEwMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZVgoMTAwZGVnKTtvcGFjaXR5OjB9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlWCgwZGVnKTt0cmFuc2Zvcm06cm90YXRlWCgwZGVnKTtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgYW5pbWF0ZUVycm9ySWNvbnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGVYKDEwMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZVgoMTAwZGVnKTtvcGFjaXR5OjB9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlWCgwZGVnKTt0cmFuc2Zvcm06cm90YXRlWCgwZGVnKTtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBhbmltYXRlWE1hcmt7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjQpO3RyYW5zZm9ybTpzY2FsZSguNCk7bWFyZ2luLXRvcDoyNnB4O29wYWNpdHk6MH01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjQpO3RyYW5zZm9ybTpzY2FsZSguNCk7bWFyZ2luLXRvcDoyNnB4O29wYWNpdHk6MH04MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xNSk7dHJhbnNmb3JtOnNjYWxlKDEuMTUpO21hcmdpbi10b3A6LTZweH10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7bWFyZ2luLXRvcDowO29wYWNpdHk6MX19QGtleWZyYW1lcyBhbmltYXRlWE1hcmt7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjQpO3RyYW5zZm9ybTpzY2FsZSguNCk7bWFyZ2luLXRvcDoyNnB4O29wYWNpdHk6MH01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjQpO3RyYW5zZm9ybTpzY2FsZSguNCk7bWFyZ2luLXRvcDoyNnB4O29wYWNpdHk6MH04MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xNSk7dHJhbnNmb3JtOnNjYWxlKDEuMTUpO21hcmdpbi10b3A6LTZweH10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7bWFyZ2luLXRvcDowO29wYWNpdHk6MX19LnN3YWwtaWNvbi0td2FybmluZ3tib3JkZXItY29sb3I6I2Y4YmI4Njstd2Via2l0LWFuaW1hdGlvbjpwdWxzZVdhcm5pbmcgLjc1cyBpbmZpbml0ZSBhbHRlcm5hdGU7YW5pbWF0aW9uOnB1bHNlV2FybmluZyAuNzVzIGluZmluaXRlIGFsdGVybmF0ZX0uc3dhbC1pY29uLS13YXJuaW5nX19ib2R5e3dpZHRoOjVweDtoZWlnaHQ6NDdweDt0b3A6MTBweDtib3JkZXItcmFkaXVzOjJweDttYXJnaW4tbGVmdDotMnB4fS5zd2FsLWljb24tLXdhcm5pbmdfX2JvZHksLnN3YWwtaWNvbi0td2FybmluZ19fZG90e3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO2JhY2tncm91bmQtY29sb3I6I2Y4YmI4Nn0uc3dhbC1pY29uLS13YXJuaW5nX19kb3R7d2lkdGg6N3B4O2hlaWdodDo3cHg7Ym9yZGVyLXJhZGl1czo1MCU7bWFyZ2luLWxlZnQ6LTRweDtib3R0b206LTExcHh9QC13ZWJraXQta2V5ZnJhbWVzIHB1bHNlV2FybmluZ3swJXtib3JkZXItY29sb3I6I2Y4ZDQ4Nn10b3tib3JkZXItY29sb3I6I2Y4YmI4Nn19QGtleWZyYW1lcyBwdWxzZVdhcm5pbmd7MCV7Ym9yZGVyLWNvbG9yOiNmOGQ0ODZ9dG97Ym9yZGVyLWNvbG9yOiNmOGJiODZ9fS5zd2FsLWljb24tLXN1Y2Nlc3N7Ym9yZGVyLWNvbG9yOiNhNWRjODZ9LnN3YWwtaWNvbi0tc3VjY2VzczphZnRlciwuc3dhbC1pY29uLS1zdWNjZXNzOmJlZm9yZXtjb250ZW50OiIiO2JvcmRlci1yYWRpdXM6NTAlO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjYwcHg7aGVpZ2h0OjEyMHB4O2JhY2tncm91bmQ6I2ZmZjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpfS5zd2FsLWljb24tLXN1Y2Nlc3M6YmVmb3Jle2JvcmRlci1yYWRpdXM6MTIwcHggMCAwIDEyMHB4O3RvcDotN3B4O2xlZnQ6LTMzcHg7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo2MHB4IDYwcHg7dHJhbnNmb3JtLW9yaWdpbjo2MHB4IDYwcHh9LnN3YWwtaWNvbi0tc3VjY2VzczphZnRlcntib3JkZXItcmFkaXVzOjAgMTIwcHggMTIwcHggMDt0b3A6LTExcHg7bGVmdDozMHB4Oy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46MCA2MHB4O3RyYW5zZm9ybS1vcmlnaW46MCA2MHB4Oy13ZWJraXQtYW5pbWF0aW9uOnJvdGF0ZVBsYWNlaG9sZGVyIDQuMjVzIGVhc2UtaW47YW5pbWF0aW9uOnJvdGF0ZVBsYWNlaG9sZGVyIDQuMjVzIGVhc2UtaW59LnN3YWwtaWNvbi0tc3VjY2Vzc19fcmluZ3t3aWR0aDo4MHB4O2hlaWdodDo4MHB4O2JvcmRlcjo0cHggc29saWQgaHNsYSg5OCw1NSUsNjklLC4yKTtib3JkZXItcmFkaXVzOjUwJTtib3gtc2l6aW5nOmNvbnRlbnQtYm94O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTRweDt0b3A6LTRweDt6LWluZGV4OjJ9LnN3YWwtaWNvbi0tc3VjY2Vzc19faGlkZS1jb3JuZXJze3dpZHRoOjVweDtoZWlnaHQ6OTBweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7cGFkZGluZzoxcHg7cG9zaXRpb246YWJzb2x1dGU7bGVmdDoyOHB4O3RvcDo4cHg7ei1pbmRleDoxOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0uc3dhbC1pY29uLS1zdWNjZXNzX19saW5le2hlaWdodDo1cHg7YmFja2dyb3VuZC1jb2xvcjojYTVkYzg2O2Rpc3BsYXk6YmxvY2s7Ym9yZGVyLXJhZGl1czoycHg7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoyfS5zd2FsLWljb24tLXN1Y2Nlc3NfX2xpbmUtLXRpcHt3aWR0aDoyNXB4O2xlZnQ6MTRweDt0b3A6NDZweDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpOy13ZWJraXQtYW5pbWF0aW9uOmFuaW1hdGVTdWNjZXNzVGlwIC43NXM7YW5pbWF0aW9uOmFuaW1hdGVTdWNjZXNzVGlwIC43NXN9LnN3YWwtaWNvbi0tc3VjY2Vzc19fbGluZS0tbG9uZ3t3aWR0aDo0N3B4O3JpZ2h0OjhweDt0b3A6MzhweDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7LXdlYmtpdC1hbmltYXRpb246YW5pbWF0ZVN1Y2Nlc3NMb25nIC43NXM7YW5pbWF0aW9uOmFuaW1hdGVTdWNjZXNzTG9uZyAuNzVzfUAtd2Via2l0LWtleWZyYW1lcyByb3RhdGVQbGFjZWhvbGRlcnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9NSV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfTEyJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDA1ZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDA1ZGVnKX19QGtleWZyYW1lcyByb3RhdGVQbGFjZWhvbGRlcnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9NSV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfTEyJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDA1ZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNDA1ZGVnKX19QC13ZWJraXQta2V5ZnJhbWVzIGFuaW1hdGVTdWNjZXNzVGlwezAle3dpZHRoOjA7bGVmdDoxcHg7dG9wOjE5cHh9NTQle3dpZHRoOjA7bGVmdDoxcHg7dG9wOjE5cHh9NzAle3dpZHRoOjUwcHg7bGVmdDotOHB4O3RvcDozN3B4fTg0JXt3aWR0aDoxN3B4O2xlZnQ6MjFweDt0b3A6NDhweH10b3t3aWR0aDoyNXB4O2xlZnQ6MTRweDt0b3A6NDVweH19QGtleWZyYW1lcyBhbmltYXRlU3VjY2Vzc1RpcHswJXt3aWR0aDowO2xlZnQ6MXB4O3RvcDoxOXB4fTU0JXt3aWR0aDowO2xlZnQ6MXB4O3RvcDoxOXB4fTcwJXt3aWR0aDo1MHB4O2xlZnQ6LThweDt0b3A6MzdweH04NCV7d2lkdGg6MTdweDtsZWZ0OjIxcHg7dG9wOjQ4cHh9dG97d2lkdGg6MjVweDtsZWZ0OjE0cHg7dG9wOjQ1cHh9fUAtd2Via2l0LWtleWZyYW1lcyBhbmltYXRlU3VjY2Vzc0xvbmd7MCV7d2lkdGg6MDtyaWdodDo0NnB4O3RvcDo1NHB4fTY1JXt3aWR0aDowO3JpZ2h0OjQ2cHg7dG9wOjU0cHh9ODQle3dpZHRoOjU1cHg7cmlnaHQ6MDt0b3A6MzVweH10b3t3aWR0aDo0N3B4O3JpZ2h0OjhweDt0b3A6MzhweH19QGtleWZyYW1lcyBhbmltYXRlU3VjY2Vzc0xvbmd7MCV7d2lkdGg6MDtyaWdodDo0NnB4O3RvcDo1NHB4fTY1JXt3aWR0aDowO3JpZ2h0OjQ2cHg7dG9wOjU0cHh9ODQle3dpZHRoOjU1cHg7cmlnaHQ6MDt0b3A6MzVweH10b3t3aWR0aDo0N3B4O3JpZ2h0OjhweDt0b3A6MzhweH19LnN3YWwtaWNvbi0taW5mb3tib3JkZXItY29sb3I6I2M5ZGFlMX0uc3dhbC1pY29uLS1pbmZvOmJlZm9yZXt3aWR0aDo1cHg7aGVpZ2h0OjI5cHg7Ym90dG9tOjE3cHg7Ym9yZGVyLXJhZGl1czoycHg7bWFyZ2luLWxlZnQ6LTJweH0uc3dhbC1pY29uLS1pbmZvOmFmdGVyLC5zd2FsLWljb24tLWluZm86YmVmb3Jle2NvbnRlbnQ6IiI7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo1MCU7YmFja2dyb3VuZC1jb2xvcjojYzlkYWUxfS5zd2FsLWljb24tLWluZm86YWZ0ZXJ7d2lkdGg6N3B4O2hlaWdodDo3cHg7Ym9yZGVyLXJhZGl1czo1MCU7bWFyZ2luLWxlZnQ6LTNweDt0b3A6MTlweH0uc3dhbC1pY29ue3dpZHRoOjgwcHg7aGVpZ2h0OjgwcHg7Ym9yZGVyLXdpZHRoOjRweDtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLXJhZGl1czo1MCU7cGFkZGluZzowO3Bvc2l0aW9uOnJlbGF0aXZlO2JveC1zaXppbmc6Y29udGVudC1ib3g7bWFyZ2luOjIwcHggYXV0b30uc3dhbC1pY29uOmZpcnN0LWNoaWxke21hcmdpbi10b3A6MzJweH0uc3dhbC1pY29uLS1jdXN0b217d2lkdGg6YXV0bztoZWlnaHQ6YXV0bzttYXgtd2lkdGg6MTAwJTtib3JkZXI6bm9uZTtib3JkZXItcmFkaXVzOjB9LnN3YWwtaWNvbiBpbWd7bWF4LXdpZHRoOjEwMCU7bWF4LWhlaWdodDoxMDAlfS5zd2FsLXRpdGxle2NvbG9yOnJnYmEoMCwwLDAsLjY1KTtmb250LXdlaWdodDo2MDA7dGV4dC10cmFuc2Zvcm06bm9uZTtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MTNweCAxNnB4O2ZvbnQtc2l6ZToyN3B4O2xpbmUtaGVpZ2h0Om5vcm1hbDt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjB9LnN3YWwtdGl0bGU6Zmlyc3QtY2hpbGR7bWFyZ2luLXRvcDoyNnB4fS5zd2FsLXRpdGxlOm5vdCg6Zmlyc3QtY2hpbGQpe3BhZGRpbmctYm90dG9tOjB9LnN3YWwtdGl0bGU6bm90KDpsYXN0LWNoaWxkKXttYXJnaW4tYm90dG9tOjEzcHh9LnN3YWwtdGV4dHtmb250LXNpemU6MTZweDtwb3NpdGlvbjpyZWxhdGl2ZTtmbG9hdDpub25lO2xpbmUtaGVpZ2h0Om5vcm1hbDt2ZXJ0aWNhbC1hbGlnbjp0b3A7dGV4dC1hbGlnbjpsZWZ0O2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowO3BhZGRpbmc6MCAxMHB4O2ZvbnQtd2VpZ2h0OjQwMDtjb2xvcjpyZ2JhKDAsMCwwLC42NCk7bWF4LXdpZHRoOmNhbGMoMTAwJSAtIDIwcHgpO292ZXJmbG93LXdyYXA6YnJlYWstd29yZDtib3gtc2l6aW5nOmJvcmRlci1ib3h9LnN3YWwtdGV4dDpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOjQ1cHh9LnN3YWwtdGV4dDpsYXN0LWNoaWxke21hcmdpbi1ib3R0b206NDVweH0uc3dhbC1mb290ZXJ7dGV4dC1hbGlnbjpyaWdodDtwYWRkaW5nLXRvcDoxM3B4O21hcmdpbi10b3A6MTNweDtwYWRkaW5nOjEzcHggMTZweDtib3JkZXItcmFkaXVzOmluaGVyaXQ7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9LnN3YWwtYnV0dG9uLWNvbnRhaW5lcnttYXJnaW46NXB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlfS5zd2FsLWJ1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOiM3Y2QxZjk7Y29sb3I6I2ZmZjtib3JkZXI6bm9uZTtib3gtc2hhZG93Om5vbmU7Ym9yZGVyLXJhZGl1czo1cHg7Zm9udC13ZWlnaHQ6NjAwO2ZvbnQtc2l6ZToxNHB4O3BhZGRpbmc6MTBweCAyNHB4O21hcmdpbjowO2N1cnNvcjpwb2ludGVyfS5zd2FsLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojNzhjYmYyfS5zd2FsLWJ1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjojNzBiY2UwfS5zd2FsLWJ1dHRvbjpmb2N1c3tvdXRsaW5lOm5vbmU7Ym94LXNoYWRvdzowIDAgMCAxcHggI2ZmZiwwIDAgMCAzcHggcmdiYSg0MywxMTQsMTY1LC4yOSl9LnN3YWwtYnV0dG9uW2Rpc2FibGVkXXtvcGFjaXR5Oi41O2N1cnNvcjpkZWZhdWx0fS5zd2FsLWJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MH0uc3dhbC1idXR0b24tLWNhbmNlbHtjb2xvcjojNTU1O2JhY2tncm91bmQtY29sb3I6I2VmZWZlZn0uc3dhbC1idXR0b24tLWNhbmNlbDpub3QoW2Rpc2FibGVkXSk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZThlOGU4fS5zd2FsLWJ1dHRvbi0tY2FuY2VsOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNkN2Q3ZDd9LnN3YWwtYnV0dG9uLS1jYW5jZWw6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAxcHggI2ZmZiwwIDAgMCAzcHggcmdiYSgxMTYsMTM2LDE1MCwuMjkpfS5zd2FsLWJ1dHRvbi0tZGFuZ2Vye2JhY2tncm91bmQtY29sb3I6I2U2NDk0Mn0uc3dhbC1idXR0b24tLWRhbmdlcjpub3QoW2Rpc2FibGVkXSk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZGY0NzQwfS5zd2FsLWJ1dHRvbi0tZGFuZ2VyOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNjZjQyM2J9LnN3YWwtYnV0dG9uLS1kYW5nZXI6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAxcHggI2ZmZiwwIDAgMCAzcHggcmdiYSgxNjUsNDMsNDMsLjI5KX0uc3dhbC1jb250ZW50e3BhZGRpbmc6MCAyMHB4O21hcmdpbi10b3A6MjBweDtmb250LXNpemU6bWVkaXVtfS5zd2FsLWNvbnRlbnQ6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjIwcHh9LnN3YWwtY29udGVudF9faW5wdXQsLnN3YWwtY29udGVudF9fdGV4dGFyZWF7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjpub25lO2ZvbnQtc2l6ZToxNHB4O2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOjEwMCU7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xNCk7cGFkZGluZzoxMHB4IDEzcHg7Ym9yZGVyLXJhZGl1czoycHg7dHJhbnNpdGlvbjpib3JkZXItY29sb3IgLjJzfS5zd2FsLWNvbnRlbnRfX2lucHV0OmZvY3VzLC5zd2FsLWNvbnRlbnRfX3RleHRhcmVhOmZvY3Vze291dGxpbmU6bm9uZTtib3JkZXItY29sb3I6IzZkYjhmZn0uc3dhbC1jb250ZW50X190ZXh0YXJlYXtyZXNpemU6dmVydGljYWx9LnN3YWwtYnV0dG9uLS1sb2FkaW5ne2NvbG9yOnRyYW5zcGFyZW50fS5zd2FsLWJ1dHRvbi0tbG9hZGluZ34uc3dhbC1idXR0b25fX2xvYWRlcntvcGFjaXR5OjF9LnN3YWwtYnV0dG9uX19sb2FkZXJ7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OmF1dG87d2lkdGg6NDNweDt6LWluZGV4OjI7bGVmdDo1MCU7dG9wOjUwJTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTt0ZXh0LWFsaWduOmNlbnRlcjtwb2ludGVyLWV2ZW50czpub25lO29wYWNpdHk6MH0uc3dhbC1idXR0b25fX2xvYWRlciBkaXZ7ZGlzcGxheTppbmxpbmUtYmxvY2s7ZmxvYXQ6bm9uZTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTt3aWR0aDo5cHg7aGVpZ2h0OjlweDtwYWRkaW5nOjA7Ym9yZGVyOm5vbmU7bWFyZ2luOjJweDtvcGFjaXR5Oi40O2JvcmRlci1yYWRpdXM6N3B4O2JhY2tncm91bmQtY29sb3I6aHNsYSgwLDAlLDEwMCUsLjkpO3RyYW5zaXRpb246YmFja2dyb3VuZCAuMnM7LXdlYmtpdC1hbmltYXRpb246c3dhbC1sb2FkaW5nLWFuaW0gMXMgaW5maW5pdGU7YW5pbWF0aW9uOnN3YWwtbG9hZGluZy1hbmltIDFzIGluZmluaXRlfS5zd2FsLWJ1dHRvbl9fbG9hZGVyIGRpdjpudGgtY2hpbGQoM24rMil7LXdlYmtpdC1hbmltYXRpb24tZGVsYXk6LjE1czthbmltYXRpb24tZGVsYXk6LjE1c30uc3dhbC1idXR0b25fX2xvYWRlciBkaXY6bnRoLWNoaWxkKDNuKzMpey13ZWJraXQtYW5pbWF0aW9uLWRlbGF5Oi4zczthbmltYXRpb24tZGVsYXk6LjNzfUAtd2Via2l0LWtleWZyYW1lcyBzd2FsLWxvYWRpbmctYW5pbXswJXtvcGFjaXR5Oi40fTIwJXtvcGFjaXR5Oi40fTUwJXtvcGFjaXR5OjF9dG97b3BhY2l0eTouNH19QGtleWZyYW1lcyBzd2FsLWxvYWRpbmctYW5pbXswJXtvcGFjaXR5Oi40fTIwJXtvcGFjaXR5Oi40fTUwJXtvcGFjaXR5OjF9dG97b3BhY2l0eTouNH19LnN3YWwtb3ZlcmxheXtwb3NpdGlvbjpmaXhlZDt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MDtvdmVyZmxvdy15OmF1dG87YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC40KTt6LWluZGV4OjEwMDAwO3BvaW50ZXItZXZlbnRzOm5vbmU7b3BhY2l0eTowO3RyYW5zaXRpb246b3BhY2l0eSAuM3N9LnN3YWwtb3ZlcmxheTpiZWZvcmV7Y29udGVudDoiICI7ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246bWlkZGxlO2hlaWdodDoxMDAlfS5zd2FsLW92ZXJsYXktLXNob3ctbW9kYWx7b3BhY2l0eToxO3BvaW50ZXItZXZlbnRzOmF1dG99LnN3YWwtb3ZlcmxheS0tc2hvdy1tb2RhbCAuc3dhbC1tb2RhbHtvcGFjaXR5OjE7cG9pbnRlci1ldmVudHM6YXV0bztib3gtc2l6aW5nOmJvcmRlci1ib3g7LXdlYmtpdC1hbmltYXRpb246c2hvd1N3ZWV0QWxlcnQgLjNzO2FuaW1hdGlvbjpzaG93U3dlZXRBbGVydCAuM3M7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfS5zd2FsLW1vZGFse3dpZHRoOjQ3OHB4O29wYWNpdHk6MDtwb2ludGVyLWV2ZW50czpub25lO2JhY2tncm91bmQtY29sb3I6I2ZmZjt0ZXh0LWFsaWduOmNlbnRlcjtib3JkZXItcmFkaXVzOjVweDtwb3NpdGlvbjpzdGF0aWM7bWFyZ2luOjIwcHggYXV0bztkaXNwbGF5OmlubGluZS1ibG9jazt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgNTAlO3RyYW5zZm9ybS1vcmlnaW46NTAlIDUwJTt6LWluZGV4OjEwMDAxO3RyYW5zaXRpb246b3BhY2l0eSAuMnMsLXdlYmtpdC10cmFuc2Zvcm0gLjNzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zcyxvcGFjaXR5IC4yczt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3Msb3BhY2l0eSAuMnMsLXdlYmtpdC10cmFuc2Zvcm0gLjNzfUBtZWRpYSAobWF4LXdpZHRoOjUwMHB4KXsuc3dhbC1tb2RhbHt3aWR0aDpjYWxjKDEwMCUgLSAyMHB4KX19QC13ZWJraXQta2V5ZnJhbWVzIHNob3dTd2VldEFsZXJ0ezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0xJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguNSk7dHJhbnNmb3JtOnNjYWxlKC41KX00NSV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4wNSk7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguOTUpO3RyYW5zZm9ybTpzY2FsZSguOTUpfXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19QGtleWZyYW1lcyBzaG93U3dlZXRBbGVydHswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9MSV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjUpO3RyYW5zZm9ybTpzY2FsZSguNSl9NDUley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMDUpO3RyYW5zZm9ybTpzY2FsZSgxLjA1KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjk1KTt0cmFuc2Zvcm06c2NhbGUoLjk1KX10b3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fScsIiJdKX0sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSl7dmFyIG49dFsxXXx8IiIscj10WzNdO2lmKCFyKXJldHVybiBuO2lmKGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBidG9hKXt2YXIgaT1vKHIpO3JldHVybltuXS5jb25jYXQoci5zb3VyY2VzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4iLyojIHNvdXJjZVVSTD0iK3Iuc291cmNlUm9vdCt0KyIgKi8ifSkpLmNvbmNhdChbaV0pLmpvaW4oIlxuIil9cmV0dXJuW25dLmpvaW4oIlxuIil9ZnVuY3Rpb24gbyh0KXtyZXR1cm4iLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkodCkpKSkrIiAqLyJ9dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKGUpe3ZhciBvPW4oZSx0KTtyZXR1cm4gZVsyXT8iQG1lZGlhICIrZVsyXSsieyIrbysifSI6b30pLmpvaW4oIiIpfSxlLmk9ZnVuY3Rpb24odCxuKXsic3RyaW5nIj09dHlwZW9mIHQmJih0PVtbbnVsbCx0LCIiXV0pO2Zvcih2YXIgbz17fSxyPTA7cjx0aGlzLmxlbmd0aDtyKyspe3ZhciBpPXRoaXNbcl1bMF07Im51bWJlciI9PXR5cGVvZiBpJiYob1tpXT0hMCl9Zm9yKHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIGE9dFtyXTsibnVtYmVyIj09dHlwZW9mIGFbMF0mJm9bYVswXV18fChuJiYhYVsyXT9hWzJdPW46biYmKGFbMl09IigiK2FbMl0rIikgYW5kICgiK24rIikiKSxlLnB1c2goYSkpfX0sZX19LGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBvKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl0scj1tW28uaWRdO2lmKHIpe3IucmVmcysrO2Zvcih2YXIgaT0wO2k8ci5wYXJ0cy5sZW5ndGg7aSsrKXIucGFydHNbaV0oby5wYXJ0c1tpXSk7Zm9yKDtpPG8ucGFydHMubGVuZ3RoO2krKylyLnBhcnRzLnB1c2godShvLnBhcnRzW2ldLGUpKX1lbHNle2Zvcih2YXIgYT1bXSxpPTA7aTxvLnBhcnRzLmxlbmd0aDtpKyspYS5wdXNoKHUoby5wYXJ0c1tpXSxlKSk7bVtvLmlkXT17aWQ6by5pZCxyZWZzOjEscGFydHM6YX19fX1mdW5jdGlvbiByKHQsZSl7Zm9yKHZhciBuPVtdLG89e30scj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgaT10W3JdLGE9ZS5iYXNlP2lbMF0rZS5iYXNlOmlbMF0scz1pWzFdLGM9aVsyXSxsPWlbM10sdT17Y3NzOnMsbWVkaWE6Yyxzb3VyY2VNYXA6bH07b1thXT9vW2FdLnBhcnRzLnB1c2godSk6bi5wdXNoKG9bYV09e2lkOmEscGFydHM6W3VdfSl9cmV0dXJuIG59ZnVuY3Rpb24gaSh0LGUpe3ZhciBuPXYodC5pbnNlcnRJbnRvKTtpZighbil0aHJvdyBuZXcgRXJyb3IoIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuIik7dmFyIG89d1t3Lmxlbmd0aC0xXTtpZigidG9wIj09PXQuaW5zZXJ0QXQpbz9vLm5leHRTaWJsaW5nP24uaW5zZXJ0QmVmb3JlKGUsby5uZXh0U2libGluZyk6bi5hcHBlbmRDaGlsZChlKTpuLmluc2VydEJlZm9yZShlLG4uZmlyc3RDaGlsZCksdy5wdXNoKGUpO2Vsc2V7aWYoImJvdHRvbSIhPT10Lmluc2VydEF0KXRocm93IG5ldyBFcnJvcigiSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcuIE11c3QgYmUgJ3RvcCcgb3IgJ2JvdHRvbScuIik7bi5hcHBlbmRDaGlsZChlKX19ZnVuY3Rpb24gYSh0KXtpZihudWxsPT09dC5wYXJlbnROb2RlKXJldHVybiExO3QucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KTt2YXIgZT13LmluZGV4T2YodCk7ZT49MCYmdy5zcGxpY2UoZSwxKX1mdW5jdGlvbiBzKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7cmV0dXJuIHQuYXR0cnMudHlwZT0idGV4dC9jc3MiLGwoZSx0LmF0dHJzKSxpKHQsZSksZX1mdW5jdGlvbiBjKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpbmsiKTtyZXR1cm4gdC5hdHRycy50eXBlPSJ0ZXh0L2NzcyIsdC5hdHRycy5yZWw9InN0eWxlc2hlZXQiLGwoZSx0LmF0dHJzKSxpKHQsZSksZX1mdW5jdGlvbiBsKHQsZSl7T2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihuKXt0LnNldEF0dHJpYnV0ZShuLGVbbl0pfSl9ZnVuY3Rpb24gdSh0LGUpe3ZhciBuLG8scixpO2lmKGUudHJhbnNmb3JtJiZ0LmNzcyl7aWYoIShpPWUudHJhbnNmb3JtKHQuY3NzKSkpcmV0dXJuIGZ1bmN0aW9uKCl7fTt0LmNzcz1pfWlmKGUuc2luZ2xldG9uKXt2YXIgbD1oKys7bj1nfHwoZz1zKGUpKSxvPWYuYmluZChudWxsLG4sbCwhMSkscj1mLmJpbmQobnVsbCxuLGwsITApfWVsc2UgdC5zb3VyY2VNYXAmJiJmdW5jdGlvbiI9PXR5cGVvZiBVUkwmJiJmdW5jdGlvbiI9PXR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMJiYiZnVuY3Rpb24iPT10eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCYmImZ1bmN0aW9uIj09dHlwZW9mIEJsb2ImJiJmdW5jdGlvbiI9PXR5cGVvZiBidG9hPyhuPWMoZSksbz1wLmJpbmQobnVsbCxuLGUpLHI9ZnVuY3Rpb24oKXthKG4pLG4uaHJlZiYmVVJMLnJldm9rZU9iamVjdFVSTChuLmhyZWYpfSk6KG49cyhlKSxvPWQuYmluZChudWxsLG4pLHI9ZnVuY3Rpb24oKXthKG4pfSk7cmV0dXJuIG8odCksZnVuY3Rpb24oZSl7aWYoZSl7aWYoZS5jc3M9PT10LmNzcyYmZS5tZWRpYT09PXQubWVkaWEmJmUuc291cmNlTWFwPT09dC5zb3VyY2VNYXApcmV0dXJuO28odD1lKX1lbHNlIHIoKX19ZnVuY3Rpb24gZih0LGUsbixvKXt2YXIgcj1uPyIiOm8uY3NzO2lmKHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD14KGUscik7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShyKSxhPXQuY2hpbGROb2RlczthW2VdJiZ0LnJlbW92ZUNoaWxkKGFbZV0pLGEubGVuZ3RoP3QuaW5zZXJ0QmVmb3JlKGksYVtlXSk6dC5hcHBlbmRDaGlsZChpKX19ZnVuY3Rpb24gZCh0LGUpe3ZhciBuPWUuY3NzLG89ZS5tZWRpYTtpZihvJiZ0LnNldEF0dHJpYnV0ZSgibWVkaWEiLG8pLHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD1uO2Vsc2V7Zm9yKDt0LmZpcnN0Q2hpbGQ7KXQucmVtb3ZlQ2hpbGQodC5maXJzdENoaWxkKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKX19ZnVuY3Rpb24gcCh0LGUsbil7dmFyIG89bi5jc3Mscj1uLnNvdXJjZU1hcCxpPXZvaWQgMD09PWUuY29udmVydFRvQWJzb2x1dGVVcmxzJiZyOyhlLmNvbnZlcnRUb0Fic29sdXRlVXJsc3x8aSkmJihvPXkobykpLHImJihvKz0iXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocikpKSkrIiAqLyIpO3ZhciBhPW5ldyBCbG9iKFtvXSx7dHlwZToidGV4dC9jc3MifSkscz10LmhyZWY7dC5ocmVmPVVSTC5jcmVhdGVPYmplY3RVUkwoYSkscyYmVVJMLnJldm9rZU9iamVjdFVSTChzKX12YXIgbT17fSxiPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1lJiYoZT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKSksZX19KGZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdyYmZG9jdW1lbnQmJmRvY3VtZW50LmFsbCYmIXdpbmRvdy5hdG9ifSksdj1mdW5jdGlvbih0KXt2YXIgZT17fTtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHZvaWQgMD09PWVbbl0mJihlW25dPXQuY2FsbCh0aGlzLG4pKSxlW25dfX0oZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCl9KSxnPW51bGwsaD0wLHc9W10seT1uKDE1KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIERFQlVHJiZERUJVRyYmIm9iamVjdCIhPXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudCIpO2U9ZXx8e30sZS5hdHRycz0ib2JqZWN0Ij09dHlwZW9mIGUuYXR0cnM/ZS5hdHRyczp7fSxlLnNpbmdsZXRvbnx8KGUuc2luZ2xldG9uPWIoKSksZS5pbnNlcnRJbnRvfHwoZS5pbnNlcnRJbnRvPSJoZWFkIiksZS5pbnNlcnRBdHx8KGUuaW5zZXJ0QXQ9ImJvdHRvbSIpO3ZhciBuPXIodCxlKTtyZXR1cm4gbyhuLGUpLGZ1bmN0aW9uKHQpe2Zvcih2YXIgaT1bXSxhPTA7YTxuLmxlbmd0aDthKyspe3ZhciBzPW5bYV0sYz1tW3MuaWRdO2MucmVmcy0tLGkucHVzaChjKX1pZih0KXtvKHIodCxlKSxlKX1mb3IodmFyIGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIGM9aVthXTtpZigwPT09Yy5yZWZzKXtmb3IodmFyIGw9MDtsPGMucGFydHMubGVuZ3RoO2wrKyljLnBhcnRzW2xdKCk7ZGVsZXRlIG1bYy5pZF19fX19O3ZhciB4PWZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIGZ1bmN0aW9uKGUsbil7cmV0dXJuIHRbZV09bix0LmZpbHRlcihCb29sZWFuKS5qb2luKCJcbiIpfX0oKX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5sb2NhdGlvbjtpZighZSl0aHJvdyBuZXcgRXJyb3IoImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uIik7aWYoIXR8fCJzdHJpbmciIT10eXBlb2YgdClyZXR1cm4gdDt2YXIgbj1lLnByb3RvY29sKyIvLyIrZS5ob3N0LG89bitlLnBhdGhuYW1lLnJlcGxhY2UoL1wvW15cL10qJC8sIi8iKTtyZXR1cm4gdC5yZXBsYWNlKC91cmxccypcKCgoPzpbXikoXXxcKCg/OlteKShdK3xcKFteKShdKlwpKSpcKSkqKVwpL2dpLGZ1bmN0aW9uKHQsZSl7dmFyIHI9ZS50cmltKCkucmVwbGFjZSgvXiIoLiopIiQvLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KS5yZXBsYWNlKC9eJyguKiknJC8sZnVuY3Rpb24odCxlKXtyZXR1cm4gZX0pO2lmKC9eKCN8ZGF0YTp8aHR0cDpcL1wvfGh0dHBzOlwvXC98ZmlsZTpcL1wvXC8pL2kudGVzdChyKSlyZXR1cm4gdDt2YXIgaTtyZXR1cm4gaT0wPT09ci5pbmRleE9mKCIvLyIpP3I6MD09PXIuaW5kZXhPZigiLyIpP24rcjpvK3IucmVwbGFjZSgvXlwuXC8vLCIiKSwidXJsKCIrSlNPTi5zdHJpbmdpZnkoaSkrIikifSl9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxNyk7InVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3d8fHdpbmRvdy5Qcm9taXNlfHwod2luZG93LlByb21pc2U9byksbigyMSksU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc3x8KFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXM9ZnVuY3Rpb24odCxlKXsidXNlIHN0cmljdCI7cmV0dXJuIm51bWJlciIhPXR5cGVvZiBlJiYoZT0wKSwhKGUrdC5sZW5ndGg+dGhpcy5sZW5ndGgpJiYtMSE9PXRoaXMuaW5kZXhPZih0LGUpfSksQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCJpbmNsdWRlcyIse3ZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yKCcidGhpcyIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO3ZhciBuPU9iamVjdCh0aGlzKSxvPW4ubGVuZ3RoPj4+MDtpZigwPT09bylyZXR1cm4hMTtmb3IodmFyIHI9MHxlLGk9TWF0aC5tYXgocj49MD9yOm8tTWF0aC5hYnMociksMCk7aTxvOyl7aWYoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWV8fCJudW1iZXIiPT10eXBlb2YgdCYmIm51bWJlciI9PXR5cGVvZiBlJiZpc05hTih0KSYmaXNOYU4oZSl9KG5baV0sdCkpcmV0dXJuITA7aSsrfXJldHVybiExfX0pLCJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiZmdW5jdGlvbih0KXt0LmZvckVhY2goZnVuY3Rpb24odCl7dC5oYXNPd25Qcm9wZXJ0eSgicmVtb3ZlIil8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJyZW1vdmUiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpmdW5jdGlvbigpe3RoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKX19KX0pfShbRWxlbWVudC5wcm90b3R5cGUsQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUsRG9jdW1lbnRUeXBlLnByb3RvdHlwZV0pfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGUpeyFmdW5jdGlvbihuKXtmdW5jdGlvbiBvKCl7fWZ1bmN0aW9uIHIodCxlKXtyZXR1cm4gZnVuY3Rpb24oKXt0LmFwcGx5KGUsYXJndW1lbnRzKX19ZnVuY3Rpb24gaSh0KXtpZigib2JqZWN0IiE9dHlwZW9mIHRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcigiUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Iik7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcigibm90IGEgZnVuY3Rpb24iKTt0aGlzLl9zdGF0ZT0wLHRoaXMuX2hhbmRsZWQ9ITEsdGhpcy5fdmFsdWU9dm9pZCAwLHRoaXMuX2RlZmVycmVkcz1bXSxmKHQsdGhpcyl9ZnVuY3Rpb24gYSh0LGUpe2Zvcig7Mz09PXQuX3N0YXRlOyl0PXQuX3ZhbHVlO2lmKDA9PT10Ll9zdGF0ZSlyZXR1cm4gdm9pZCB0Ll9kZWZlcnJlZHMucHVzaChlKTt0Ll9oYW5kbGVkPSEwLGkuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCl7dmFyIG49MT09PXQuX3N0YXRlP2Uub25GdWxmaWxsZWQ6ZS5vblJlamVjdGVkO2lmKG51bGw9PT1uKXJldHVybiB2b2lkKDE9PT10Ll9zdGF0ZT9zOmMpKGUucHJvbWlzZSx0Ll92YWx1ZSk7dmFyIG87dHJ5e289bih0Ll92YWx1ZSl9Y2F0Y2godCl7cmV0dXJuIHZvaWQgYyhlLnByb21pc2UsdCl9cyhlLnByb21pc2Usbyl9KX1mdW5jdGlvbiBzKHQsZSl7dHJ5e2lmKGU9PT10KXRocm93IG5ldyBUeXBlRXJyb3IoIkEgcHJvbWlzZSBjYW5ub3QgYmUgcmVzb2x2ZWQgd2l0aCBpdHNlbGYuIik7aWYoZSYmKCJvYmplY3QiPT10eXBlb2YgZXx8ImZ1bmN0aW9uIj09dHlwZW9mIGUpKXt2YXIgbj1lLnRoZW47aWYoZSBpbnN0YW5jZW9mIGkpcmV0dXJuIHQuX3N0YXRlPTMsdC5fdmFsdWU9ZSx2b2lkIGwodCk7aWYoImZ1bmN0aW9uIj09dHlwZW9mIG4pcmV0dXJuIHZvaWQgZihyKG4sZSksdCl9dC5fc3RhdGU9MSx0Ll92YWx1ZT1lLGwodCl9Y2F0Y2goZSl7Yyh0LGUpfX1mdW5jdGlvbiBjKHQsZSl7dC5fc3RhdGU9Mix0Ll92YWx1ZT1lLGwodCl9ZnVuY3Rpb24gbCh0KXsyPT09dC5fc3RhdGUmJjA9PT10Ll9kZWZlcnJlZHMubGVuZ3RoJiZpLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpe3QuX2hhbmRsZWR8fGkuX3VuaGFuZGxlZFJlamVjdGlvbkZuKHQuX3ZhbHVlKX0pO2Zvcih2YXIgZT0wLG49dC5fZGVmZXJyZWRzLmxlbmd0aDtlPG47ZSsrKWEodCx0Ll9kZWZlcnJlZHNbZV0pO3QuX2RlZmVycmVkcz1udWxsfWZ1bmN0aW9uIHUodCxlLG4pe3RoaXMub25GdWxmaWxsZWQ9ImZ1bmN0aW9uIj09dHlwZW9mIHQ/dDpudWxsLHRoaXMub25SZWplY3RlZD0iZnVuY3Rpb24iPT10eXBlb2YgZT9lOm51bGwsdGhpcy5wcm9taXNlPW59ZnVuY3Rpb24gZih0LGUpe3ZhciBuPSExO3RyeXt0KGZ1bmN0aW9uKHQpe258fChuPSEwLHMoZSx0KSl9LGZ1bmN0aW9uKHQpe258fChuPSEwLGMoZSx0KSl9KX1jYXRjaCh0KXtpZihuKXJldHVybjtuPSEwLGMoZSx0KX19dmFyIGQ9c2V0VGltZW91dDtpLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aGVuKG51bGwsdCl9LGkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgdGhpcy5jb25zdHJ1Y3RvcihvKTtyZXR1cm4gYSh0aGlzLG5ldyB1KHQsZSxuKSksbn0saS5hbGw9ZnVuY3Rpb24odCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCk7cmV0dXJuIG5ldyBpKGZ1bmN0aW9uKHQsbil7ZnVuY3Rpb24gbyhpLGEpe3RyeXtpZihhJiYoIm9iamVjdCI9PXR5cGVvZiBhfHwiZnVuY3Rpb24iPT10eXBlb2YgYSkpe3ZhciBzPWEudGhlbjtpZigiZnVuY3Rpb24iPT10eXBlb2YgcylyZXR1cm4gdm9pZCBzLmNhbGwoYSxmdW5jdGlvbih0KXtvKGksdCl9LG4pfWVbaV09YSwwPT0tLXImJnQoZSl9Y2F0Y2godCl7bih0KX19aWYoMD09PWUubGVuZ3RoKXJldHVybiB0KFtdKTtmb3IodmFyIHI9ZS5sZW5ndGgsaT0wO2k8ZS5sZW5ndGg7aSsrKW8oaSxlW2ldKX0pfSxpLnJlc29sdmU9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJvYmplY3QiPT10eXBlb2YgdCYmdC5jb25zdHJ1Y3Rvcj09PWk/dDpuZXcgaShmdW5jdGlvbihlKXtlKHQpfSl9LGkucmVqZWN0PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgaShmdW5jdGlvbihlLG4pe24odCl9KX0saS5yYWNlPWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgaShmdW5jdGlvbihlLG4pe2Zvcih2YXIgbz0wLHI9dC5sZW5ndGg7bzxyO28rKyl0W29dLnRoZW4oZSxuKX0pfSxpLl9pbW1lZGlhdGVGbj0iZnVuY3Rpb24iPT10eXBlb2YgZSYmZnVuY3Rpb24odCl7ZSh0KX18fGZ1bmN0aW9uKHQpe2QodCwwKX0saS5fdW5oYW5kbGVkUmVqZWN0aW9uRm49ZnVuY3Rpb24odCl7InVuZGVmaW5lZCIhPXR5cGVvZiBjb25zb2xlJiZjb25zb2xlJiZjb25zb2xlLndhcm4oIlBvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjoiLHQpfSxpLl9zZXRJbW1lZGlhdGVGbj1mdW5jdGlvbih0KXtpLl9pbW1lZGlhdGVGbj10fSxpLl9zZXRVbmhhbmRsZWRSZWplY3Rpb25Gbj1mdW5jdGlvbih0KXtpLl91bmhhbmRsZWRSZWplY3Rpb25Gbj10fSx2b2lkIDAhPT10JiZ0LmV4cG9ydHM/dC5leHBvcnRzPWk6bi5Qcm9taXNlfHwobi5Qcm9taXNlPWkpfSh0aGlzKX0pLmNhbGwoZSxuKDE4KS5zZXRJbW1lZGlhdGUpfSxmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gbyh0LGUpe3RoaXMuX2lkPXQsdGhpcy5fY2xlYXJGbj1lfXZhciByPUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtlLnNldFRpbWVvdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG8oci5jYWxsKHNldFRpbWVvdXQsd2luZG93LGFyZ3VtZW50cyksY2xlYXJUaW1lb3V0KX0sZS5zZXRJbnRlcnZhbD1mdW5jdGlvbigpe3JldHVybiBuZXcgbyhyLmNhbGwoc2V0SW50ZXJ2YWwsd2luZG93LGFyZ3VtZW50cyksY2xlYXJJbnRlcnZhbCl9LGUuY2xlYXJUaW1lb3V0PWUuY2xlYXJJbnRlcnZhbD1mdW5jdGlvbih0KXt0JiZ0LmNsb3NlKCl9LG8ucHJvdG90eXBlLnVucmVmPW8ucHJvdG90eXBlLnJlZj1mdW5jdGlvbigpe30sby5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LHRoaXMuX2lkKX0sZS5lbnJvbGw9ZnVuY3Rpb24odCxlKXtjbGVhclRpbWVvdXQodC5faWRsZVRpbWVvdXRJZCksdC5faWRsZVRpbWVvdXQ9ZX0sZS51bmVucm9sbD1mdW5jdGlvbih0KXtjbGVhclRpbWVvdXQodC5faWRsZVRpbWVvdXRJZCksdC5faWRsZVRpbWVvdXQ9LTF9LGUuX3VucmVmQWN0aXZlPWUuYWN0aXZlPWZ1bmN0aW9uKHQpe2NsZWFyVGltZW91dCh0Ll9pZGxlVGltZW91dElkKTt2YXIgZT10Ll9pZGxlVGltZW91dDtlPj0wJiYodC5faWRsZVRpbWVvdXRJZD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5fb25UaW1lb3V0JiZ0Ll9vblRpbWVvdXQoKX0sZSkpfSxuKDE5KSxlLnNldEltbWVkaWF0ZT1zZXRJbW1lZGlhdGUsZS5jbGVhckltbWVkaWF0ZT1jbGVhckltbWVkaWF0ZX0sZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbih0LGUpeyFmdW5jdGlvbih0LG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBvKHQpeyJmdW5jdGlvbiIhPXR5cGVvZiB0JiYodD1uZXcgRnVuY3Rpb24oIiIrdCkpO2Zvcih2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXT1hcmd1bWVudHNbbisxXTt2YXIgbz17Y2FsbGJhY2s6dCxhcmdzOmV9O3JldHVybiBsW2NdPW8scyhjKSxjKyt9ZnVuY3Rpb24gcih0KXtkZWxldGUgbFt0XX1mdW5jdGlvbiBpKHQpe3ZhciBlPXQuY2FsbGJhY2ssbz10LmFyZ3M7c3dpdGNoKG8ubGVuZ3RoKXtjYXNlIDA6ZSgpO2JyZWFrO2Nhc2UgMTplKG9bMF0pO2JyZWFrO2Nhc2UgMjplKG9bMF0sb1sxXSk7YnJlYWs7Y2FzZSAzOmUob1swXSxvWzFdLG9bMl0pO2JyZWFrO2RlZmF1bHQ6ZS5hcHBseShuLG8pfX1mdW5jdGlvbiBhKHQpe2lmKHUpc2V0VGltZW91dChhLDAsdCk7ZWxzZXt2YXIgZT1sW3RdO2lmKGUpe3U9ITA7dHJ5e2koZSl9ZmluYWxseXtyKHQpLHU9ITF9fX19aWYoIXQuc2V0SW1tZWRpYXRlKXt2YXIgcyxjPTEsbD17fSx1PSExLGY9dC5kb2N1bWVudCxkPU9iamVjdC5nZXRQcm90b3R5cGVPZiYmT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpO2Q9ZCYmZC5zZXRUaW1lb3V0P2Q6dCwiW29iamVjdCBwcm9jZXNzXSI9PT17fS50b1N0cmluZy5jYWxsKHQucHJvY2Vzcyk/ZnVuY3Rpb24oKXtzPWZ1bmN0aW9uKHQpe2UubmV4dFRpY2soZnVuY3Rpb24oKXthKHQpfSl9fSgpOmZ1bmN0aW9uKCl7aWYodC5wb3N0TWVzc2FnZSYmIXQuaW1wb3J0U2NyaXB0cyl7dmFyIGU9ITAsbj10Lm9ubWVzc2FnZTtyZXR1cm4gdC5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtlPSExfSx0LnBvc3RNZXNzYWdlKCIiLCIqIiksdC5vbm1lc3NhZ2U9bixlfX0oKT9mdW5jdGlvbigpe3ZhciBlPSJzZXRJbW1lZGlhdGUkIitNYXRoLnJhbmRvbSgpKyIkIixuPWZ1bmN0aW9uKG4pe24uc291cmNlPT09dCYmInN0cmluZyI9PXR5cGVvZiBuLmRhdGEmJjA9PT1uLmRhdGEuaW5kZXhPZihlKSYmYSgrbi5kYXRhLnNsaWNlKGUubGVuZ3RoKSl9O3QuYWRkRXZlbnRMaXN0ZW5lcj90LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLG4sITEpOnQuYXR0YWNoRXZlbnQoIm9ubWVzc2FnZSIsbikscz1mdW5jdGlvbihuKXt0LnBvc3RNZXNzYWdlKGUrbiwiKiIpfX0oKTp0Lk1lc3NhZ2VDaGFubmVsP2Z1bmN0aW9uKCl7dmFyIHQ9bmV3IE1lc3NhZ2VDaGFubmVsO3QucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKHQpe2EodC5kYXRhKX0scz1mdW5jdGlvbihlKXt0LnBvcnQyLnBvc3RNZXNzYWdlKGUpfX0oKTpmJiYib25yZWFkeXN0YXRlY2hhbmdlImluIGYuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik/ZnVuY3Rpb24oKXt2YXIgdD1mLmRvY3VtZW50RWxlbWVudDtzPWZ1bmN0aW9uKGUpe3ZhciBuPWYuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7bi5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXthKGUpLG4ub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsdC5yZW1vdmVDaGlsZChuKSxuPW51bGx9LHQuYXBwZW5kQ2hpbGQobil9fSgpOmZ1bmN0aW9uKCl7cz1mdW5jdGlvbih0KXtzZXRUaW1lb3V0KGEsMCx0KX19KCksZC5zZXRJbW1lZGlhdGU9byxkLmNsZWFySW1tZWRpYXRlPXJ9fSgidW5kZWZpbmVkIj09dHlwZW9mIHNlbGY/dm9pZCAwPT09dD90aGlzOnQ6c2VsZil9KS5jYWxsKGUsbig3KSxuKDIwKSl9LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbigpe3Rocm93IG5ldyBFcnJvcigic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCIpfWZ1bmN0aW9uIG8oKXt0aHJvdyBuZXcgRXJyb3IoImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCIpfWZ1bmN0aW9uIHIodCl7aWYodT09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQodCwwKTtpZigodT09PW58fCF1KSYmc2V0VGltZW91dClyZXR1cm4gdT1zZXRUaW1lb3V0LHNldFRpbWVvdXQodCwwKTt0cnl7cmV0dXJuIHUodCwwKX1jYXRjaChlKXt0cnl7cmV0dXJuIHUuY2FsbChudWxsLHQsMCl9Y2F0Y2goZSl7cmV0dXJuIHUuY2FsbCh0aGlzLHQsMCl9fX1mdW5jdGlvbiBpKHQpe2lmKGY9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dCh0KTtpZigoZj09PW98fCFmKSYmY2xlYXJUaW1lb3V0KXJldHVybiBmPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQodCk7dHJ5e3JldHVybiBmKHQpfWNhdGNoKGUpe3RyeXtyZXR1cm4gZi5jYWxsKG51bGwsdCl9Y2F0Y2goZSl7cmV0dXJuIGYuY2FsbCh0aGlzLHQpfX19ZnVuY3Rpb24gYSgpe2ImJnAmJihiPSExLHAubGVuZ3RoP209cC5jb25jYXQobSk6dj0tMSxtLmxlbmd0aCYmcygpKX1mdW5jdGlvbiBzKCl7aWYoIWIpe3ZhciB0PXIoYSk7Yj0hMDtmb3IodmFyIGU9bS5sZW5ndGg7ZTspe2ZvcihwPW0sbT1bXTsrK3Y8ZTspcCYmcFt2XS5ydW4oKTt2PS0xLGU9bS5sZW5ndGh9cD1udWxsLGI9ITEsaSh0KX19ZnVuY3Rpb24gYyh0LGUpe3RoaXMuZnVuPXQsdGhpcy5hcnJheT1lfWZ1bmN0aW9uIGwoKXt9dmFyIHUsZixkPXQuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7dT0iZnVuY3Rpb24iPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om59Y2F0Y2godCl7dT1ufXRyeXtmPSJmdW5jdGlvbiI9PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om99Y2F0Y2godCl7Zj1vfX0oKTt2YXIgcCxtPVtdLGI9ITEsdj0tMTtkLm5leHRUaWNrPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKWVbbi0xXT1hcmd1bWVudHNbbl07bS5wdXNoKG5ldyBjKHQsZSkpLDEhPT1tLmxlbmd0aHx8Ynx8cihzKX0sYy5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0sZC50aXRsZT0iYnJvd3NlciIsZC5icm93c2VyPSEwLGQuZW52PXt9LGQuYXJndj1bXSxkLnZlcnNpb249IiIsZC52ZXJzaW9ucz17fSxkLm9uPWwsZC5hZGRMaXN0ZW5lcj1sLGQub25jZT1sLGQub2ZmPWwsZC5yZW1vdmVMaXN0ZW5lcj1sLGQucmVtb3ZlQWxsTGlzdGVuZXJzPWwsZC5lbWl0PWwsZC5wcmVwZW5kTGlzdGVuZXI9bCxkLnByZXBlbmRPbmNlTGlzdGVuZXI9bCxkLmxpc3RlbmVycz1mdW5jdGlvbih0KXtyZXR1cm5bXX0sZC5iaW5kaW5nPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcigicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQiKX0sZC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm4iLyJ9LGQuY2hkaXI9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQiKX0sZC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtuKDIyKS5wb2x5ZmlsbCgpfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG8odCxlKXtpZih2b2lkIDA9PT10fHxudWxsPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY29udmVydCBmaXJzdCBhcmd1bWVudCB0byBvYmplY3QiKTtmb3IodmFyIG49T2JqZWN0KHQpLG89MTtvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXt2YXIgcj1hcmd1bWVudHNbb107aWYodm9pZCAwIT09ciYmbnVsbCE9PXIpZm9yKHZhciBpPU9iamVjdC5rZXlzKE9iamVjdChyKSksYT0wLHM9aS5sZW5ndGg7YTxzO2ErKyl7dmFyIGM9aVthXSxsPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixjKTt2b2lkIDAhPT1sJiZsLmVudW1lcmFibGUmJihuW2NdPXJbY10pfX1yZXR1cm4gbn1mdW5jdGlvbiByKCl7T2JqZWN0LmFzc2lnbnx8T2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdCwiYXNzaWduIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6b30pfXQuZXhwb3J0cz17YXNzaWduOm8scG9seWZpbGw6cn19LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMjQpLHI9big2KSxpPW4oNSksYT1uKDM2KSxzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO2lmKCJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93KXt2YXIgbj1hLmdldE9wdHMuYXBwbHkodm9pZCAwLHQpO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LGUpe2kuZGVmYXVsdC5wcm9taXNlPXtyZXNvbHZlOnQscmVqZWN0OmV9LG8uZGVmYXVsdChuKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ci5vcGVuTW9kYWwoKX0pfSl9fTtzLmNsb3NlPXIub25BY3Rpb24scy5nZXRTdGF0ZT1yLmdldFN0YXRlLHMuc2V0QWN0aW9uVmFsdWU9aS5zZXRBY3Rpb25WYWx1ZSxzLnN0b3BMb2FkaW5nPXIuc3RvcExvYWRpbmcscy5zZXREZWZhdWx0cz1hLnNldERlZmF1bHRzLGUuZGVmYXVsdD1zfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLHI9bigwKSxpPXIuZGVmYXVsdC5NT0RBTCxhPW4oNCkscz1uKDM0KSxjPW4oMzUpLGw9bigxKTtlLmluaXQ9ZnVuY3Rpb24odCl7by5nZXROb2RlKGkpfHwoZG9jdW1lbnQuYm9keXx8bC50aHJvd0VycigiWW91IGNhbiBvbmx5IHVzZSBTd2VldEFsZXJ0IEFGVEVSIHRoZSBET00gaGFzIGxvYWRlZCEiKSxzLmRlZmF1bHQoKSxhLmRlZmF1bHQoKSksYS5pbml0TW9kYWxDb250ZW50KHQpLGMuZGVmYXVsdCh0KX0sZS5kZWZhdWx0PWUuaW5pdH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigwKSxyPW8uZGVmYXVsdC5NT0RBTDtlLm1vZGFsTWFya3VwPSdcbiAgPGRpdiBjbGFzcz0iJytyKyciIHJvbGU9ImRpYWxvZyIgYXJpYS1tb2RhbD0idHJ1ZSI+PC9kaXY+JyxlLmRlZmF1bHQ9ZS5tb2RhbE1hcmt1cH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigwKSxyPW8uZGVmYXVsdC5PVkVSTEFZLGk9JzxkaXYgXG4gICAgY2xhc3M9IicrcisnIlxuICAgIHRhYkluZGV4PSItMSI+XG4gIDwvZGl2Pic7ZS5kZWZhdWx0PWl9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMCkscj1vLmRlZmF1bHQuSUNPTjtlLmVycm9ySWNvbk1hcmt1cD1mdW5jdGlvbigpe3ZhciB0PXIrIi0tZXJyb3IiLGU9dCsiX19saW5lIjtyZXR1cm4nXG4gICAgPGRpdiBjbGFzcz0iJyt0KydfX3gtbWFyayI+XG4gICAgICA8c3BhbiBjbGFzcz0iJytlKyIgIitlKyctLWxlZnQiPjwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPSInK2UrIiAiK2UrJy0tcmlnaHQiPjwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgJ30sZS53YXJuaW5nSWNvbk1hcmt1cD1mdW5jdGlvbigpe3ZhciB0PXIrIi0td2FybmluZyI7cmV0dXJuJ1xuICAgIDxzcGFuIGNsYXNzPSInK3QrJ19fYm9keSI+XG4gICAgICA8c3BhbiBjbGFzcz0iJyt0KydfX2RvdCI+PC9zcGFuPlxuICAgIDwvc3Bhbj5cbiAgJ30sZS5zdWNjZXNzSWNvbk1hcmt1cD1mdW5jdGlvbigpe3ZhciB0PXIrIi0tc3VjY2VzcyI7cmV0dXJuJ1xuICAgIDxzcGFuIGNsYXNzPSInK3QrIl9fbGluZSAiK3QrJ19fbGluZS0tbG9uZyI+PC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPSInK3QrIl9fbGluZSAiK3QrJ19fbGluZS0tdGlwIj48L3NwYW4+XG5cbiAgICA8ZGl2IGNsYXNzPSInK3QrJ19fcmluZyI+PC9kaXY+XG4gICAgPGRpdiBjbGFzcz0iJyt0KydfX2hpZGUtY29ybmVycyI+PC9kaXY+XG4gICd9fSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDApLHI9by5kZWZhdWx0LkNPTlRFTlQ7ZS5jb250ZW50TWFya3VwPSdcbiAgPGRpdiBjbGFzcz0iJytyKyciPlxuXG4gIDwvZGl2PlxuJ30sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigwKSxyPW8uZGVmYXVsdC5CVVRUT05fQ09OVEFJTkVSLGk9by5kZWZhdWx0LkJVVFRPTixhPW8uZGVmYXVsdC5CVVRUT05fTE9BREVSO2UuYnV0dG9uTWFya3VwPSdcbiAgPGRpdiBjbGFzcz0iJytyKyciPlxuXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3M9IicraSsnIlxuICAgID48L2J1dHRvbj5cblxuICAgIDxkaXYgY2xhc3M9IicrYSsnIj5cbiAgICAgIDxkaXY+PC9kaXY+XG4gICAgICA8ZGl2PjwvZGl2PlxuICAgICAgPGRpdj48L2Rpdj5cbiAgICA8L2Rpdj5cblxuICA8L2Rpdj5cbid9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPW4oNCkscj1uKDIpLGk9bigwKSxhPWkuZGVmYXVsdC5JQ09OLHM9aS5kZWZhdWx0LklDT05fQ1VTVE9NLGM9WyJlcnJvciIsIndhcm5pbmciLCJzdWNjZXNzIiwiaW5mbyJdLGw9e2Vycm9yOnIuZXJyb3JJY29uTWFya3VwKCksd2FybmluZzpyLndhcm5pbmdJY29uTWFya3VwKCksc3VjY2VzczpyLnN1Y2Nlc3NJY29uTWFya3VwKCl9LHU9ZnVuY3Rpb24odCxlKXt2YXIgbj1hKyItLSIrdDtlLmNsYXNzTGlzdC5hZGQobik7dmFyIG89bFt0XTtvJiYoZS5pbm5lckhUTUw9byl9LGY9ZnVuY3Rpb24odCxlKXtlLmNsYXNzTGlzdC5hZGQocyk7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIik7bi5zcmM9dCxlLmFwcGVuZENoaWxkKG4pfSxkPWZ1bmN0aW9uKHQpe2lmKHQpe3ZhciBlPW8uaW5qZWN0RWxJbnRvTW9kYWwoci5pY29uTWFya3VwKTtjLmluY2x1ZGVzKHQpP3UodCxlKTpmKHQsZSl9fTtlLmRlZmF1bHQ9ZH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigyKSxyPW4oNCksaT1mdW5jdGlvbih0KXtuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCJBcHBsZVdlYktpdCIpJiYodC5zdHlsZS5kaXNwbGF5PSJub25lIix0Lm9mZnNldEhlaWdodCx0LnN0eWxlLmRpc3BsYXk9IiIpfTtlLmluaXRUaXRsZT1mdW5jdGlvbih0KXtpZih0KXt2YXIgZT1yLmluamVjdEVsSW50b01vZGFsKG8udGl0bGVNYXJrdXApO2UudGV4dENvbnRlbnQ9dCxpKGUpfX0sZS5pbml0VGV4dD1mdW5jdGlvbih0KXtpZih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7dC5zcGxpdCgiXG4iKS5mb3JFYWNoKGZ1bmN0aW9uKHQsbixvKXtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpKSxuPG8ubGVuZ3RoLTEmJmUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnIiKSl9KTt2YXIgbj1yLmluamVjdEVsSW50b01vZGFsKG8udGV4dE1hcmt1cCk7bi5hcHBlbmRDaGlsZChlKSxpKG4pfX19LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSkscj1uKDQpLGk9bigwKSxhPWkuZGVmYXVsdC5CVVRUT04scz1pLmRlZmF1bHQuREFOR0VSX0JVVFRPTixjPW4oMyksbD1uKDIpLHU9big2KSxmPW4oNSksZD1mdW5jdGlvbih0LGUsbil7dmFyIHI9ZS50ZXh0LGk9ZS52YWx1ZSxkPWUuY2xhc3NOYW1lLHA9ZS5jbG9zZU1vZGFsLG09by5zdHJpbmdUb05vZGUobC5idXR0b25NYXJrdXApLGI9bS5xdWVyeVNlbGVjdG9yKCIuIithKSx2PWErIi0tIit0O2lmKGIuY2xhc3NMaXN0LmFkZCh2KSxkKXsoQXJyYXkuaXNBcnJheShkKT9kOmQuc3BsaXQoIiAiKSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0Lmxlbmd0aD4wfSkuZm9yRWFjaChmdW5jdGlvbih0KXtiLmNsYXNzTGlzdC5hZGQodCl9KX1uJiZ0PT09Yy5DT05GSVJNX0tFWSYmYi5jbGFzc0xpc3QuYWRkKHMpLGIudGV4dENvbnRlbnQ9cjt2YXIgZz17fTtyZXR1cm4gZ1t0XT1pLGYuc2V0QWN0aW9uVmFsdWUoZyksZi5zZXRBY3Rpb25PcHRpb25zRm9yKHQse2Nsb3NlTW9kYWw6cH0pLGIuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLGZ1bmN0aW9uKCl7cmV0dXJuIHUub25BY3Rpb24odCl9KSxtfSxwPWZ1bmN0aW9uKHQsZSl7dmFyIG49ci5pbmplY3RFbEludG9Nb2RhbChsLmZvb3Rlck1hcmt1cCk7Zm9yKHZhciBvIGluIHQpe3ZhciBpPXRbb10sYT1kKG8saSxlKTtpLnZpc2libGUmJm4uYXBwZW5kQ2hpbGQoYSl9MD09PW4uY2hpbGRyZW4ubGVuZ3RoJiZuLnJlbW92ZSgpfTtlLmRlZmF1bHQ9cH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigzKSxyPW4oNCksaT1uKDIpLGE9big1KSxzPW4oNiksYz1uKDApLGw9Yy5kZWZhdWx0LkNPTlRFTlQsdT1mdW5jdGlvbih0KXt0LmFkZEV2ZW50TGlzdGVuZXIoImlucHV0IixmdW5jdGlvbih0KXt2YXIgZT10LnRhcmdldCxuPWUudmFsdWU7YS5zZXRBY3Rpb25WYWx1ZShuKX0pLHQuYWRkRXZlbnRMaXN0ZW5lcigia2V5dXAiLGZ1bmN0aW9uKHQpe2lmKCJFbnRlciI9PT10LmtleSlyZXR1cm4gcy5vbkFjdGlvbihvLkNPTkZJUk1fS0VZKX0pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0LmZvY3VzKCksYS5zZXRBY3Rpb25WYWx1ZSgiIil9LDApfSxmPWZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpLHI9bCsiX18iK2U7by5jbGFzc0xpc3QuYWRkKHIpO2Zvcih2YXIgaSBpbiBuKXt2YXIgYT1uW2ldO29baV09YX0iaW5wdXQiPT09ZSYmdShvKSx0LmFwcGVuZENoaWxkKG8pfSxkPWZ1bmN0aW9uKHQpe2lmKHQpe3ZhciBlPXIuaW5qZWN0RWxJbnRvTW9kYWwoaS5jb250ZW50TWFya3VwKSxuPXQuZWxlbWVudCxvPXQuYXR0cmlidXRlczsic3RyaW5nIj09dHlwZW9mIG4/ZihlLG4sbyk6ZS5hcHBlbmRDaGlsZChuKX19O2UuZGVmYXVsdD1kfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLHI9bigyKSxpPWZ1bmN0aW9uKCl7dmFyIHQ9by5zdHJpbmdUb05vZGUoci5vdmVybGF5TWFya3VwKTtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHQpfTtlLmRlZmF1bHQ9aX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89big1KSxyPW4oNiksaT1uKDEpLGE9bigzKSxzPW4oMCksYz1zLmRlZmF1bHQuTU9EQUwsbD1zLmRlZmF1bHQuQlVUVE9OLHU9cy5kZWZhdWx0Lk9WRVJMQVksZj1mdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdigpfSxkPWZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSxnKCl9LHA9ZnVuY3Rpb24odCl7aWYoby5kZWZhdWx0LmlzT3Blbilzd2l0Y2godC5rZXkpe2Nhc2UiRXNjYXBlIjpyZXR1cm4gci5vbkFjdGlvbihhLkNBTkNFTF9LRVkpfX0sbT1mdW5jdGlvbih0KXtpZihvLmRlZmF1bHQuaXNPcGVuKXN3aXRjaCh0LmtleSl7Y2FzZSJUYWIiOnJldHVybiBmKHQpfX0sYj1mdW5jdGlvbih0KXtpZihvLmRlZmF1bHQuaXNPcGVuKXJldHVybiJUYWIiPT09dC5rZXkmJnQuc2hpZnRLZXk/ZCh0KTp2b2lkIDB9LHY9ZnVuY3Rpb24oKXt2YXIgdD1pLmdldE5vZGUobCk7dCYmKHQudGFiSW5kZXg9MCx0LmZvY3VzKCkpfSxnPWZ1bmN0aW9uKCl7dmFyIHQ9aS5nZXROb2RlKGMpLGU9dC5xdWVyeVNlbGVjdG9yQWxsKCIuIitsKSxuPWUubGVuZ3RoLTEsbz1lW25dO28mJm8uZm9jdXMoKX0saD1mdW5jdGlvbih0KXt0W3QubGVuZ3RoLTFdLmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLG0pfSx3PWZ1bmN0aW9uKHQpe3RbMF0uYWRkRXZlbnRMaXN0ZW5lcigia2V5ZG93biIsYil9LHk9ZnVuY3Rpb24oKXt2YXIgdD1pLmdldE5vZGUoYyksZT10LnF1ZXJ5U2VsZWN0b3JBbGwoIi4iK2wpO2UubGVuZ3RoJiYoaChlKSx3KGUpKX0seD1mdW5jdGlvbih0KXtpZihpLmdldE5vZGUodSk9PT10LnRhcmdldClyZXR1cm4gci5vbkFjdGlvbihhLkNBTkNFTF9LRVkpfSxfPWZ1bmN0aW9uKHQpe3ZhciBlPWkuZ2V0Tm9kZSh1KTtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoImNsaWNrIix4KSx0JiZlLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIix4KX0saz1mdW5jdGlvbih0KXtvLmRlZmF1bHQudGltZXImJmNsZWFyVGltZW91dChvLmRlZmF1bHQudGltZXIpLHQmJihvLmRlZmF1bHQudGltZXI9d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gci5vbkFjdGlvbihhLkNBTkNFTF9LRVkpfSx0KSl9LE89ZnVuY3Rpb24odCl7dC5jbG9zZU9uRXNjP2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImtleXVwIixwKTpkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCJrZXl1cCIscCksdC5kYW5nZXJNb2RlP3YoKTpnKCkseSgpLF8odC5jbG9zZU9uQ2xpY2tPdXRzaWRlKSxrKHQudGltZXIpfTtlLmRlZmF1bHQ9T30sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxyPW4oMyksaT1uKDM3KSxhPW4oMzgpLHM9e3RpdGxlOm51bGwsdGV4dDpudWxsLGljb246bnVsbCxidXR0b25zOnIuZGVmYXVsdEJ1dHRvbkxpc3QsY29udGVudDpudWxsLGNsYXNzTmFtZTpudWxsLGNsb3NlT25DbGlja091dHNpZGU6ITAsY2xvc2VPbkVzYzohMCxkYW5nZXJNb2RlOiExLHRpbWVyOm51bGx9LGM9T2JqZWN0LmFzc2lnbih7fSxzKTtlLnNldERlZmF1bHRzPWZ1bmN0aW9uKHQpe2M9T2JqZWN0LmFzc2lnbih7fSxzLHQpfTt2YXIgbD1mdW5jdGlvbih0KXt2YXIgZT10JiZ0LmJ1dHRvbixuPXQmJnQuYnV0dG9ucztyZXR1cm4gdm9pZCAwIT09ZSYmdm9pZCAwIT09biYmby50aHJvd0VycigiQ2Fubm90IHNldCBib3RoICdidXR0b24nIGFuZCAnYnV0dG9ucycgb3B0aW9ucyEiKSx2b2lkIDAhPT1lP3tjb25maXJtOmV9Om59LHU9ZnVuY3Rpb24odCl7cmV0dXJuIG8ub3JkaW5hbFN1ZmZpeE9mKHQrMSl9LGY9ZnVuY3Rpb24odCxlKXtvLnRocm93RXJyKHUoZSkrIiBhcmd1bWVudCAoJyIrdCsiJykgaXMgaW52YWxpZCIpfSxkPWZ1bmN0aW9uKHQsZSl7dmFyIG49dCsxLHI9ZVtuXTtvLmlzUGxhaW5PYmplY3Qocil8fHZvaWQgMD09PXJ8fG8udGhyb3dFcnIoIkV4cGVjdGVkICIrdShuKSsiIGFyZ3VtZW50ICgnIityKyInKSB0byBiZSBhIHBsYWluIG9iamVjdCIpfSxwPWZ1bmN0aW9uKHQsZSl7dmFyIG49dCsxLHI9ZVtuXTt2b2lkIDAhPT1yJiZvLnRocm93RXJyKCJVbmV4cGVjdGVkICIrdShuKSsiIGFyZ3VtZW50ICgiK3IrIikiKX0sbT1mdW5jdGlvbih0LGUsbixyKXt2YXIgaT10eXBlb2YgZSxhPSJzdHJpbmciPT09aSxzPWUgaW5zdGFuY2VvZiBFbGVtZW50O2lmKGEpe2lmKDA9PT1uKXJldHVybnt0ZXh0OmV9O2lmKDE9PT1uKXJldHVybnt0ZXh0OmUsdGl0bGU6clswXX07aWYoMj09PW4pcmV0dXJuIGQobixyKSx7aWNvbjplfTtmKGUsbil9ZWxzZXtpZihzJiYwPT09bilyZXR1cm4gZChuLHIpLHtjb250ZW50OmV9O2lmKG8uaXNQbGFpbk9iamVjdChlKSlyZXR1cm4gcChuLHIpLGU7ZihlLG4pfX07ZS5nZXRPcHRzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO3ZhciBuPXt9O3QuZm9yRWFjaChmdW5jdGlvbihlLG8pe3ZhciByPW0oMCxlLG8sdCk7T2JqZWN0LmFzc2lnbihuLHIpfSk7dmFyIG89bChuKTtuLmJ1dHRvbnM9ci5nZXRCdXR0b25MaXN0T3B0cyhvKSxkZWxldGUgbi5idXR0b24sbi5jb250ZW50PWkuZ2V0Q29udGVudE9wdHMobi5jb250ZW50KTt2YXIgdT1PYmplY3QuYXNzaWduKHt9LHMsYyxuKTtyZXR1cm4gT2JqZWN0LmtleXModSkuZm9yRWFjaChmdW5jdGlvbih0KXthLkRFUFJFQ0FURURfT1BUU1t0XSYmYS5sb2dEZXByZWNhdGlvbih0KX0pLHV9fSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLHI9e2VsZW1lbnQ6ImlucHV0IixhdHRyaWJ1dGVzOntwbGFjZWhvbGRlcjoiIn19O2UuZ2V0Q29udGVudE9wdHM9ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIG8uaXNQbGFpbk9iamVjdCh0KT9PYmplY3QuYXNzaWduKGUsdCk6dCBpbnN0YW5jZW9mIEVsZW1lbnQ/e2VsZW1lbnQ6dH06ImlucHV0Ij09PXQ/cjpudWxsfX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZS5sb2dEZXByZWNhdGlvbj1mdW5jdGlvbih0KXt2YXIgbj1lLkRFUFJFQ0FURURfT1BUU1t0XSxvPW4ub25seVJlbmFtZSxyPW4ucmVwbGFjZW1lbnQsaT1uLnN1Yk9wdGlvbixhPW4ubGluayxzPW8/InJlbmFtZWQiOiJkZXByZWNhdGVkIixjPSdTd2VldEFsZXJ0IHdhcm5pbmc6ICInK3QrJyIgb3B0aW9uIGhhcyBiZWVuICcrcysiLiI7aWYocil7Yys9IiBQbGVhc2UgdXNlIisoaT8nICInK2krJyIgaW4gJzoiICIpKyciJytyKyciIGluc3RlYWQuJ312YXIgbD0iaHR0cHM6Ly9zd2VldGFsZXJ0LmpzLm9yZyI7Yys9YT8iIE1vcmUgZGV0YWlsczogIitsK2E6IiBNb3JlIGRldGFpbHM6ICIrbCsiL2d1aWRlcy8jdXBncmFkaW5nLWZyb20tMXgiLGNvbnNvbGUud2FybihjKX0sZS5ERVBSRUNBVEVEX09QVFM9e3R5cGU6e3JlcGxhY2VtZW50OiJpY29uIixsaW5rOiIvZG9jcy8jaWNvbiJ9LGltYWdlVXJsOntyZXBsYWNlbWVudDoiaWNvbiIsbGluazoiL2RvY3MvI2ljb24ifSxjdXN0b21DbGFzczp7cmVwbGFjZW1lbnQ6ImNsYXNzTmFtZSIsb25seVJlbmFtZTohMCxsaW5rOiIvZG9jcy8jY2xhc3NuYW1lIn0saW1hZ2VTaXplOnt9LHNob3dDYW5jZWxCdXR0b246e3JlcGxhY2VtZW50OiJidXR0b25zIixsaW5rOiIvZG9jcy8jYnV0dG9ucyJ9LHNob3dDb25maXJtQnV0dG9uOntyZXBsYWNlbWVudDoiYnV0dG9uIixsaW5rOiIvZG9jcy8jYnV0dG9uIn0sY29uZmlybUJ1dHRvblRleHQ6e3JlcGxhY2VtZW50OiJidXR0b24iLGxpbms6Ii9kb2NzLyNidXR0b24ifSxjb25maXJtQnV0dG9uQ29sb3I6e30sY2FuY2VsQnV0dG9uVGV4dDp7cmVwbGFjZW1lbnQ6ImJ1dHRvbnMiLGxpbms6Ii9kb2NzLyNidXR0b25zIn0sY2xvc2VPbkNvbmZpcm06e3JlcGxhY2VtZW50OiJidXR0b24iLHN1Yk9wdGlvbjoiY2xvc2VNb2RhbCIsbGluazoiL2RvY3MvI2J1dHRvbiJ9LGNsb3NlT25DYW5jZWw6e3JlcGxhY2VtZW50OiJidXR0b25zIixzdWJPcHRpb246ImNsb3NlTW9kYWwiLGxpbms6Ii9kb2NzLyNidXR0b25zIn0sc2hvd0xvYWRlck9uQ29uZmlybTp7cmVwbGFjZW1lbnQ6ImJ1dHRvbnMifSxhbmltYXRpb246e30saW5wdXRUeXBlOntyZXBsYWNlbWVudDoiY29udGVudCIsbGluazoiL2RvY3MvI2NvbnRlbnQifSxpbnB1dFZhbHVlOntyZXBsYWNlbWVudDoiY29udGVudCIsbGluazoiL2RvY3MvI2NvbnRlbnQifSxpbnB1dFBsYWNlaG9sZGVyOntyZXBsYWNlbWVudDoiY29udGVudCIsbGluazoiL2RvY3MvI2NvbnRlbnQifSxodG1sOntyZXBsYWNlbWVudDoiY29udGVudCIsbGluazoiL2RvY3MvI2NvbnRlbnQifSxhbGxvd0VzY2FwZUtleTp7cmVwbGFjZW1lbnQ6ImNsb3NlT25Fc2MiLG9ubHlSZW5hbWU6ITAsbGluazoiL2RvY3MvI2Nsb3Nlb25lc2MifSxhbGxvd0NsaWNrT3V0c2lkZTp7cmVwbGFjZW1lbnQ6ImNsb3NlT25DbGlja091dHNpZGUiLG9ubHlSZW5hbWU6ITAsbGluazoiL2RvY3MvI2Nsb3Nlb25jbGlja291dHNpZGUifX19XSl9KTs="},{"meta":{"name":"clipboard.min.js","url":"https://lib.baomitu.com/clipboard.js/2.0.6/clipboard.min.js","ts":1662639210299,"mimetype":"text/javascript"},"source":""}]},{"name":"Picviewer CE+","options":{"check_for_updates":false,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["www.google.com","www.google.com.hk","www.google.co.jp","ipv4.google.com","image.baidu.com","www.tineye.com","*"],"orig_excludes":["http://www.toodledo.com/tasks/*","http*://maps.google.com*/*","*://www.google.*/_/chrome/newtab*","*://mega.*/*","*://*.mega.*/*"],"orig_includes":[],"orig_matches":["https://*.instagram.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1662639210326,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/24204-picviewer-ce/code/Picviewer%20CE+.user.js","uuid":"7ac3a591-d448-48ff-a36b-f01595ac48f6","source":"","requires":[{"meta":{"name":"FileSaver.min.js","url":"https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js","ts":1662639210311,"mimetype":"text/javascript"},"source":"KGZ1bmN0aW9uKGEsYil7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sYik7ZWxzZSBpZigidW5kZWZpbmVkIiE9dHlwZW9mIGV4cG9ydHMpYigpO2Vsc2V7YigpLGEuRmlsZVNhdmVyPXtleHBvcnRzOnt9fS5leHBvcnRzfX0pKHRoaXMsZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gYihhLGIpe3JldHVybiJ1bmRlZmluZWQiPT10eXBlb2YgYj9iPXthdXRvQm9tOiExfToib2JqZWN0IiE9dHlwZW9mIGImJihjb25zb2xlLndhcm4oIkRlcHJlY2F0ZWQ6IEV4cGVjdGVkIHRoaXJkIGFyZ3VtZW50IHRvIGJlIGEgb2JqZWN0IiksYj17YXV0b0JvbTohYn0pLGIuYXV0b0JvbSYmL15ccyooPzp0ZXh0XC9cUyp8YXBwbGljYXRpb25cL3htbHxcUypcL1xTKlwreG1sKVxzKjsuKmNoYXJzZXRccyo9XHMqdXRmLTgvaS50ZXN0KGEudHlwZSk/bmV3IEJsb2IoWyJcdUZFRkYiLGFdLHt0eXBlOmEudHlwZX0pOmF9ZnVuY3Rpb24gYyhhLGIsYyl7dmFyIGQ9bmV3IFhNTEh0dHBSZXF1ZXN0O2Qub3BlbigiR0VUIixhKSxkLnJlc3BvbnNlVHlwZT0iYmxvYiIsZC5vbmxvYWQ9ZnVuY3Rpb24oKXtnKGQucmVzcG9uc2UsYixjKX0sZC5vbmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcigiY291bGQgbm90IGRvd25sb2FkIGZpbGUiKX0sZC5zZW5kKCl9ZnVuY3Rpb24gZChhKXt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKCJIRUFEIixhLCExKTt0cnl7Yi5zZW5kKCl9Y2F0Y2goYSl7fXJldHVybiAyMDA8PWIuc3RhdHVzJiYyOTk+PWIuc3RhdHVzfWZ1bmN0aW9uIGUoYSl7dHJ5e2EuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudCgiY2xpY2siKSl9Y2F0Y2goYyl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoIk1vdXNlRXZlbnRzIik7Yi5pbml0TW91c2VFdmVudCgiY2xpY2siLCEwLCEwLHdpbmRvdywwLDAsMCw4MCwyMCwhMSwhMSwhMSwhMSwwLG51bGwpLGEuZGlzcGF0Y2hFdmVudChiKX19dmFyIGY9Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy53aW5kb3c9PT13aW5kb3c/d2luZG93OiJvYmplY3QiPT10eXBlb2Ygc2VsZiYmc2VsZi5zZWxmPT09c2VsZj9zZWxmOiJvYmplY3QiPT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwuZ2xvYmFsPT09Z2xvYmFsP2dsb2JhbDp2b2lkIDAsYT1mLm5hdmlnYXRvciYmL01hY2ludG9zaC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmL0FwcGxlV2ViS2l0Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYhL1NhZmFyaS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxnPWYuc2F2ZUFzfHwoIm9iamVjdCIhPXR5cGVvZiB3aW5kb3d8fHdpbmRvdyE9PWY/ZnVuY3Rpb24oKXt9OiJkb3dubG9hZCJpbiBIVE1MQW5jaG9yRWxlbWVudC5wcm90b3R5cGUmJiFhP2Z1bmN0aW9uKGIsZyxoKXt2YXIgaT1mLlVSTHx8Zi53ZWJraXRVUkwsaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7Zz1nfHxiLm5hbWV8fCJkb3dubG9hZCIsai5kb3dubG9hZD1nLGoucmVsPSJub29wZW5lciIsInN0cmluZyI9PXR5cGVvZiBiPyhqLmhyZWY9YixqLm9yaWdpbj09PWxvY2F0aW9uLm9yaWdpbj9lKGopOmQoai5ocmVmKT9jKGIsZyxoKTplKGosai50YXJnZXQ9Il9ibGFuayIpKTooai5ocmVmPWkuY3JlYXRlT2JqZWN0VVJMKGIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnJldm9rZU9iamVjdFVSTChqLmhyZWYpfSw0RTQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGopfSwwKSl9OiJtc1NhdmVPck9wZW5CbG9iImluIG5hdmlnYXRvcj9mdW5jdGlvbihmLGcsaCl7aWYoZz1nfHxmLm5hbWV8fCJkb3dubG9hZCIsInN0cmluZyIhPXR5cGVvZiBmKW5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGIoZixoKSxnKTtlbHNlIGlmKGQoZikpYyhmLGcsaCk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7aS5ocmVmPWYsaS50YXJnZXQ9Il9ibGFuayIsc2V0VGltZW91dChmdW5jdGlvbigpe2UoaSl9KX19OmZ1bmN0aW9uKGIsZCxlLGcpe2lmKGc9Z3x8b3BlbigiIiwiX2JsYW5rIiksZyYmKGcuZG9jdW1lbnQudGl0bGU9Zy5kb2N1bWVudC5ib2R5LmlubmVyVGV4dD0iZG93bmxvYWRpbmcuLi4iKSwic3RyaW5nIj09dHlwZW9mIGIpcmV0dXJuIGMoYixkLGUpO3ZhciBoPSJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0iPT09Yi50eXBlLGk9L2NvbnN0cnVjdG9yL2kudGVzdChmLkhUTUxFbGVtZW50KXx8Zi5zYWZhcmksaj0vQ3JpT1NcL1tcZF0rLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO2lmKChqfHxoJiZpfHxhKSYmInVuZGVmaW5lZCIhPXR5cGVvZiBGaWxlUmVhZGVyKXt2YXIgaz1uZXcgRmlsZVJlYWRlcjtrLm9ubG9hZGVuZD1mdW5jdGlvbigpe3ZhciBhPWsucmVzdWx0O2E9aj9hOmEucmVwbGFjZSgvXmRhdGE6W147XSo7LywiZGF0YTphdHRhY2htZW50L2ZpbGU7IiksZz9nLmxvY2F0aW9uLmhyZWY9YTpsb2NhdGlvbj1hLGc9bnVsbH0say5yZWFkQXNEYXRhVVJMKGIpfWVsc2V7dmFyIGw9Zi5VUkx8fGYud2Via2l0VVJMLG09bC5jcmVhdGVPYmplY3RVUkwoYik7Zz9nLmxvY2F0aW9uPW06bG9jYXRpb24uaHJlZj1tLGc9bnVsbCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5yZXZva2VPYmplY3RVUkwobSl9LDRFNCl9fSk7Zi5zYXZlQXM9Zy5zYXZlQXM9ZywidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZSYmKG1vZHVsZS5leHBvcnRzPWcpfSk7CgovLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlU2F2ZXIubWluLmpzLm1hcA=="},{"meta":{"name":"jszip.min.js","url":"https://cdn.jsdelivr.net/npm/jszip@3.7.1/dist/jszip.min.js","ts":1662639210314,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"GM_config%20CN.js","url":"https://greasyfork.org/scripts/6158-gm-config-cn/code/GM_config%20CN.js?version=23710","ts":1662639210315,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"pvcep_rules.js","url":"https://greasyfork.org/scripts/438080-pvcep-rules/code/pvcep_rules.js?version=1040560","ts":1662639210316,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"pvcep_lang.js","url":"https://greasyfork.org/scripts/440698-pvcep-lang/code/pvcep_lang.js?version=1039136","ts":1662639210318,"mimetype":"text/javascript"},"source":""}]},{"name":"ÈòøÈáå‰∫ëÁõò","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["aliyundrive.com","alicloudccp.com","aliyuncs.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.aliyundrive.com/s/*","https://www.aliyundrive.com/drive*"],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1662639210332,"data":{}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/425955-%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/code/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98.user.js","uuid":"ca45f834-0a7d-4c72-98aa-aee1903142a1","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.staticfile.org/jquery/3.6.0/jquery.min.js","ts":1662639210329,"mimetype":"text/javascript"},"source":""}]},{"name":"Bilibili Evolved","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["raw.githubusercontent.com","github.com","cn.bing.com","www.bing.com","translate.google.cn","translate.google.com","localhost","*"],"orig_excludes":["*://api.bilibili.com/*","*://api.*.bilibili.com/*","*://*.bilibili.com/api/*","*://member.bilibili.com/studio/bs-editor/*","*://t.bilibili.com/h5/dynamic/specification","*://bbq.bilibili.com/*","*://message.bilibili.com/pages/nav/header_sync","*://s1.hdslb.com/bfs/seed/jinkela/short/cols/iframe.html","*://open-live.bilibili.com/*"],"orig_includes":[],"orig_matches":["*://*.bilibili.com/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"tab_types":null,"unwrap":null},"storage":{"ts":1662646738604,"data":{"components":"o{\"settingsPanel\": {\"enabled\": true,\"options\": {\"themeColor\": \"#00A0D8\",\"scriptLoadingMode\": \"ÂêåÊó∂\",\"styleLoadingMode\": \"ÂêåÊó∂\",\"textColor\": \"Ëá™Âä®\",\"cdnRoot\": \"GitHub\",\"dockSide\": \"Âè≥‰æß\",\"filenameFormat\": \"[title][ - ep]\",\"batchFilenameFormat\": \"[n - ][ep]\",\"downloadPackageEmitMode\": \"ÊâìÂåÖ‰∏ãËΩΩ\",\"devMode\": false}},\"launchBar\": {\"enabled\": true,\"options\": {}},\"i18n\": {\"enabled\": true,\"options\": {\"language\": \"ÁÆÄ‰Ωì‰∏≠Êñá\",\"translator\": \"GoogleCN\"}},\"autoUpdate\": {\"enabled\": true,\"options\": {\"lastUpdateCheck\": 1662640224521,\"lastInstalledVersion\": \"2.4.0\",\"localPortOverride\": \"\",\"minimumDuration\": 86400000,\"urls\": {\"components\": {\"downloadVideo\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/video/download.js\",\"lastUpdateCheck\": 1662640222712,\"installTime\": 1662639254844,\"alwaysUpdate\": false},\"downloadDanmaku\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/video/danmaku/download.js\",\"lastUpdateCheck\": 1662640222760,\"installTime\": 1662639255438,\"alwaysUpdate\": false},\"downloadLiveRecords\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/live/download-records.js\",\"lastUpdateCheck\": 1662640224044,\"installTime\": 1662639255523,\"alwaysUpdate\": false},\"downloadSubtitle\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/video/subtitle/download.js\",\"lastUpdateCheck\": 1662640222469,\"installTime\": 1662639255538,\"alwaysUpdate\": false},\"downloadAudio\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/utils/download-audio.js\",\"lastUpdateCheck\": 1662640222575,\"installTime\": 1662639255550,\"alwaysUpdate\": false},\"alwaysShowDuration\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/style/always-show-duration.js\",\"lastUpdateCheck\": 1662640222514,\"installTime\": 1662639302754,\"alwaysUpdate\": false},\"simplifyLiveroom\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/style/simplify/live.js\",\"lastUpdateCheck\": 1662640222818,\"installTime\": 1662639353344,\"alwaysUpdate\": false},\"keymap\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/utils/keymap.js\",\"lastUpdateCheck\": 1662640222854,\"installTime\": 1662639382111,\"alwaysUpdate\": false},\"bvidConvert\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/video/bvid-convert.js\",\"lastUpdateCheck\": 1662640222940,\"installTime\": 1662639414729,\"alwaysUpdate\": false},\"extendVideoSpeed\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/video/player/extend-speed.js\",\"lastUpdateCheck\": 1662640222192,\"installTime\": 1662639464625,\"alwaysUpdate\": false},\"removePlayerPopup\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/video/player/remove-popup.js\",\"lastUpdateCheck\": 1662640222543,\"installTime\": 1662639489920,\"alwaysUpdate\": false},\"seekByFrames\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/video/player/seek-by-frames.js\",\"lastUpdateCheck\": 1662640222370,\"installTime\": 1662639494567,\"alwaysUpdate\": false},\"elegantScrollbar\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/components/style/scrollbar.js\",\"lastUpdateCheck\": 1662640222924,\"installTime\": 1662639559297,\"alwaysUpdate\": false}},\"plugins\": {\"speed.keymap\": {\"url\": \"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/registry/dist/plugins/video/player/speed.js\",\"lastUpdateCheck\": 1662640224520,\"installTime\": 1662639520786,\"alwaysUpdate\": false}},\"styles\": {}},\"maxUpdateCount\": 4}},\"notifyNewVersion\": {\"enabled\": true,\"options\": {\"lastUpdateCheck\": 1662639228945,\"minimumDuration\": 86400000}}}","plugins":"o{\"ajaxHook\": true,\"launchBar.actions.IDSearch\": true}","userComponents":"o{\"downloadVideo\": {\"code\": \"!function(e,t){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=t():\\\"function\\\"==typeof define&&define.amd?define([],t):\\\"object\\\"==typeof exports?exports[\\\"video/download\\\"]=t():e[\\\"video/download\\\"]=t()}(self,(function(){return function(){var e={828:function(e,t,n){var i=n(645)((function(e){return e[1]}));i.push([e.id,\\\".download-video-panel {\\\\n  background-color: #fff;\\\\n  color: black;\\\\n  border-radius: 8px;\\\\n  border: 1px solid rgba(136, 136, 136, 0.1333333333);\\\\n  box-sizing: border-box;\\\\n  box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.05);\\\\n  font-size: 12px;\\\\n  padding: 6px;\\\\n  top: 100px;\\\\n  left: 50%;\\\\n  transform: translateX(-50%) scale(0.95);\\\\n  transition: 0.2s ease-out;\\\\n  z-index: 1000;\\\\n  width: 320px;\\\\n  height: calc(100vh - 200px);\\\\n  display: flex;\\\\n  flex-direction: column;\\\\n}\\\\nbody.dark .download-video-panel {\\\\n  box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.2);\\\\n}\\\\nbody.dark .download-video-panel {\\\\n  background-color: #282828;\\\\n  color: #eee;\\\\n}\\\\n.download-video-panel.open {\\\\n  transform: translateX(-50%);\\\\n}\\\\n.download-video-panel .be-textbox,\\\\n.download-video-panel .be-textarea {\\\\n  flex-grow: 1;\\\\n}\\\\n.download-video-panel-header {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n  border-bottom: 1px solid rgba(136, 136, 136, 0.1333333333);\\\\n  padding: 6px 0;\\\\n  margin: 0 6px;\\\\n}\\\\n.download-video-panel-header .title {\\\\n  font-size: 16px;\\\\n  font-weight: bold;\\\\n  flex-grow: 1;\\\\n  margin: 0 8px;\\\\n}\\\\n.download-video-panel-header .be-button {\\\\n  padding: 4px;\\\\n}\\\\n.download-video-panel-content {\\\\n  overflow: auto;\\\\n  scrollbar-width: none !important;\\\\n  overscroll-behavior: contain;\\\\n  display: flex;\\\\n  align-items: stretch;\\\\n  flex-direction: column;\\\\n  gap: 0;\\\\n  flex: 1 0 0;\\\\n  padding: 12px 6px;\\\\n  align-items: flex-start;\\\\n}\\\\n.download-video-panel-content::-webkit-scrollbar {\\\\n  height: 0 !important;\\\\n  width: 0 !important;\\\\n}\\\\n.download-video-panel-content > :not(:first-child) {\\\\n  margin-top: 12px;\\\\n}\\\\n.download-video-panel .download-video-config-item {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n}\\\\n.download-video-panel .download-video-config-item .download-video-config-title {\\\\n  margin-right: 8px;\\\\n}\\\\n.download-video-panel .download-video-config-item.error {\\\\n  color: #E57373;\\\\n}\\\\n.download-video-panel .download-video-config-section {\\\\n  align-self: stretch;\\\\n}\\\\n.download-video-panel .download-video-config-description {\\\\n  opacity: 0.5;\\\\n  margin-top: 4px;\\\\n}\\\\n.download-video-panel-footer {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n  border-top: 1px solid rgba(136, 136, 136, 0.1333333333);\\\\n  padding: 6px 0;\\\\n  margin: 0 6px;\\\\n  justify-content: center;\\\\n}\\\\n.download-video-panel .run-download {\\\\n  font-size: 13px;\\\\n  padding: 6px 12px;\\\\n}\\\",\\\"\\\"]),e.exports=i},635:function(e,t,n){var i=n(645)((function(e){return e[1]}));i.push([e.id,\\\".episodes-picker-header {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n}\\\\n.episodes-picker-checked-ratio {\\\\n  flex-grow: 1;\\\\n  margin-left: 4px;\\\\n}\\\\n.episodes-picker-actions {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n}\\\\n.episodes-picker-actions .be-button {\\\\n  padding: 4px;\\\\n}\\\\n.episodes-picker-actions .be-button.invert-selection .be-icon {\\\\n  font-size: 14px;\\\\n}\\\\n.episodes-picker-actions .be-button.select-all .be-icon, .episodes-picker-actions .be-button.deselect-all .be-icon {\\\\n  transform: translateY(1px);\\\\n}\\\\n.episodes-picker-items {\\\\n  max-height: 400px;\\\\n  overflow: auto;\\\\n}\\\\n.episodes-picker-items:not(:empty) {\\\\n  margin-top: 4px;\\\\n  border: 1px solid rgba(136, 136, 136, 0.2666666667);\\\\n  border-radius: 6px;\\\\n}\\\\n.episodes-picker-items .be-check-box {\\\\n  padding: 2px 6px;\\\\n}\\\\n.episodes-picker-items .episode-duration {\\\\n  margin-right: 4px;\\\\n  text-align: right;\\\\n  flex: 1 1 0;\\\\n  opacity: 0.5;\\\\n}\\\",\\\"\\\"]),e.exports=i},307:function(e,t,n){var i=n(645)((function(e){return e[1]}));i.push([e.id,\\\".single-video-info.download-video-config-section {\\\\n  position: relative;\\\\n  height: 125px;\\\\n  display: flex;\\\\n  align-items: center;\\\\n  justify-content: center;\\\\n}\\\\n.single-video-info.download-video-config-section img {\\\\n  height: 125px;\\\\n  -o-object-fit: contain;\\\\n     object-fit: contain;\\\\n  border-radius: 8px;\\\\n}\\\\n.single-video-info.download-video-config-section img.shadow {\\\\n  position: absolute;\\\\n  filter: blur(8px) brightness(0.8);\\\\n  transform: scaleY(0.95) translateY(4px);\\\\n  z-index: -1;\\\\n  opacity: 0.3;\\\\n}\\\",\\\"\\\"]),e.exports=i},645:function(e){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\ne.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?\\\"@media \\\".concat(t[2],\\\" {\\\").concat(n,\\\"}\\\"):n})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\nt.i=function(e,n,i){\\\"string\\\"==typeof e&&(\\n// eslint-disable-next-line no-param-reassign\\ne=[[null,e,\\\"\\\"]]);var o={};if(i)for(var s=0;s<this.length;s++){\\n// eslint-disable-next-line prefer-destructuring\\nvar a=this[s][0];null!=a&&(o[a]=!0)}for(var d=0;d<e.length;d++){var r=[].concat(e[d]);i&&o[r[0]]||(n&&(r[2]?r[2]=\\\"\\\".concat(n,\\\" and \\\").concat(r[2]):r[2]=n),t.push(r))}},t}},379:function(e,t,n){\\\"use strict\\\";var i,o=function(){return void 0===i&&(\\n// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\\n// @see https://github.com/webpack-contrib/style-loader/issues/177\\ni=Boolean(window&&document&&document.all&&!window.atob)),i},s=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function d(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function r(e,t){for(var n={},i=[],o=0;o<e.length;o++){var s=e[o],r=t.base?s[0]+t.base:s[0],l=n[r]||0,c=\\\"\\\".concat(r,\\\" \\\").concat(l);n[r]=l+1;var u=d(c),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(a[u].references++,a[u].updater(p)):a.push({identifier:c,updater:m(p,t),references:1}),i.push(c)}return i}function l(e){var t=document.createElement(\\\"style\\\"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),\\\"function\\\"==typeof e.insert)e.insert(t);else{var a=s(e.insert||\\\"head\\\");if(!a)throw new Error(\\\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\\\");a.appendChild(t)}return t}var c,u=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join(\\\"\\\\n\\\")});function p(e,t,n,i){var o=n?\\\"\\\":i.media?\\\"@media \\\".concat(i.media,\\\" {\\\").concat(i.css,\\\"}\\\"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var s=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(s,a[t]):e.appendChild(s)}}function f(e,t,n){var i=n.css,o=n.media,s=n.sourceMap;if(o?e.setAttribute(\\\"media\\\",o):e.removeAttribute(\\\"media\\\"),s&&\\\"undefined\\\"!=typeof btoa&&(i+=\\\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s)))),\\\" */\\\")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var h=null,v=0;function m(e,t){var n,i,o;if(t.singleton){var s=v++;n=h||(h=l(t)),i=p.bind(null,n,s,!1),o=p.bind(null,n,s,!0)}else n=l(t),i=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||\\\"boolean\\\"==typeof t.singleton||(t.singleton=o());var n=r(e=e||[],t);return function(e){if(e=e||[],\\\"[object Array]\\\"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=d(n[i]);a[o].references--}for(var s=r(e,t),l=0;l<n.length;l++){var c=d(n[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=s}}}},605:function(e,t,n){\\\"use strict\\\";n.r(t),n.d(t,{default:function(){return ae}});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\\\"VPopup\\\",{staticClass:\\\"download-video-panel\\\",attrs:{fixed:\\\"\\\",\\\"trigger-element\\\":e.triggerElement},model:{value:e.open,callback:function(t){e.open=t},expression:\\\"open\\\"}},[n(\\\"div\\\",{staticClass:\\\"download-video-panel-header\\\"},[n(\\\"VIcon\\\",{attrs:{icon:\\\"mdi-download\\\"}}),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"title\\\"},[e._v(\\\"\\\\n      ‰∏ãËΩΩËßÜÈ¢ë\\\\n    \\\")]),e._v(\\\" \\\"),n(\\\"VButton\\\",{attrs:{type:\\\"transparent\\\",title:\\\"ÂÖ≥Èó≠\\\"},on:{click:function(t){e.open=!1}}},[n(\\\"VIcon\\\",{attrs:{icon:\\\"mdi-close\\\",size:20}})],1)],1),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"download-video-panel-content\\\"},[e.selectedInput?n(\\\"div\\\",{staticClass:\\\"download-video-config-item\\\"},[n(\\\"div\\\",{staticClass:\\\"download-video-config-title\\\"},[e._v(\\\"\\\\n        ËæìÂÖ•Ê∫ê:\\\\n      \\\")]),e._v(\\\" \\\"),n(\\\"VDropdown\\\",{attrs:{items:e.inputs},model:{value:e.selectedInput,callback:function(t){e.selectedInput=t},expression:\\\"selectedInput\\\"}})],1):e._e(),e._v(\\\" \\\"),0===e.inputs.length?n(\\\"div\\\",{staticClass:\\\"download-video-config-item error\\\"},[e._v(\\\"\\\\n      Ê≤°ÊúâÂåπÈÖçÁöÑËæìÂÖ•Ê∫ê, ËØ∑Á°Æ‰øùÂÆâË£Ö‰∫ÜÈÄÇÂêàÊ≠§È°µÈù¢ÁöÑÊèí‰ª∂.\\\\n    \\\")]):e._e(),e._v(\\\" \\\"),e.selectedInput&&e.selectedInput.component?n(e.selectedInput.component,{ref:\\\"inputOptions\\\",tag:\\\"component\\\"}):e._e(),e._v(\\\" \\\"),e.selectedApi?n(\\\"div\\\",{staticClass:\\\"download-video-config-item\\\"},[n(\\\"div\\\",{staticClass:\\\"download-video-config-title\\\"},[e._v(\\\"\\\\n        Ê†ºÂºè:\\\\n      \\\")]),e._v(\\\" \\\"),n(\\\"VDropdown\\\",{attrs:{items:e.apis},model:{value:e.selectedApi,callback:function(t){e.selectedApi=t},expression:\\\"selectedApi\\\"}})],1):e._e(),e._v(\\\" \\\"),e.selectedApi&&e.selectedApi.description?n(\\\"div\\\",{staticClass:\\\"download-video-config-description\\\",domProps:{innerHTML:e._s(e.selectedApi.description)}}):e._e(),e._v(\\\" \\\"),e.selectedQuality?n(\\\"div\\\",{staticClass:\\\"download-video-config-item\\\"},[n(\\\"div\\\",{staticClass:\\\"download-video-config-title\\\"},[e._v(\\\"\\\\n        Ê∏ÖÊô∞Â∫¶:\\\\n      \\\")]),e._v(\\\" \\\"),n(\\\"VDropdown\\\",{attrs:{items:e.filteredQualities},on:{change:function(t){return e.saveSelectedQuality()}},model:{value:e.selectedQuality,callback:function(t){e.selectedQuality=t},expression:\\\"selectedQuality\\\"}})],1):e._e(),e._v(\\\" \\\"),!e.testData.multiple&&e.selectedQuality?[e.testData.videoInfo?n(\\\"div\\\",{staticClass:\\\"download-video-config-description\\\"},[e._v(\\\"\\\\n        È¢ÑËÆ°Â§ßÂ∞è: \\\"+e._s(e.formatFileSize(e.testData.videoInfo.totalSize))+\\\"\\\\n      \\\")]):e._e(),e._v(\\\" \\\"),null===e.testData.videoInfo?n(\\\"div\\\",{staticClass:\\\"download-video-config-description\\\"},[e._v(\\\"\\\\n        Ê≠£Âú®ËÆ°ÁÆóÂ§ßÂ∞è\\\\n      \\\")]):e._e()]:e._e(),e._v(\\\" \\\"),e._l(e.assetsWithOptions,(function(e){return n(e.component,{key:e.name,ref:\\\"assetsOptions\\\",refInFor:!0,tag:\\\"component\\\",attrs:{name:e.name}})})),e._v(\\\" \\\"),e.selectedOutput?n(\\\"div\\\",{staticClass:\\\"download-video-config-item\\\"},[n(\\\"div\\\",{staticClass:\\\"download-video-config-title\\\"},[e._v(\\\"\\\\n        ËæìÂá∫ÊñπÂºè:\\\\n      \\\")]),e._v(\\\" \\\"),n(\\\"VDropdown\\\",{attrs:{items:e.outputs},model:{value:e.selectedOutput,callback:function(t){e.selectedOutput=t},expression:\\\"selectedOutput\\\"}})],1):e._e(),e._v(\\\" \\\"),e.selectedOutput&&e.selectedOutput.description?n(\\\"div\\\",{staticClass:\\\"download-video-config-description\\\"},[e._v(\\\"\\\\n      \\\"+e._s(e.selectedOutput.description)+\\\"\\\\n    \\\")]):e._e(),e._v(\\\" \\\"),e.selectedOutput&&e.selectedOutput.component?n(e.selectedOutput.component,{ref:\\\"outputOptions\\\",tag:\\\"component\\\"}):e._e()],2),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"download-video-panel-footer\\\"},[n(\\\"VButton\\\",{staticClass:\\\"run-download\\\",attrs:{type:\\\"primary\\\",disabled:!e.canStartDownload},on:{click:function(t){return e.startDownload(e.$refs.outputOptions,e.selectedOutput)}}},[e._v(\\\"\\\\n      ÂºÄÂßã\\\\n    \\\")])],1)])};i._withStripped=!0;var o=coreApis.settings,s=coreApis.utils,a=n(414),d=coreApis.utils.formatters,r=coreApis.ui,l=coreApis.pluginApis.data,c=coreApis.componentApis.video.videoQuality,u=coreApis.toast,p=coreApis.utils.title,f=coreApis.ajax,h=coreApis.utils.urls,v=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\\\"div\\\",{staticClass:\\\"episodes-picker download-video-config-section\\\"},[n(\\\"div\\\",{staticClass:\\\"episodes-picker-header\\\"},[n(\\\"div\\\",{staticClass:\\\"episodes-picker-title\\\"},[e._v(\\\"\\\\n      ÈÄâÈõÜ:\\\\n    \\\")]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"episodes-picker-checked-ratio\\\"},[e._v(\\\"\\\\n      \\\"+e._s(e.checkedRatio)+\\\"\\\\n    \\\")]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"episodes-picker-actions\\\"},[n(\\\"VButton\\\",{staticClass:\\\"select-all\\\",attrs:{title:\\\"ÂÖ®ÈÄâ\\\",type:\\\"transparent\\\"},on:{click:function(t){e.forEachItem((function(e){return e.isChecked=!0}))}}},[n(\\\"VIcon\\\",{attrs:{size:16,icon:\\\"mdi-checkbox-multiple-marked-circle\\\"}})],1),e._v(\\\" \\\"),n(\\\"VButton\\\",{staticClass:\\\"deselect-all\\\",attrs:{title:\\\"ÂÖ®‰∏çÈÄâ\\\",type:\\\"transparent\\\"},on:{click:function(t){e.forEachItem((function(e){return e.isChecked=!1}))}}},[n(\\\"VIcon\\\",{attrs:{size:16,icon:\\\"mdi-checkbox-multiple-blank-circle-outline\\\"}})],1),e._v(\\\" \\\"),n(\\\"VButton\\\",{staticClass:\\\"invert-selection\\\",attrs:{title:\\\"ÂèçÈÄâ\\\",type:\\\"transparent\\\"},on:{click:function(t){e.forEachItem((function(e){return e.isChecked=!e.isChecked}))}}},[n(\\\"VIcon\\\",{attrs:{size:16,icon:\\\"mdi-circle-slice-4\\\"}})],1)],1)]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"episodes-picker-items\\\"},e._l(e.episodeItems,(function(t,i){return n(\\\"div\\\",{key:t.key,staticClass:\\\"episodes-picker-item\\\"},[n(\\\"CheckBox\\\",{attrs:{\\\"icon-position\\\":\\\"left\\\",\\\"data-aid\\\":t.inputItem.aid,\\\"data-cid\\\":t.inputItem.cid,\\\"data-bvid\\\":t.inputItem.bvid},nativeOn:{click:function(n){return e.shiftSelect(n,t,i)}},model:{value:t.isChecked,callback:function(n){e.$set(t,\\\"isChecked\\\",n)},expression:\\\"item.isChecked\\\"}},[n(\\\"span\\\",{staticClass:\\\"episode-title\\\"},[e._v(\\\"\\\\n          \\\"+e._s(t.title)+\\\"\\\\n        \\\")]),e._v(\\\" \\\"),t.durationText?n(\\\"span\\\",{staticClass:\\\"episode-duration\\\"},[e._v(\\\"\\\\n          \\\"+e._s(t.durationText)+\\\"\\\\n        \\\")]):e._e()])],1)})),0)])};v._withStripped=!0;var m=Vue.extend({components:{VButton:r.VButton,VIcon:r.VIcon,CheckBox:r.CheckBox},props:{api:{type:Function,required:!0}},data:()=>({episodeItems:[],maxCheckedItems:32,lastCheckedEpisodeIndex:-1}),computed:{checkedRatio(){return`(${this.episodeItems.filter((e=>e.isChecked)).length}/${this.episodeItems.length})`},inputItems(){return this.episodeItems.map((e=>e.inputItem))},checkedInputItems(){return this.episodeItems.filter((e=>e.isChecked)).map((e=>e.inputItem))}},created(){this.getEpisodeItems()},methods:{shiftSelect(e,t,n){e.shiftKey&&-1!==this.lastCheckedEpisodeIndex?e.shiftKey&&-1!==this.lastCheckedEpisodeIndex&&(this.episodeItems.slice(Math.min(this.lastCheckedEpisodeIndex,n)+1,Math.max(this.lastCheckedEpisodeIndex,n)).forEach((e=>{e.isChecked=!e.isChecked})),this.lastCheckedEpisodeIndex=n,e.preventDefault()):this.lastCheckedEpisodeIndex=n},forEachItem(e){this.episodeItems.forEach(e)},async getEpisodeItems(){this.episodeItems.length>0||(this.episodeItems=await this.api(this))}}}),g=n(379),w=n.n(g),b=n(635),y=n.n(b),x={insert:\\\"head\\\",singleton:!1},_=(w()(y(),x),y().locals,n(900)),I=(0,_.Z)(m,v,[],!1,null,null,null);I.options.__file=\\\"registry/lib/components/video/download/inputs/EpisodesPicker.vue\\\";var k=I.exports;const C=e=>Vue.extend({computed:{checkedInputItems(){return this.$refs.picker.checkedInputItems}},render:t=>t(k,{props:{api:e},ref:\\\"picker\\\"})}),A={name:\\\"bangumi.batch\\\",displayName:\\\"ÂΩìÂâçÁï™Ââß (Â§öP)\\\",match:h.bangumiUrls,batch:!0,getInputs:async e=>(null==e?void 0:e.checkedInputItems)??[],component:async()=>C((async e=>{var t,n;const i=document.querySelector(\\\"meta[property='og:url']\\\");if(null===i)return(0,a.logError)(\\\"Ëé∑ÂèñÁï™ÂâßÊï∞ÊçÆÂ§±Ë¥•: Êó†Ê≥ïÊâæÂà∞ Season ID\\\"),[];const s=null===(t=i.getAttribute(\\\"content\\\"))||void 0===t||null===(n=t.match(/play\\\\/ss(\\\\d+)/))||void 0===n?void 0:n[1];if(void 0===s)return(0,a.logError)(\\\"Ëé∑ÂèñÁï™ÂâßÊï∞ÊçÆÂ§±Ë¥•: Êó†Ê≥ïËß£Êûê Season ID\\\"),[];const r=await(0,f.getJson)(`https://api.bilibili.com/pgc/web/season/section?season_id=${s}`);if(0!==r.code)return(0,a.logError)(`Ëé∑ÂèñÁï™ÂâßÊï∞ÊçÆÂ§±Ë¥•: Êó†Ê≥ïËé∑ÂèñÁï™ÂâßÈõÜÊï∞ÂàóË°®, message=${r.message}`),[];const l=r.result.main_section.episodes;return l.map(((t,n)=>{const i=t.long_title?t.title:(n+1).toString(),s=t.long_title?t.long_title:t.title;return{key:t.cid,title:`${i} - ${s}`,isChecked:n<e.maxCheckedItems,inputItem:{aid:t.aid,cid:t.cid,title:(0,p.formatTitle)((0,o.getGeneralSettings)().batchFilenameFormat,!1,{ep:s,cid:t.cid,aid:t.aid,n:(0,d.formatNumber)(parseFloat(i),l.length)??i}),allowQualityDrop:!0}}}))}))},V={name:\\\"video.batch\\\",displayName:\\\"ÂΩìÂâçËßÜÈ¢ë (Â§öP)\\\",match:h.videoUrls,batch:!0,getInputs:async e=>(null==e?void 0:e.checkedInputItems)??[],component:async()=>C((async e=>{const{aid:t}=unsafeWindow,n=`https://api.bilibili.com/x/web-interface/view?aid=${t}`,i=await(0,f.getJsonWithCredentials)(n);if(0!==i.code)return(0,a.logError)(`Ëé∑ÂèñËßÜÈ¢ëÈÄâÈõÜÂàóË°®Â§±Ë¥•, message = ${i.message}`),[];const{pages:s}=i.data;return void 0===s?((0,a.logError)(\\\"Ëé∑ÂèñËßÜÈ¢ëÈÄâÈõÜÂàóË°®Â§±Ë¥•, Ê≤°ÊúâÊâæÂà∞ÈÄâÈõÜ‰ø°ÊÅØ.\\\"),[]):s.map(((n,i)=>({key:n.cid,title:`P${n.page} ${n.part}`,isChecked:i<e.maxCheckedItems,durationText:(0,d.formatDuration)(n.duration),inputItem:{allowQualityDrop:!0,title:(0,p.formatTitle)((0,o.getGeneralSettings)().batchFilenameFormat,!1,{cid:n.cid,n:(0,d.formatNumber)(n.page,s.length),ep:n.part}),cid:n.cid,aid:t}})))}))},D={name:\\\"video\\\",displayName:\\\"ÂΩìÂâçËßÜÈ¢ë\\\",match:h.videoUrls,getInputs:async()=>[{aid:unsafeWindow.aid,cid:unsafeWindow.cid,title:(0,p.getFriendlyTitle)(!0)}],component:()=>Promise.resolve().then(n.bind(n,573)).then((e=>e.default))};var E=coreApis.utils.sort;const S=(e,t)=>{e.quality&&t.currentQuality.value!==e.quality.value&&(e.allowQualityDrop?console.warn(`'${e.title}' ‰∏çÊîØÊåÅÈÄâÊã©ÁöÑÊ∏ÖÊô∞Â∫¶${e.quality.displayName}, Â∑≤ÈôçÁ∫ß‰∏∫${t.currentQuality.displayName}`):(e=>{if(c.vipRequiredQualities.find((t=>t.value===e)))throw new Error(\\\"ÊÇ®ÈÄâÊã©ÁöÑÊ∏ÖÊô∞Â∫¶ÈúÄË¶ÅÂ§ß‰ºöÂëò, ËØ∑Êõ¥ÊîπÊ∏ÖÊô∞Â∫¶ÂêéÈáçËØï.\\\");if(c.loginRequiredQualities.find((t=>t.value===e)))throw new Error(\\\"ÊÇ®ÈÄâÊã©ÁöÑÊ∏ÖÊô∞Â∫¶ÈúÄË¶ÅÂÖàÁôªÂΩï.\\\");throw new Error(\\\"Ëé∑Âèñ‰∏ãËΩΩÈìæÊé•Â§±Ë¥•, ËØ∑Â∞ùËØïÊõ¥Êç¢Ê∏ÖÊô∞Â∫¶ÊàñÊõ¥Êç¢Ê†ºÂºè.\\\")})(e.quality.value))};var $=coreApis.download;function O(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class q{constructor(e){O(this,\\\"input\\\",void 0),O(this,\\\"fragments\\\",void 0),O(this,\\\"qualities\\\",void 0),O(this,\\\"currentQuality\\\",void 0),O(this,\\\"jsonData\\\",void 0),Object.assign(this,e)}get totalSize(){return lodash.sumBy(this.fragments,(e=>e.size))}get totalLength(){return lodash.sumBy(this.fragments,(e=>e.length))}get titledFragments(){return this.fragments.map(((e,t)=>{const n=this.fragments.filter((t=>t.extension===e.extension)).length>1?` - ${(0,d.formatNumber)(t+1,this.fragments.length)}`:\\\"\\\";return{...e,title:`${this.input.title}${n}${e.extension}`}}))}}class Q{constructor(e){this.infos=e,O(this,\\\"inputs\\\",[]),O(this,\\\"extraAssets\\\",[]),this.inputs=e.map((e=>e.input))}get isSingleVideo(){return this.inputs.length<2}async downloadExtraAssets(){console.log(\\\"[downloadExtraAssets]\\\",this.extraAssets);const e=`${(0,p.getFriendlyTitle)(!1)}.zip`;await new $.DownloadPackage(this.extraAssets).emit(e)}}const T=e=>`https://api.bilibili.com/x/player/playurl?${e}`,U=e=>`https://api.bilibili.com/pgc/player/web/playurl?${e}`,j={video:\\\".mp4\\\",audio:\\\".m4a\\\",flacAudio:\\\".flac\\\"};let P;!function(e){e.Avc=\\\"AVC/H.264\\\",e.Hevc=\\\"HEVC/H.265\\\",e.Av1=\\\"AV1\\\"}(P||(P={}));const N=e=>({url:e.downloadUrl,backupUrls:e.backupUrls,length:e.duration,size:Math.trunc(e.bandWidth*e.duration/8),extension:j[e.type]??\\\".m4s\\\"}),W=e=>{const{videoDashes:t,audioDashes:n,videoCodec:i}=e,o=[];if(0!==t.length){const e=e=>e.videoCodec===i;if(t.some(e)){const n=t.filter(e).sort((0,E.ascendingSort)((e=>e.bandWidth)))[0];o.push(N(n))}else o.push(N(t.sort((0,E.ascendingSort)((e=>e.bandWidth)))[0]))}if(0!==n.length){const e=n.sort((0,E.descendingSort)((e=>e.bandWidth)))[0];o.push(N(e))}return o},z=async function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{codec:n=P.Avc,filters:i}=t,o={video:()=>!0,audio:()=>!0,...i},{aid:a,cid:d,quality:r}=e,l={avid:a,cid:d,qn:(null==r?void 0:r.value)??\\\"\\\",otype:\\\"json\\\",fourk:1,fnver:0,fnval:4048},u=h.bangumiUrls.some((e=>(0,s.matchUrlPattern)(e))),p=u?U((0,s.formData)(l)):T((0,s.formData)(l)),v=await(0,f.bilibiliApi)((0,f.getJsonWithCredentials)(p),\\\"Ëé∑ÂèñËßÜÈ¢ëÈìæÊé•Â§±Ë¥•\\\");if(!v.dash)throw new Error(\\\"Ê≠§ËßÜÈ¢ëÊ≤°Êúâ dash Ê†ºÂºè, ËØ∑ÊîπÁî®ÂÖ∂‰ªñÊ†ºÂºè.\\\");const m=c.allQualities.find((e=>e.value===v.quality)),{duration:g,video:w,audio:b,dolby:y,flac:x}=v.dash,_=e=>{switch(e){case 12:return P.Hevc;case 13:return P.Av1;default:return P.Avc}},I=w.filter((e=>e.id===m.value)).map((e=>({type:\\\"video\\\",videoCodec:_(e.codecid),quality:m,width:e.width,height:e.height,codecs:e.codecs,codecId:e.codecid,bandWidth:e.bandwidth,frameRate:e.frameRate,backupUrls:(e.backupUrl||e.backup_url||[]).map((e=>e.replace(\\\"http:\\\",\\\"https:\\\"))),downloadUrl:(e.baseUrl||e.base_url||\\\"\\\").replace(\\\"http:\\\",\\\"https:\\\"),duration:g}))).filter((e=>o.video(e))),k=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\\\"audio\\\";return{type:t,bandWidth:e.bandwidth,codecs:e.codecs,codecId:e.codecid??0,backupUrls:(e.backupUrl||e.backup_url||[]).map((e=>e.replace(\\\"http:\\\",\\\"https:\\\"))),downloadUrl:(e.baseUrl||e.base_url||\\\"\\\").replace(\\\"http:\\\",\\\"https:\\\"),duration:g}},C=(b||[]).map((e=>k(e))).filter((e=>o.audio(e)));var A;y&&C.push(...(null===(A=y.audio)||void 0===A?void 0:A.map((e=>k(e))))??[]);x&&C.push(...x.audio?[k(x.audio,\\\"flacAudio\\\")]:[]);const V=W({audioDashes:C,videoDashes:I,videoCodec:n}),D=v.accept_quality.map((e=>c.allQualities.find((t=>t.value===e)))).filter((e=>void 0!==e)),E=new q({input:e,jsonData:v,fragments:V,qualities:D,currentQuality:m});return S(e,E),E},B={name:\\\"video.dash.avc\\\",displayName:\\\"dash (AVC/H.264)\\\",description:\\\"Èü≥ÁîªÂàÜÁ¶ªÁöÑ mp4 Ê†ºÂºè, ÁºñÁ†Å‰∏∫ H.264, ‰ΩìÁßØËæÉÂ§ß, ÂÖºÂÆπÊÄßËæÉÂ•Ω. ‰∏ãËΩΩÂêéÂèØ‰ª•ÂêàÂπ∂‰∏∫Âçï‰∏™ mp4 Êñá‰ª∂. Â¶ÇÊûúËßÜÈ¢ëÊ∫êÊ≤°ÊúâÊ≠§ÁºñÁ†Å, Âàô‰ºöËá™Âä®ÈÄâÊã©ÂÖ∂‰ªñÂêåÊ∏ÖÊô∞Â∫¶ÁöÑÁºñÁ†ÅÊ†ºÂºè.\\\",downloadVideoInfo:async e=>z(e,{codec:P.Avc})},F={name:\\\"video.dash.hevc\\\",displayName:\\\"dash (HEVC/H.265)\\\",description:\\\"Èü≥ÁîªÂàÜÁ¶ªÁöÑ mp4 Ê†ºÂºè, ÁºñÁ†Å‰∏∫ H.265, ‰ΩìÁßØ‰∏≠Á≠â, ÂÖºÂÆπÊÄßËæÉÂ∑Æ. ‰∏ãËΩΩÂêéÂèØ‰ª•ÂêàÂπ∂‰∏∫Âçï‰∏™ mp4 Êñá‰ª∂. Â¶ÇÊûúËßÜÈ¢ëÊ∫êÊ≤°ÊúâÊ≠§ÁºñÁ†Å, Âàô‰ºöËá™Âä®ÈÄâÊã©ÂÖ∂‰ªñÂêåÊ∏ÖÊô∞Â∫¶ÁöÑÁºñÁ†ÅÊ†ºÂºè.\\\",downloadVideoInfo:async e=>z(e,{codec:P.Hevc})},H={name:\\\"video.dash.av1\\\",displayName:\\\"dash (AV1)\\\",description:\\\"Èü≥ÁîªÂàÜÁ¶ªÁöÑ mp4 Ê†ºÂºè, ÁºñÁ†Å‰∏∫ AV1, ‰ΩìÁßØËæÉÂ∞è, ÂÖºÂÆπÊÄß‰∏≠Á≠â. ‰∏ãËΩΩÂêéÂèØ‰ª•ÂêàÂπ∂‰∏∫Âçï‰∏™ mp4 Êñá‰ª∂. Â¶ÇÊûúËßÜÈ¢ëÊ∫êÊ≤°ÊúâÊ≠§ÁºñÁ†Å, Âàô‰ºöËá™Âä®ÈÄâÊã©ÂÖ∂‰ªñÂêåÊ∏ÖÊô∞Â∫¶ÁöÑÁºñÁ†ÅÊ†ºÂºè.\\\",downloadVideoInfo:async e=>z(e,{codec:P.Av1})},M={name:\\\"video.dash.audio\\\",displayName:\\\"dash (‰ªÖÈü≥È¢ë)\\\",description:\\\"‰ªÖ‰∏ãËΩΩËßÜÈ¢ë‰∏≠ÁöÑÈü≥È¢ëËΩ®ÈÅì.\\\",downloadVideoInfo:async e=>z(e,{filters:{video:()=>!1}})},R=(e,t)=>{const n=e=>t.length>e?t[e]:t[t.length-1];return{fragments:e.durl.map(((e,t)=>({length:e.length,size:e.size,url:e.url,backupUrls:e.backup_url,extension:n(t)}))),qualities:e.accept_quality.map((e=>c.allQualities.find((t=>t.value===e)))).filter((e=>void 0!==e)),currentQuality:c.allQualities.find((t=>t.value===e.quality))}},G={name:\\\"video.flv\\\",displayName:\\\"flv\\\",description:\\\"‰ΩøÁî® flv Ê†ºÂºè‰∏ãËΩΩ, ÂÖºÂÆπ H.264 ÁºñÁ†Å.\\\",downloadVideoInfo:e=>(async e=>{const{aid:t,cid:n,quality:i}=e,o={avid:t,cid:n,qn:(null==i?void 0:i.value)??\\\"\\\",otype:\\\"json\\\",fourk:1,fnver:0,fnval:0},a=h.bangumiUrls.some((e=>(0,s.matchUrlPattern)(e)))?U((0,s.formData)(o)):T((0,s.formData)(o)),d=await(0,f.bilibiliApi)((0,f.getJsonWithCredentials)(a),\\\"Ëé∑ÂèñËßÜÈ¢ëÈìæÊé•Â§±Ë¥•\\\"),r=new q({input:e,jsonData:d,...R(d,[\\\".flv\\\"])});return S(e,r),r})(e)},L={name:\\\"consoleLogDemo\\\",displayName:\\\"Toast\\\",description:\\\"Âºπ‰∏ÄÊù°Ê∂àÊÅØÊòæÁ§∫Âá∫‰∏ãËΩΩÈìæÊé•, Âè≥ÈîÆÊñ∞Ê†áÁ≠æÈ°µÊâìÂºÄÂ∞±ÂèØ‰ª•‰∏ãËΩΩ. ÈìæÊé•Êúâ referer ÈôêÂà∂, Â§çÂà∂Êó†Áî®, ‰∏î‰∏çËÉΩ‰øùÁïôËßÜÈ¢ëÊñá‰ª∂Âêç.\\\",runAction:async e=>{const t=e.infos.flatMap((e=>e.titledFragments)),n=t.map((e=>e.url)).join(\\\"\\\\n\\\");u.Toast.show(t.map((e=>`<a class=\\\"link\\\" href=\\\"${e.url}\\\" download=\\\"${e.title}\\\">${e.title}</a>`)).join(\\\"\\\\n\\\"),\\\"‰∏ãËΩΩËßÜÈ¢ë\\\"),console.log(n),console.log(e)}},[J]=(0,l.registerAndGetData)(\\\"downloadVideo.inputs\\\",[D,V,A]),[Z]=(0,l.registerAndGetData)(\\\"downloadVideo.apis\\\",[G,B,F,H,M]),[X]=(0,l.registerAndGetData)(\\\"downloadVideo.assets\\\",[]),[Y]=(0,l.registerAndGetData)(\\\"downloadVideo.outputs\\\",[L]),{basicConfig:K}=(0,o.getComponentSettings)(\\\"downloadVideo\\\").options,ee=e=>e.filter((e=>{var t;return(null===(t=e.match)||void 0===t?void 0:t.some((e=>(0,s.matchUrlPattern)(e))))??!0}));var te=Vue.extend({components:{VPopup:r.VPopup,VButton:r.VButton,VDropdown:r.VDropdown,VIcon:r.VIcon},props:{triggerElement:{required:!0}},data(){const e=K.output;return{open:!1,busy:!1,testData:{videoInfo:null,multiple:!1},assets:X,qualities:[],selectedQuality:void 0,inputs:[],selectedInput:void 0,apis:[],selectedApi:void 0,outputs:Y,selectedOutput:Y.find((t=>t.name===e))||Y[0]}},computed:{assetsWithOptions(){return this.assets.filter((e=>e.component))},filteredQualities(){return 0===this.qualities.length?c.allQualities:this.qualities},canStartDownload(){if(this.busy||!this.open)return!1;return!Object.entries(this).filter((e=>{let[t]=e;return t.startsWith(\\\"selected\\\")})).some((e=>{let[,t]=e;return!t}))}},watch:{selectedInput(e){void 0!==e&&this.updateTestVideoInfo()},selectedApi(e){void 0!==e&&(this.updateTestVideoInfo(),K.api=e.name)},selectedOutput(e){void 0!==e&&(K.output=e.name)}},mounted(){coreApis.observer.videoChange((()=>{this.selectedInput=void 0,this.selectedApi=void 0;const e=ee(J);this.inputs=e,this.selectedInput=e[0];const t=ee(Z);this.apis=t;const n=t.find((e=>e.name===K.api));this.selectedApi=n||t[0]}))},methods:{formatFileSize:d.formatFileSize,saveSelectedQuality(){const e=this.selectedQuality;void 0!==e&&(K.quality=e.value,this.updateTestVideoInfo())},async getVideoItems(){const e=this.selectedInput;return await e.getInputs(this.$refs.inputOptions)},async updateTestVideoInfo(){var e;if(!this.selectedInput||!this.selectedApi)return;this.testData.videoInfo=null;const t=this.selectedInput,n=(null===(e=t.getTestInput)||void 0===e?void 0:e.call(t))??{aid:unsafeWindow.aid,cid:unsafeWindow.cid,title:(0,p.getFriendlyTitle)(!0)};console.log(\\\"[updateTestVideoInfo]\\\",n),this.testData.multiple=t.batch;const i=this.selectedApi;try{const e=await i.downloadVideoInfo(n);this.qualities=e.qualities;if((!this.selectedQuality||!e.qualities.some((e=>e.value===this.selectedQuality.value)))&&(this.selectedQuality=e.qualities[0],K.quality)){const[t]=e.qualities.filter((e=>e.value<=K.quality));t&&(this.selectedQuality=t)}n.quality=this.selectedQuality;const t=await i.downloadVideoInfo(n);this.testData.videoInfo=t}catch(e){this.testData.videoInfo=void 0}},async startDownload(e,t){try{this.busy=!0;const n=this.selectedInput,i=this.selectedApi,o=await n.getInputs(this.$refs.inputOptions);if(0===o.length)return void u.Toast.info(\\\"Êú™Êé•Êî∂Âà∞ËßÜÈ¢ë, Â¶ÇÊûúËæìÂÖ•Ê∫êÊîØÊåÅÊâπÈáè, ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏Ä‰∏™ËßÜÈ¢ë.\\\",\\\"‰∏ãËΩΩËßÜÈ¢ë\\\",3e3);o.forEach((e=>{e.quality=this.selectedQuality}));const s=await Promise.all(o.map((e=>i.downloadVideoInfo(e))));if(0===s.length||0===lodash.sumBy(s,(e=>e.fragments.length)))return void u.Toast.info(\\\"Êú™Êé•Êî∂Âà∞ÂèØ‰∏ãËΩΩÊï∞ÊçÆ, ËØ∑Ê£ÄÊü•ËæìÂÖ•Ê∫êÂíåÊ†ºÂºèÊòØÂê¶ÈÄÇÁî®‰∫éÂΩìÂâçËßÜÈ¢ë.\\\",\\\"‰∏ãËΩΩËßÜÈ¢ë\\\",3e3);const a=new Q(s),d=(await Promise.all(X.map((e=>e.getAssets(s,this.$refs.assetsOptions.find((t=>t.$attrs.name===e.name))))))).flat();a.extraAssets.push(...d),await a.downloadExtraAssets(),await t.runAction(a,e)}catch(e){(0,a.logError)(e)}finally{this.busy=!1}}}}),ne=n(828),ie=n.n(ne),oe={insert:\\\"head\\\",singleton:!1},se=(w()(ie(),oe),ie().locals,(0,_.Z)(te,i,[],!1,null,null,null));se.options.__file=\\\"registry/lib/components/video/download/DownloadVideo.vue\\\";var ae=se.exports},185:function(e,t,n){\\\"use strict\\\";n.r(t),n.d(t,{default:function(){return d}});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\\\"div\\\",{staticClass:\\\"multiple-widgets\\\"},[n(\\\"DefaultWidget\\\",{ref:\\\"button\\\",attrs:{name:\\\"‰∏ãËΩΩËßÜÈ¢ë\\\",icon:\\\"mdi-download\\\"},on:{mouseover:function(t){return e.createDownloadPanel()},click:function(t){return e.toggleDownloadPanel()}}})],1)};let o;i._withStripped=!0;var s=Vue.extend({components:{DefaultWidget:coreApis.ui.DefaultWidget},methods:{async createDownloadPanel(){if(!o){const e=document.createElement(\\\"div\\\");document.body.appendChild(e);const t=await Promise.resolve().then(n.bind(n,605)).then((e=>e.default));o=new t({propsData:{triggerElement:this.$refs.button}}).$mount(e)}},async toggleDownloadPanel(){o&&(o.open=!o.open)}}}),a=(0,n(900).Z)(s,i,[],!1,null,null,null);a.options.__file=\\\"registry/lib/components/video/download/Widget.vue\\\";var d=a.exports},573:function(e,t,n){\\\"use strict\\\";n.r(t),n.d(t,{default:function(){return h}});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\\\"div\\\",{staticClass:\\\"single-video-info download-video-config-section\\\"},[e.imageUrl?n(\\\"img\\\",{staticClass:\\\"shadow\\\",attrs:{src:e.imageUrl}}):e._e(),e._v(\\\" \\\"),e.imageUrl?n(\\\"img\\\",{attrs:{src:e.imageUrl}}):e._e()])};i._withStripped=!0;var o=coreApis.observer,s=n(414),a=coreApis.componentApis.video.videoInfo,d=Vue.extend({data:()=>({imageUrl:\\\"\\\"}),created(){(0,o.videoChange)((async()=>{const{aid:e}=unsafeWindow,t=new a.VideoInfo(e);try{await t.fetchInfo()}catch(e){throw(0,s.logError)(e),e}this.imageUrl=t.coverUrl.replace(\\\"http:\\\",\\\"https:\\\")}))}}),r=n(379),l=n.n(r),c=n(307),u=n.n(c),p={insert:\\\"head\\\",singleton:!1},f=(l()(u(),p),u().locals,(0,n(900).Z)(d,i,[],!1,null,null,null));f.options.__file=\\\"registry/lib/components/video/download/inputs/video/SingleVideoInfo.vue\\\";var h=f.exports},900:function(e,t,n){\\\"use strict\\\";function i(e,t,n,i,o,s,a,d){var r,l=\\\"function\\\"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=n,l._compiled=!0),i&&(l.functional=!0),s&&(l._scopeId=\\\"data-v-\\\"+s),a?(r=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\\\"undefined\\\"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},l._ssrRegister=r):o&&(r=d?function(){o.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:o),r)if(l.functional){l._injectStyles=r;var c=l.render;l.render=function(e,t){return r.call(t),c(e,t)}}else{var u=l.beforeCreate;l.beforeCreate=u?[].concat(u,r):[r]}return{exports:e,options:l}}n.d(t,{Z:function(){return i}})},414:function(e){\\\"use strict\\\";e.exports=coreApis.utils.log}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})};var i={};return function(){\\\"use strict\\\";n.d(i,{component:function(){return t}});var e=coreApis.spinQuery;const t={name:\\\"downloadVideo\\\",displayName:\\\"‰∏ãËΩΩËßÜÈ¢ë\\\",description:\\\"Âú®ÂäüËÉΩÈù¢Êùø‰∏≠Ê∑ªÂä†‰∏ãËΩΩËßÜÈ¢ëÊîØÊåÅ. ËØ∑Ê≥®ÊÑè‰∏çËÉΩ‰∏ãËΩΩË∂ÖÂá∫Ë¥¶Âè∑ÊùÉÈôêÁöÑËßÜÈ¢ë, ‰æãÂ¶ÇÈùûÂ§ß‰ºöÂëò‰∏ãËΩΩÂ§ß‰ºöÂëòÊ∏ÖÊô∞Â∫¶ËßÜÈ¢ë, ÊàñËÄÖÂ§ßÈôÜÂú∞Âå∫ÁΩëÁªú‰∏ãËΩΩÊ∏ØÊæ≥Âè∞Âú∞Âå∫Áï™Ââß, ÈÉΩÊòØ‰∏çÂèØ‰ª•ÁöÑ.\\\",entry:none,reload:none,unload:none,widget:{component:()=>Promise.resolve().then(n.bind(n,185)).then((e=>e.default)),condition:()=>(0,e.hasVideo)()},tags:[componentsTags.video],options:{basicConfig:{defaultValue:{},displayName:\\\"Âü∫Á°ÄÈÖçÁΩÆ\\\",hidden:!0}},commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"}}(),i=i.component}()}));\",\"metadata\": {\"name\": \"downloadVideo\",\"displayName\": \"‰∏ãËΩΩËßÜÈ¢ë\",\"description\": \"Âú®ÂäüËÉΩÈù¢Êùø‰∏≠Ê∑ªÂä†‰∏ãËΩΩËßÜÈ¢ëÊîØÊåÅ. ËØ∑Ê≥®ÊÑè‰∏çËÉΩ‰∏ãËΩΩË∂ÖÂá∫Ë¥¶Âè∑ÊùÉÈôêÁöÑËßÜÈ¢ë, ‰æãÂ¶ÇÈùûÂ§ß‰ºöÂëò‰∏ãËΩΩÂ§ß‰ºöÂëòÊ∏ÖÊô∞Â∫¶ËßÜÈ¢ë, ÊàñËÄÖÂ§ßÈôÜÂú∞Âå∫ÁΩëÁªú‰∏ãËΩΩÊ∏ØÊæ≥Âè∞Âú∞Âå∫Áï™Ââß, ÈÉΩÊòØ‰∏çÂèØ‰ª•ÁöÑ.\",\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1}],\"options\": {\"basicConfig\": {\"defaultValue\": {},\"displayName\": \"Âü∫Á°ÄÈÖçÁΩÆ\",\"hidden\": true}},\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {\"basicConfig\": {}}}},\"downloadDanmaku\": {\"code\": \"!function(t,e){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=e():\\\"function\\\"==typeof define&&define.amd?define([],e):\\\"object\\\"==typeof exports?exports[\\\"video/danmaku/download\\\"]=e():t[\\\"video/danmaku/download\\\"]=e()}(self,(function(){return function(){var t={701:function(t,e,i){\\\"use strict\\\";i.r(e),i.d(e,{decodeDanmakuSegment:function(){return a},decodeDanmakuView:function(){return s},proto:function(){return o}});var n=coreApis.runtimeLibrary;const o={nested:{DmWebViewReply:{fields:{state:{type:\\\"int32\\\",id:1},text:{type:\\\"string\\\",id:2},textSide:{type:\\\"string\\\",id:3},dmSge:{type:\\\"DmSegConfig\\\",id:4},flag:{type:\\\"DanmakuFlagConfig\\\",id:5},specialDms:{rule:\\\"repeated\\\",type:\\\"string\\\",id:6},checkBox:{type:\\\"bool\\\",id:7},count:{type:\\\"int64\\\",id:8},commandDms:{rule:\\\"repeated\\\",type:\\\"CommandDm\\\",id:9},dmSetting:{type:\\\"DanmuWebPlayerConfig\\\",id:10}}},CommandDm:{fields:{id:{type:\\\"int64\\\",id:1},oid:{type:\\\"int64\\\",id:2},mid:{type:\\\"int64\\\",id:3},command:{type:\\\"string\\\",id:4},content:{type:\\\"string\\\",id:5},progress:{type:\\\"int32\\\",id:6},ctime:{type:\\\"string\\\",id:7},mtime:{type:\\\"string\\\",id:8},extra:{type:\\\"string\\\",id:9},idStr:{type:\\\"string\\\",id:10}}},DmSegConfig:{fields:{pageSize:{type:\\\"int64\\\",id:1},total:{type:\\\"int64\\\",id:2}}},DanmakuFlagConfig:{fields:{recFlag:{type:\\\"int32\\\",id:1},recText:{type:\\\"string\\\",id:2},recSwitch:{type:\\\"int32\\\",id:3}}},DmSegMobileReply:{fields:{elems:{rule:\\\"repeated\\\",type:\\\"DanmakuElem\\\",id:1}}},DanmakuElem:{fields:{id:{type:\\\"int64\\\",id:1},progress:{type:\\\"int32\\\",id:2},mode:{type:\\\"int32\\\",id:3},fontsize:{type:\\\"int32\\\",id:4},color:{type:\\\"uint32\\\",id:5},midHash:{type:\\\"string\\\",id:6},content:{type:\\\"string\\\",id:7},ctime:{type:\\\"int64\\\",id:8},weight:{type:\\\"int32\\\",id:9},action:{type:\\\"string\\\",id:10},pool:{type:\\\"int32\\\",id:11},idStr:{type:\\\"string\\\",id:12},attr:{type:\\\"int32\\\",id:13}}},DanmuWebPlayerConfig:{fields:{dmSwitch:{type:\\\"bool\\\",id:1},aiSwitch:{type:\\\"bool\\\",id:2},aiLevel:{type:\\\"int32\\\",id:3},blocktop:{type:\\\"bool\\\",id:4},blockscroll:{type:\\\"bool\\\",id:5},blockbottom:{type:\\\"bool\\\",id:6},blockcolor:{type:\\\"bool\\\",id:7},blockspecial:{type:\\\"bool\\\",id:8},preventshade:{type:\\\"bool\\\",id:9},dmask:{type:\\\"bool\\\",id:10},opacity:{type:\\\"float\\\",id:11},dmarea:{type:\\\"int32\\\",id:12},speedplus:{type:\\\"float\\\",id:13},fontsize:{type:\\\"float\\\",id:14},screensync:{type:\\\"bool\\\",id:15},speedsync:{type:\\\"bool\\\",id:16},fontfamily:{type:\\\"string\\\",id:17},bold:{type:\\\"bool\\\",id:18},fontborder:{type:\\\"int32\\\",id:19},drawType:{type:\\\"string\\\",id:20}}}}},r=lodash.curry((async(t,e)=>{const i=new Uint8Array(\\\"arrayBuffer\\\"in Blob.prototype?await e.arrayBuffer():await new Response(e).arrayBuffer()),r=(await n.protobufLibrary).Root.fromJSON(o).lookupType(t),a=r.decode(i);return r.toObject(a)})),a=r(\\\"DmSegMobileReply\\\"),s=r(\\\"DmWebViewReply\\\")},570:function(t,e,i){\\\"use strict\\\";i.r(e),i.d(e,{JsonDanmaku:function(){return T},convertToAss:function(){return $},convertToAssFromJson:function(){return F},convertToXmlFromJson:function(){return D},getBlobByType:function(){return H},getUserDanmakuConfig:function(){return x}});var n=coreApis.utils.lazyPanel,o=i(414),r=coreApis.utils.sort,a=i(674),s=coreApis.componentApis.video.assUtils;function l(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}class c{constructor(t){let{content:e,time:i,type:n,fontSize:o,color:r}=t;l(this,\\\"content\\\",void 0),l(this,\\\"time\\\",void 0),l(this,\\\"startTime\\\",void 0),l(this,\\\"type\\\",void 0),l(this,\\\"fontSize\\\",void 0),l(this,\\\"color\\\",void 0),this.content=e,this.time=i,this.startTime=parseFloat(i),this.type=parseInt(n),this.fontSize=parseFloat(o),this.color=parseInt(r)}}function d(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}class u extends c{constructor(t){let{content:e,time:i,type:n,fontSize:o,color:r,typeTag:a,colorTag:s,endTime:l}=t;super({content:e,time:i,type:n,fontSize:o,color:r}),d(this,\\\"typeTag\\\",void 0),d(this,\\\"colorTag\\\",void 0),d(this,\\\"endTime\\\",void 0),this.typeTag=a,this.colorTag=s,this.endTime=l}text(t){let e=t[this.fontSize];e||(e=t[25]);const i=e.match(/Style:(.*?),/)[1].trim();return`Dialogue: 0,${this.time},${this.endTime},${i},,0,0,0,,{${this.typeTag}${this.colorTag}}${this.content}`}}class p{constructor(t,e,i,n,o){d(this,\\\"danmakus\\\",void 0),d(this,\\\"title\\\",void 0),d(this,\\\"fontStyles\\\",void 0),d(this,\\\"blockTypes\\\",void 0),d(this,\\\"resolution\\\",void 0),this.danmakus=t,this.title=e,this.fontStyles=i,this.blockTypes=n,this.resolution=o}generateAss(){return`${`\\\\n[Script Info]\\\\n; Script generated by Bilibili Evolved Danmaku Converter\\\\n; https://github.com/the1812/Bilibili-Evolved/\\\\nTitle: ${this.title}\\\\nScriptType: v4.00+\\\\nPlayResX: ${this.resolution.x}\\\\nPlayResY: ${this.resolution.y}\\\\nTimer: 10.0000\\\\nWrapStyle: 2\\\\nScaledBorderAndShadow: no\\\\n\\\\n[V4+ Styles]\\\\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\\\\n${Object.values(this.fontStyles).join(\\\"\\\\n\\\")}\\\\n\\\\n[Events]\\\\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\\\\n                `.trim()}\\\\n${this.danmakus.map((t=>t.text(this.fontStyles))).filter((t=>\\\"\\\"!==t)).join(\\\"\\\\n\\\")}`}}var h=coreApis.componentApis.video.xmlUtils;function m(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}class f extends c{constructor(t){let{content:e,time:i,type:n,fontSize:o,color:r,timeStamp:a,pool:s,userHash:l,rowId:c}=t;super({content:e,time:i,type:n,fontSize:o,color:r}),m(this,\\\"timeStamp\\\",void 0),m(this,\\\"pool\\\",void 0),m(this,\\\"userHash\\\",void 0),m(this,\\\"rowId\\\",void 0),m(this,\\\"pDataArray\\\",void 0),this.timeStamp=parseInt(a),this.pool=parseInt(s),this.userHash=l,this.rowId=parseInt(c),this.pDataArray=[i,n,o,r,a,s,l,c]}text(){return`<d p=\\\"${this.pDataArray.join(\\\",\\\")}\\\">${(0,h.escapeContent)(this.content)}</d>`}static parse(t){const e=t.getAttribute(\\\"p\\\"),[i,n,o,r,a,s,l,c]=e.split(\\\",\\\"),d=t.innerHTML;return new f({content:d,time:i,type:n,fontSize:o,color:r,timeStamp:a,pool:s,userHash:l,rowId:c})}}class g{constructor(t){m(this,\\\"xml\\\",void 0),m(this,\\\"danmakus\\\",void 0),this.xml=t;const e=(new DOMParser).parseFromString(t,\\\"application/xml\\\").documentElement;this.danmakus=[...e.querySelectorAll(\\\"d[p]\\\")].map((t=>f.parse(t)))}}var y=coreApis.utils;let v;function b(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}!function(t){t[t.Normal=1]=\\\"Normal\\\",t[t.Normal2=2]=\\\"Normal2\\\",t[t.Normal3=3]=\\\"Normal3\\\",t[t.Bottom=4]=\\\"Bottom\\\",t[t.Top=5]=\\\"Top\\\",t[t.Reversed=6]=\\\"Reversed\\\",t[t.Special=7]=\\\"Special\\\",t[t.Special2=8]=\\\"Special2\\\"}(v||(v={}));class k{constructor(t,e,i,n){b(this,\\\"horizontalStack\\\",void 0),b(this,\\\"horizontalTrack\\\",void 0),b(this,\\\"verticalStack\\\",void 0),b(this,\\\"verticalTrack\\\",void 0),b(this,\\\"resolution\\\",void 0),b(this,\\\"duration\\\",void 0),b(this,\\\"canvas\\\",void 0),b(this,\\\"context\\\",void 0),b(this,\\\"fontSizes\\\",void 0),b(this,\\\"bottomMarginPercent\\\",void 0),b(this,\\\"danmakuHeight\\\",void 0),b(this,\\\"trackHeight\\\",void 0),b(this,\\\"trackCount\\\",void 0),this.horizontalStack=[],this.horizontalTrack=[],this.verticalStack=[],this.verticalTrack=[],this.resolution=e,this.duration=i,this.canvas=document.createElement(\\\"canvas\\\"),this.context=this.canvas.getContext(\\\"2d\\\"),this.fontSizes={30:`64px ${t}`,25:`52px ${t}`,18:`36px ${t}`,45:`90px ${t}`},this.bottomMarginPercent=n,this.generateTracks()}generateTracks(){this.danmakuHeight=52,this.trackHeight=2*k.margin+52,this.trackCount=parseInt((0,y.fixed)(this.resolution.y*(1-this.bottomMarginPercent)/this.trackHeight,0))}getTextSize(t){this.context.font=this.fontSizes[t.fontSize];return[this.context.measureText(t.content).width/2,this.danmakuHeight/2]}getTags(t,e){let{targetTrack:i,initTrackNumber:n,nextTrackNumber:o,willOverlay:r,getTrackItem:a,getTag:s}=e;const[l,c]=this.getTextSize(t),d=2*l,u=this.duration(t)*d/(this.resolution.x+d)+k.nextDanmakuDelay;let p=n,h=null;const m=t=>r(t,p,d);do{h=i.find(m),p+=o}while(h&&p<=this.trackCount&&p>=0);return p>this.trackCount||p<0?\\\"\\\\\\\\pos(0,-999)\\\":(p-=o,i.push(a(p,d,u)),s({trackNumber:p,x:l,y:c}))}getHorizontalTags(t){return this.getTags(t,{targetTrack:this.horizontalTrack,initTrackNumber:0,nextTrackNumber:1,willOverlay:(e,i,n)=>e.trackNumber===i&&(e.width<n?this.duration(t)*this.resolution.x/(this.resolution.x+n)<=e.end-t.startTime:e.visible>t.startTime),getTrackItem:(e,i,n)=>({width:i,start:t.startTime,visible:t.startTime+n,end:t.startTime+this.duration(t),trackNumber:e}),getTag:e=>{let{trackNumber:i,x:n,y:o}=e;return`\\\\\\\\move(${this.resolution.x+n},${i*this.trackHeight+k.margin+o},${-n},${i*this.trackHeight+k.margin+o},0,${1e3*this.duration(t)})`}})}getVerticalTags(t){const e=\\\"top\\\"===k.danmakuType[t.type];return this.getTags(t,{targetTrack:this.verticalTrack,initTrackNumber:e?0:this.trackCount-1,nextTrackNumber:e?1:-1,willOverlay:(e,i)=>e.trackNumber===i&&e.end>t.startTime,getTrackItem:e=>({start:t.startTime,end:t.startTime+this.duration(t),trackNumber:e}),getTag:t=>{let{trackNumber:i,y:n}=t;return e?`\\\\\\\\pos(${this.resolution.x/2},${i*this.trackHeight+k.margin+n})`:`\\\\\\\\pos(${this.resolution.x/2},${this.resolution.y-k.margin-n-(this.trackCount-1-i)*this.trackHeight})`}})}push(t){let e=\\\"\\\",i=[];switch(k.danmakuType[t.type]){case\\\"normal\\\":case\\\"reversed\\\":e=this.getHorizontalTags(t),i=this.horizontalStack;break;case\\\"top\\\":case\\\"bottom\\\":e=this.getVerticalTags(t),i=this.verticalStack;break;default:return{tags:\\\"\\\\\\\\pos(0,-999)\\\"}}const n={tags:e};return i.push(n),n}}function w(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}b(k,\\\"danmakuType\\\",{[v.Normal]:\\\"normal\\\",[v.Normal2]:\\\"normal\\\",[v.Normal3]:\\\"normal\\\",[v.Bottom]:\\\"bottom\\\",[v.Top]:\\\"top\\\",[v.Reversed]:\\\"reversed\\\",[v.Special]:\\\"special\\\",[v.Special2]:\\\"special\\\"}),b(k,\\\"margin\\\",4),b(k,\\\"nextDanmakuDelay\\\",.05);class S{constructor(t){let{title:e,font:i,alpha:n,duration:o,blockTypes:r,blockFilter:a,resolution:s,bottomMarginPercent:l,bold:c}=t;w(this,\\\"title\\\",void 0),w(this,\\\"font\\\",void 0),w(this,\\\"alpha\\\",void 0),w(this,\\\"duration\\\",void 0),w(this,\\\"blockTypes\\\",void 0),w(this,\\\"blockFilter\\\",void 0),w(this,\\\"resolution\\\",void 0),w(this,\\\"bold\\\",void 0),w(this,\\\"danmakuStack\\\",void 0),this.title=e,this.font=i,this.alpha=Math.round(255*n).toString(16).toUpperCase().padStart(2,\\\"0\\\"),this.duration=o,this.blockTypes=r,this.blockFilter=a||(()=>!0),this.resolution=s,this.bold=c,this.danmakuStack=new k(i,s,o,l)}get fontStyles(){return{36:`Style: Larger,${this.font},72,&H${this.alpha}FFFFFF,&H${this.alpha}FFFFFF,&H${this.alpha}000000,&H${this.alpha}000000,${this.bold?\\\"1\\\":\\\"0\\\"},0,0,0,100,100,0,0,1,1.2,0,5,0,0,0,0`,30:`Style: Large,${this.font},64,&H${this.alpha}FFFFFF,&H${this.alpha}FFFFFF,&H${this.alpha}000000,&H${this.alpha}000000,${this.bold?\\\"1\\\":\\\"0\\\"},0,0,0,100,100,0,0,1,1.2,0,5,0,0,0,0`,25:`Style: Medium,${this.font},52,&H${this.alpha}FFFFFF,&H${this.alpha}FFFFFF,&H${this.alpha}000000,&H${this.alpha}000000,${this.bold?\\\"1\\\":\\\"0\\\"},0,0,0,100,100,0,0,1,1.2,0,5,0,0,0,0`,18:`Style: Small,${this.font},36,&H${this.alpha}FFFFFF,&H${this.alpha}FFFFFF,&H${this.alpha}000000,&H${this.alpha}000000,${this.bold?\\\"1\\\":\\\"0\\\"},0,0,0,100,100,0,0,1,1.2,0,5,0,0,0,0`,45:`Style: ExtraLarge,${this.font},90,&H${this.alpha}FFFFFF,&H${this.alpha}FFFFFF,&H${this.alpha}000000,&H${this.alpha}000000,${this.bold?\\\"1\\\":\\\"0\\\"},0,0,0,100,100,0,0,1,1.2,0,5,0,0,0,0`}}xmlDanmakuToAssDocument(t){const e=[];for(const i of t){const t=-1!==this.blockTypes.indexOf(i.type),n=-1!==this.blockTypes.indexOf(\\\"color\\\")&&i.color!==S.white;if(t||n)continue;if(!this.blockFilter(i))continue;const[o,r]=(0,s.convertTimeByDuration)(i.startTime,this.duration(i));e.push(new u({content:(0,s.normalizeContent)(i.content),time:o,endTime:r,type:i.type.valueOf().toString(),fontSize:i.fontSize.toString(),color:i.color.toString(),typeTag:this.convertType(i),colorTag:(0,s.convertHexColorForDialogue)(i.color.toString(16))}))}return new p(e,this.title,this.fontStyles,this.blockTypes,this.resolution)}xmlStringToAssDocument(t){const e=new g(t);return this.xmlDanmakuToAssDocument(e.danmakus.sort((0,r.ascendingSort)((t=>t.startTime))))}convertType(t){return this.danmakuStack.push(t).tags}}w(S,\\\"white\\\",16777215);class T{constructor(t,e){var i,n,o;this.aid=t,this.cid=e,o=[],(n=\\\"jsonDanmakus\\\")in(i=this)?Object.defineProperty(i,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):i[n]=o}get xmlDanmakus(){return this.jsonDanmakus.map((t=>{var e,i,n,o,r;return{content:t.content,time:t.progress?(t.progress/1e3).toString():\\\"0\\\",type:(null===(e=t.mode)||void 0===e?void 0:e.toString())??\\\"1\\\",fontSize:(null===(i=t.fontsize)||void 0===i?void 0:i.toString())??\\\"25\\\",color:(null===(n=t.color)||void 0===n?void 0:n.toString())??\\\"16777215\\\",timeStamp:(null===(o=t.ctime)||void 0===o?void 0:o.toString())??\\\"0\\\",pool:(null===(r=t.pool)||void 0===r?void 0:r.toString())??\\\"0\\\",userHash:t.midHash??\\\"0\\\",rowId:t.idStr??\\\"0\\\"}}))}async fetchInfo(){const{decodeDanmakuSegment:t,decodeDanmakuView:e}=await Promise.resolve().then(i.bind(i,701)),n=async t=>(await fetch(t)).blob(),a=await n(`https://api.bilibili.com/x/v2/dm/web/view?type=1&oid=${this.cid}&pid=${this.aid}`);if(!a)throw new Error(\\\"Ëé∑ÂèñÂºπÂπï‰ø°ÊÅØÂ§±Ë¥•\\\");const s=await e(a),{total:l}=s.dmSge;if(void 0===l)throw new Error(`Ëé∑ÂèñÂºπÂπïÂàÜÈ°µÊï∞Â§±Ë¥•: ${JSON.stringify(lodash.omit(s,\\\"flag\\\"))}`);console.log(\\\"segment count =\\\",l);const c=await Promise.all(new Array(l).fill(0).map((async(e,i)=>{const r=await n(`https://api.bilibili.com/x/v2/dm/web/seg.so?type=1&oid=${this.cid}&pid=${this.aid}&segment_index=${i+1}`);if(!r)return(0,o.logError)(new Error(`ÂºπÂπïÁâáÊÆµ${i+1}‰∏ãËΩΩÂ§±Ë¥•`)),[];console.log(`received blob for segment ${i+1}`,r);return(await t(r)).elems??[]})));return this.jsonDanmakus=c.flat().sort((0,r.ascendingSort)((t=>t.progress))),this}}const x=async()=>{const t=(0,a.getFriendlyTitle)(),e={font:\\\"ÂæÆËΩØÈõÖÈªë\\\",alpha:.4,duration:t=>{switch(t.type){case 4:case 5:return 4;default:return 6}},blockTypes:[7,8],resolution:{x:1920,y:1080},bottomMarginPercent:.15,bold:!1};let i={...e,title:t};try{await(0,n.loadDanmakuSettingsPanel)();const t=localStorage.getItem(\\\"bilibili_player_settings\\\");if(t){const e=JSON.parse(t),n=(t,i)=>lodash.get(e,`setting_config.${t}`,i);i.blockTypes=(()=>{const t=[],i={scroll:[1,2,3],top:[5],bottom:[4],color:[\\\"color\\\"]};for(const[n,o]of Object.entries(i))!1===lodash.get(e,`block.type_${n}`,!0)&&t.push(...o);return t.concat(7,8)})(),i.bold=n(\\\"bold\\\",!1),i.alpha=lodash.clamp(1-parseFloat(n(\\\"opacity\\\",\\\"0.4\\\")),0,1);const o=1.4-.4*n(\\\"fontsize\\\",1);i.resolution={x:Math.round(1920*o),y:Math.round(1080*o)},i.duration=(()=>{const t=18-3*n(\\\"speedplus\\\",0);return e=>{switch(e.type){case 4:case 5:return 4;default:return t}}})();const r=n(\\\"danmakuArea\\\",0);i.bottomMarginPercent=r>=100?0:r/100,0===i.bottomMarginPercent&&n(\\\"preventshade\\\",!1)&&(i.bottomMarginPercent=.15);const a=lodash.get(e,\\\"block.list\\\",[]);i.blockFilter=t=>{for(const e of a)if(e.s)switch(e.t){default:return!0;case\\\"keyword\\\":if(t.content.includes(e.v))return!1;break;case\\\"regexp\\\":if(new RegExp(e.v).test(t.content))return!1;break;case\\\"user\\\":if(t.userHash===e.v)return!1}return!0}}else console.warn(\\\"[ÂºπÂπïËΩ¨Êç¢] Êú™ÊâæÂà∞Êí≠ÊîæÂô®ËÆæÁΩÆ\\\"),i={...i,...e};i.font=dq(\\\".bilibili-player-video-danmaku-setting-right-font .bui-select-result\\\").innerText}catch(t){(0,o.logError)(t),i={...i,...e}}for(const[t,n]of Object.entries(i))null==n&&(console.warn(\\\"danmaku config invalid for key\\\",t,\\\", value =\\\",n),i[t]=e[n]);return console.log(i),i},$=async t=>new S(await x()).xmlStringToAssDocument(t).generateAss(),F=async t=>new S(await x()).xmlDanmakuToAssDocument(t.xmlDanmakus.map((t=>new f(t)))).generateAss(),D=t=>`\\\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><i><chatserver>chat.bilibili.com</chatserver><chatid>${t.cid}</chatid><mission>0</mission><maxlimit>${t.xmlDanmakus.length}</maxlimit><state>0</state><real_name>0</real_name><source>k-v</source>\\\\n${t.xmlDanmakus.map((t=>new f(t).text())).join(\\\"\\\\n\\\")}\\\\n</i>\\\\n  `.trim(),H=async function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:unsafeWindow;const{aid:i,cid:n}=e,o=await new T(i,n).fetchInfo();switch(t){case\\\"xml\\\":return new Blob([D(o)],{type:\\\"text/xml\\\"});default:case\\\"json\\\":return new Blob([JSON.stringify(o.jsonDanmakus)],{type:\\\"text/json\\\"});case\\\"ass\\\":return new Blob([await F(o)],{type:\\\"text/ass\\\"})}}},29:function(t,e,i){var n=i(645)((function(t){return t[1]}));n.push([t.id,\\\".download-danmaku-config.download-video-config-section .be-dropdown {\\\\n  text-transform: uppercase;\\\\n}\\\",\\\"\\\"]),t.exports=n},645:function(t){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\nt.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?\\\"@media \\\".concat(e[2],\\\" {\\\").concat(i,\\\"}\\\"):i})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\ne.i=function(t,i,n){\\\"string\\\"==typeof t&&(\\n// eslint-disable-next-line no-param-reassign\\nt=[[null,t,\\\"\\\"]]);var o={};if(n)for(var r=0;r<this.length;r++){\\n// eslint-disable-next-line prefer-destructuring\\nvar a=this[r][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);n&&o[l[0]]||(i&&(l[2]?l[2]=\\\"\\\".concat(i,\\\" and \\\").concat(l[2]):l[2]=i),e.push(l))}},e}},379:function(t,e,i){\\\"use strict\\\";var n,o=function(){return void 0===n&&(\\n// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\\n// @see https://github.com/webpack-contrib/style-loader/issues/177\\nn=Boolean(window&&document&&document.all&&!window.atob)),n},r=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),a=[];function s(t){for(var e=-1,i=0;i<a.length;i++)if(a[i].identifier===t){e=i;break}return e}function l(t,e){for(var i={},n=[],o=0;o<t.length;o++){var r=t[o],l=e.base?r[0]+e.base:r[0],c=i[l]||0,d=\\\"\\\".concat(l,\\\" \\\").concat(c);i[l]=c+1;var u=s(d),p={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(a[u].references++,a[u].updater(p)):a.push({identifier:d,updater:g(p,e),references:1}),n.push(d)}return n}function c(t){var e=document.createElement(\\\"style\\\"),n=t.attributes||{};if(void 0===n.nonce){var o=i.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),\\\"function\\\"==typeof t.insert)t.insert(e);else{var a=r(t.insert||\\\"head\\\");if(!a)throw new Error(\\\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\\\");a.appendChild(e)}return e}var d,u=(d=[],function(t,e){return d[t]=e,d.filter(Boolean).join(\\\"\\\\n\\\")});function p(t,e,i,n){var o=i?\\\"\\\":n.media?\\\"@media \\\".concat(n.media,\\\" {\\\").concat(n.css,\\\"}\\\"):n.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var r=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(r,a[e]):t.appendChild(r)}}function h(t,e,i){var n=i.css,o=i.media,r=i.sourceMap;if(o?t.setAttribute(\\\"media\\\",o):t.removeAttribute(\\\"media\\\"),r&&\\\"undefined\\\"!=typeof btoa&&(n+=\\\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r)))),\\\" */\\\")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var m=null,f=0;function g(t,e){var i,n,o;if(e.singleton){var r=f++;i=m||(m=c(e)),n=p.bind(null,i,r,!1),o=p.bind(null,i,r,!0)}else i=c(e),n=h.bind(null,i,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||\\\"boolean\\\"==typeof e.singleton||(e.singleton=o());var i=l(t=t||[],e);return function(t){if(t=t||[],\\\"[object Array]\\\"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var o=s(i[n]);a[o].references--}for(var r=l(t,e),c=0;c<i.length;c++){var d=s(i[c]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}i=r}}}},627:function(t,e,i){\\\"use strict\\\";i.r(e),i.d(e,{default:function(){return p}});var n=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i(\\\"div\\\",{staticClass:\\\"multiple-widgets\\\"},[i(\\\"DefaultWidget\\\",{attrs:{disabled:t.disabled,name:\\\"‰∏ãËΩΩÂºπÂπï (XML)\\\",icon:\\\"danmaku\\\"},on:{click:function(e){return t.download(\\\"xml\\\")}}}),t._v(\\\" \\\"),i(\\\"DefaultWidget\\\",{attrs:{disabled:t.disabled,name:\\\"‰∏ãËΩΩÂºπÂπï (JSON)\\\",icon:\\\"danmaku\\\"},on:{click:function(e){return t.download(\\\"json\\\")}}}),t._v(\\\" \\\"),i(\\\"DefaultWidget\\\",{attrs:{disabled:t.disabled,name:\\\"‰∏ãËΩΩÂºπÂπï (ASS)\\\",icon:\\\"danmaku\\\"},on:{click:function(e){return t.download(\\\"ass\\\")}}})],1)};n._withStripped=!0;var o=coreApis.download,r=i(414),a=i(674),s=coreApis.pluginApis.data,l=i(648),c=i(570);(0,s.addData)(\\\"ui.icons\\\",(t=>{t.danmaku='<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" version=\\\"1.1\\\"  viewBox=\\\"0 0 24 24\\\"><path d=\\\"M20,4H4C2.9,4,2,4.9,2,6v12c0,1.1,0.9,2,2,2h4h5.9H20c1.1,0,2-0.9,2-2V6C22,4.9,21.1,4,20,4z M5,7h8v2H5V7z M7,17H5v-2h2V17z M6.3,13v-2H18v2H6.3z M19,17H9v-2h10V17z M19,9h-4.1V7H19V9z\\\"/></svg>'}));var d=Vue.extend({components:{DefaultWidget:l.DefaultWidget},data:()=>({disabled:!1}),methods:{async download(t){try{this.disabled=!0;const e=(0,a.getFriendlyTitle)(),i=await(0,c.getBlobByType)(t);await o.DownloadPackage.single(`${e}.${t}`,i)}catch(t){(0,r.logError)(t)}finally{this.disabled=!1}}}}),u=(0,i(900).Z)(d,n,[],!1,null,null,null);u.options.__file=\\\"registry/lib/components/video/danmaku/download/DownloadDanmaku.vue\\\";var p=u.exports},290:function(t,e,i){\\\"use strict\\\";i.r(e),i.d(e,{default:function(){return m}});var n=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i(\\\"div\\\",{staticClass:\\\"download-danmaku-config download-video-config-section\\\"},[i(\\\"div\\\",{staticClass:\\\"download-video-config-item\\\"},[i(\\\"div\\\",{staticClass:\\\"download-video-config-title\\\"},[t._v(\\\"\\\\n      ÂºπÂπï:\\\\n    \\\")]),t._v(\\\" \\\"),i(\\\"VDropdown\\\",{attrs:{items:t.items},scopedSlots:t._u([{key:\\\"item\\\",fn:function(e){var i=e.item;return[t._v(\\\"\\\\n        \\\"+t._s(i)+\\\"\\\\n      \\\")]}}]),model:{value:t.type,callback:function(e){t.type=e},expression:\\\"type\\\"}})],1)])};n._withStripped=!0;var o=coreApis.settings,r=i(648);const a=(0,o.getComponentSettings)(\\\"downloadVideo\\\").options;var s=Vue.extend({components:{VDropdown:r.VDropdown},data:()=>({type:a.danmakuType??\\\"Êó†\\\",items:[\\\"Êó†\\\",\\\"ass\\\",\\\"json\\\",\\\"xml\\\"]}),computed:{enabled(){return\\\"Êó†\\\"!==this.type}},watch:{type(t){a.danmakuType=t}}}),l=i(379),c=i.n(l),d=i(29),u=i.n(d),p={insert:\\\"head\\\",singleton:!1},h=(c()(u(),p),u().locals,(0,i(900).Z)(s,n,[],!1,null,null,null));h.options.__file=\\\"registry/lib/components/video/danmaku/download/Plugin.vue\\\";var m=h.exports},900:function(t,e,i){\\\"use strict\\\";function n(t,e,i,n,o,r,a,s){var l,c=\\\"function\\\"==typeof t?t.options:t;if(e&&(c.render=e,c.staticRenderFns=i,c._compiled=!0),n&&(c.functional=!0),r&&(c._scopeId=\\\"data-v-\\\"+r),a?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\\\"undefined\\\"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},c._ssrRegister=l):o&&(l=s?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(t,e){return l.call(e),d(t,e)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:t,options:c}}i.d(e,{Z:function(){return n}})},648:function(t){\\\"use strict\\\";t.exports=coreApis.ui},414:function(t){\\\"use strict\\\";t.exports=coreApis.utils.log},674:function(t){\\\"use strict\\\";t.exports=coreApis.utils.title}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={id:n,exports:{}};return t[n](r,r.exports,i),r.exports}i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,{a:e}),e},i.d=function(t,e){for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})};var n={};return function(){\\\"use strict\\\";i.d(n,{component:function(){return r}});var t=coreApis.spinQuery,e=coreApis.toast,o=coreApis.utils.urls;const r={name:\\\"downloadDanmaku\\\",displayName:\\\"‰∏ãËΩΩÂºπÂπï\\\",description:{\\\"zh-CN\\\":\\\"ÂêØÁî®‰∏ãËΩΩÂºπÂπïÊîØÊåÅ, Âú®ËßÜÈ¢ëÂíåÁï™ÂâßÈ°µÈù¢‰∏≠ÂèØ‰ªéÂäüËÉΩÈù¢ÊùøÈáå‰∏ãËΩΩÂºπÂπï. ËØ∑Ê≥®ÊÑè ASS ÂºπÂπï‰∏ãËΩΩ‰∏ç‰ºöÂåÖÂê´È´òÁ∫ßÂºπÂπï, Â≠óÂπïÂºπÂπïÁ≠â.\\\"},tags:[componentsTags.video],entry:none,reload:none,unload:none,plugin:{displayName:\\\"‰∏ãËΩΩËßÜÈ¢ë - ‰∏ãËΩΩÂºπÂπïÊîØÊåÅ\\\",setup:t=>{let{addData:n}=t;n(\\\"downloadVideo.assets\\\",(async t=>{const{getBlobByType:n}=await Promise.resolve().then(i.bind(i,570));t.push({name:\\\"downloadDanmaku\\\",displayName:\\\"‰∏ãËΩΩÂºπÂπï\\\",getAssets:async(t,i)=>{const{type:o,enabled:r}=i;if(!r)return[];const a=e.Toast.info(\\\"Ëé∑ÂèñÂºπÂπï‰∏≠...\\\",\\\"‰∏ãËΩΩÂºπÂπï\\\");let s=0;const l=await Promise.allSettled(t.map((async e=>{const i=await n(o,e.input);return s++,a.message=`Ëé∑ÂèñÂºπÂπï‰∏≠... (${s}/${t.length})`,{name:`${e.input.title}.${o}`,data:i}}))),c=l.filter((t=>\\\"fulfilled\\\"===t.status)),d=l.filter((t=>\\\"rejected\\\"===t.status));return a.message=`Ëé∑ÂèñÂÆåÊàê. ÊàêÂäü ${c.length} ‰∏™, Â§±Ë¥• ${d.length} ‰∏™.`,c.map((t=>t.value))},component:()=>Promise.resolve().then(i.bind(i,290)).then((t=>t.default))})}))}},urlInclude:o.videoAndBangumiUrls,widget:{condition:t.hasVideo,component:()=>Promise.resolve().then(i.bind(i,627)).then((t=>t.default))},commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"}}(),n=n.component}()}));\",\"metadata\": {\"name\": \"downloadDanmaku\",\"displayName\": \"‰∏ãËΩΩÂºπÂπï\",\"description\": {\"zh-CN\": \"ÂêØÁî®‰∏ãËΩΩÂºπÂπïÊîØÊåÅ, Âú®ËßÜÈ¢ëÂíåÁï™ÂâßÈ°µÈù¢‰∏≠ÂèØ‰ªéÂäüËÉΩÈù¢ÊùøÈáå‰∏ãËΩΩÂºπÂπï. ËØ∑Ê≥®ÊÑè ASS ÂºπÂπï‰∏ãËΩΩ‰∏ç‰ºöÂåÖÂê´È´òÁ∫ßÂºπÂπï, Â≠óÂπïÂºπÂπïÁ≠â.\"},\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1}],\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {}}},\"downloadLiveRecords\": {\"code\": \"!function(e,o){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=o():\\\"function\\\"==typeof define&&define.amd?define([],o):\\\"object\\\"==typeof exports?exports[\\\"live/download-records\\\"]=o():e[\\\"live/download-records\\\"]=o()}(self,(function(){return function(){\\\"use strict\\\";var e={65:function(e,o,t){t.r(o),t.d(o,{default:function(){return l}});var n=function(){var e=this,o=e.$createElement;return(e._self._c||o)(\\\"DefaultWidget\\\",{staticClass:\\\"download-live-records\\\",attrs:{disabled:e.disabled,name:\\\"‰∏ãËΩΩÂΩïÂÉè\\\",icon:\\\"mdi-download\\\"},on:{click:function(o){return e.download()}}})};n._withStripped=!0;var r=coreApis.ui,i=coreApis.ajax,d=coreApis.toast,s=coreApis.utils.log;var a=function(e,o,t,n,r,i,d,s){var a,l=\\\"function\\\"==typeof e?e.options:e;if(o&&(l.render=o,l.staticRenderFns=t,l._compiled=!0),n&&(l.functional=!0),i&&(l._scopeId=\\\"data-v-\\\"+i),d?(a=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\\\"undefined\\\"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(d)},l._ssrRegister=a):r&&(a=s?function(){r.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:r),a)if(l.functional){l._injectStyles=a;var c=l.render;l.render=function(e,o){return a.call(o),c(e,o)}}else{var f=l.beforeCreate;l.beforeCreate=f?[].concat(f,a):[a]}return{exports:e,options:l}}(Vue.extend({components:{DefaultWidget:r.DefaultWidget},data:()=>({disabled:!1}),methods:{async download(){try{this.disabled=!0;const e=document.URL.replace(window.location.search,\\\"\\\").match(/^https:\\\\/\\\\/live\\\\.bilibili\\\\.com\\\\/record\\\\/(.+)/);if(!e)return void(0,s.logError)(new Error(`Ëé∑ÂèñÂΩïÂÉèIDÂ§±Ë¥•: ${document.URL}`));const o=e[1],t=await(0,i.getJson)(`https://api.live.bilibili.com/xlive/web-room/v1/record/getLiveRecordUrl?rid=${o}&platform=html5`);if(0!==t.code)return void(0,s.logError)(new Error(`Ëé∑ÂèñÂΩïÂÉèÈìæÊé•Â§±Ë¥•: ${t.message}`));const n=t.data.list.map((e=>e.url));d.Toast.success(n.map((e=>`<a class=\\\"download-link\\\" target=\\\"_blank\\\" href=\\\"${e}\\\">${e}</a>`)).join(\\\"\\\\n\\\"),\\\"‰∏ãËΩΩÂΩïÂÉè\\\")}finally{this.disabled=!1}}}}),n,[],!1,null,null,null);a.options.__file=\\\"registry/lib/components/live/download-records/DownloadRecords.vue\\\";var l=a.exports}},o={};function t(n){var r=o[n];if(void 0!==r)return r.exports;var i=o[n]={exports:{}};return e[n](i,i.exports,t),i.exports}t.d=function(e,o){for(var n in o)t.o(o,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:o[n]})},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})};var n={};return function(){t.d(n,{component:function(){return e}});const e=(0,coreApis.componentApis.define.defineComponentMetadata)({name:\\\"downloadLiveRecords\\\",displayName:\\\"Áõ¥Êí≠ÂΩïÂÉè‰∏ãËΩΩ\\\",description:{\\\"zh-CN\\\":\\\"Âú®Áõ¥Êí≠ÂΩïÂÉèÈ°µÈù¢ `live.bilibili.com/record/` ‰∏≠Ê∑ªÂä†‰∏ãËΩΩÊîØÊåÅ.\\\"},tags:[componentsTags.live],entry:none,widget:{component:()=>Promise.resolve().then(t.bind(t,65)).then((e=>e.default))},urlInclude:[/^https:\\\\/\\\\/live\\\\.bilibili\\\\.com\\\\/record\\\\/(.+)/],commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"})}(),n=n.component}()}));\",\"metadata\": {\"name\": \"downloadLiveRecords\",\"displayName\": \"Áõ¥Êí≠ÂΩïÂÉè‰∏ãËΩΩ\",\"description\": {\"zh-CN\": \"Âú®Áõ¥Êí≠ÂΩïÂÉèÈ°µÈù¢ `live.bilibili.com/record/` ‰∏≠Ê∑ªÂä†‰∏ãËΩΩÊîØÊåÅ.\"},\"tags\": [{\"name\": \"live\",\"displayName\": \"Áõ¥Êí≠\",\"color\": \"#26A69A\",\"icon\": \"mdi-video-wireless-outline\",\"order\": 4}],\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {}}},\"downloadSubtitle\": {\"code\": \"!function(t,e){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=e():\\\"function\\\"==typeof define&&define.amd?define([],e):\\\"object\\\"==typeof exports?exports[\\\"video/subtitle/download\\\"]=e():t[\\\"video/subtitle/download\\\"]=e()}(self,(function(){return function(){var t,e,n={550:function(t,e,n){\\\"use strict\\\";n.d(e,{mE:function(){return c}});var o=coreApis.ajax,i=n(391),r=n(674);const a=async()=>{const{SubtitleConverter:t,SubtitleSize:e,SubtitleLocation:o}=await Promise.resolve().then(n.bind(n,941)),{playerAgent:i}=await Promise.resolve().then(n.t.bind(n,833,23)),a=localStorage.getItem(\\\"bilibili_player_settings\\\");if(!a)return[t.defaultConfig,\\\"\\\"];const s=JSON.parse(a).subtitle,c=s.lan,l=(0,r.getFriendlyTitle)(!0),u={.6:e.VerySmall,.8:e.Small,1:e.Medium,1.3:e.Large,1.6:e.VeryLarge}[s.fontsize],d=s.color.toString(16),f=s.backgroundopacity,p={bc:o.BottomCenter,bl:o.BottomLeft,br:o.BottomRight,tc:o.TopCenter,tl:o.TopLeft,tr:o.TopRight}[s.position],g=i.query.video.element.sync();return[{title:l,height:g.videoHeight,width:g.videoWidth,color:d,location:p,opacity:f,size:u,boxPadding:1,boxMargin:32},c]},s=async(t,e)=>{const{VideoInfo:o}=await Promise.resolve().then(n.t.bind(n,77,23)),i=new o(t);return i.cid=\\\"string\\\"==typeof e?parseInt(e):e,await i.fetchInfo(),i.subtitles},c=async function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{...lodash.pick(unsafeWindow,\\\"aid\\\",\\\"cid\\\"),title:(0,r.getFriendlyTitle)(!0)};const{aid:c,cid:l}=e;if(!c||!l)throw new Error(\\\"Êú™ÊâæÂà∞ËßÜÈ¢ëAIDÂíåCID\\\");const u=await s(c,l);if(0===u.length)return i.Toast.info(\\\"ÂΩìÂâçËßÜÈ¢ëÊ≤°ÊúâÂ≠óÂπï.\\\",\\\"‰∏ãËΩΩÂ≠óÂπï\\\",3e3),null;const[d,f]=await a(),p=u.find((t=>t.language===f))||u[0],g=await(0,o.getJson)(p.url),v=g.body;if(\\\"ass\\\"===t){const{SubtitleConverter:t}=await Promise.resolve().then(n.bind(n,941)),o=new t({...d,title:e.title}),i=await o.convertToAss(v);return new Blob([i],{type:\\\"text/ass\\\"})}return new Blob([JSON.stringify(v)],{type:\\\"text/json\\\"})}},941:function(t,e,n){\\\"use strict\\\";function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.r(e),n.d(e,{SubtitleConverter:function(){return a},SubtitleLocation:function(){return i},SubtitleSize:function(){return r}});const i={TopLeft:7,TopCenter:8,TopRight:9,BottomLeft:1,BottomCenter:2,BottomRight:3};let r;!function(t){t[t.VerySmall=1]=\\\"VerySmall\\\",t[t.Small=2]=\\\"Small\\\",t[t.Medium=3]=\\\"Medium\\\",t[t.Large=4]=\\\"Large\\\",t[t.VeryLarge=5]=\\\"VeryLarge\\\"}(r||(r={}));class a{constructor(t){o(this,\\\"config\\\",void 0),this.config=Object.assign(a.defaultConfig,t)}async getAssMeta(){const{convertHexColorForStyle:t}=await Promise.resolve().then(n.t.bind(n,726,23)),e=t(this.config.color),o=t(\\\"#000000\\\",this.config.opacity),r=[],a=(10*(this.config.size-3)+48)*this.config.height/720;console.log(a);for(const[t,n]of Object.entries(i))r.push(`Style: ${t},ÂæÆËΩØÈõÖÈªë,${a},${e},${e},${o},${o},0,0,0,0,100,100,0,0,3,${this.config.boxPadding},0,${n},${this.config.boxMargin},${this.config.boxMargin},${this.config.boxMargin},0`);return`\\\\n[Script Info]\\\\n; Script generated by Bilibili Evolved Danmaku Converter\\\\n; https://github.com/the1812/Bilibili-Evolved/\\\\nTitle: ${this.config.title}\\\\nScriptType: v4.00+\\\\nPlayResX: ${this.config.width}\\\\nPlayResY: ${this.config.height}\\\\nTimer: 10.0000\\\\nWrapStyle: 0\\\\nScaledBorderAndShadow: no\\\\n\\\\n[V4+ Styles]\\\\nFormat: Name, Fontname, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\\\\n${r.join(\\\"\\\\n\\\")}\\\\n\\\\n[Events]\\\\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text`.trim()}async convertToAss(t){const{convertTimeByEndTime:e,normalizeContent:o}=await Promise.resolve().then(n.t.bind(n,726,23));return`${await this.getAssMeta()}\\\\n${t.map((t=>{const[n,r]=e(t.from,t.to);var a;return`Dialogue: 0,${n},${r},${a=this.config.location,Object.entries(i).filter((t=>{let[,e]=t;return e===a})).map((t=>{let[e]=t;return e})).shift()},,0,0,0,,${o(t.content)}`})).join(\\\"\\\\n\\\")}`}}o(a,\\\"defaultConfig\\\",void 0),a.defaultConfig={title:\\\"\\\",color:\\\"#ffffff\\\",width:1920,height:1080,size:r.Medium,opacity:.5,location:i.BottomCenter,boxPadding:1,boxMargin:32}},427:function(t,e,n){var o=n(645)((function(t){return t[1]}));o.push([t.id,\\\".download-subtitle-config.download-video-config-section .be-dropdown {\\\\n  text-transform: uppercase;\\\\n}\\\",\\\"\\\"]),t.exports=o},645:function(t){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\nt.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?\\\"@media \\\".concat(e[2],\\\" {\\\").concat(n,\\\"}\\\"):n})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\ne.i=function(t,n,o){\\\"string\\\"==typeof t&&(\\n// eslint-disable-next-line no-param-reassign\\nt=[[null,t,\\\"\\\"]]);var i={};if(o)for(var r=0;r<this.length;r++){\\n// eslint-disable-next-line prefer-destructuring\\nvar a=this[r][0];null!=a&&(i[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);o&&i[c[0]]||(n&&(c[2]?c[2]=\\\"\\\".concat(n,\\\" and \\\").concat(c[2]):c[2]=n),e.push(c))}},e}},379:function(t,e,n){\\\"use strict\\\";var o,i=function(){return void 0===o&&(\\n// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\\n// @see https://github.com/webpack-contrib/style-loader/issues/177\\no=Boolean(window&&document&&document.all&&!window.atob)),o},r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function s(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},o=[],i=0;i<t.length;i++){var r=t[i],c=e.base?r[0]+e.base:r[0],l=n[c]||0,u=\\\"\\\".concat(c,\\\" \\\").concat(l);n[c]=l+1;var d=s(u),f={css:r[1],media:r[2],sourceMap:r[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:u,updater:m(f,e),references:1}),o.push(u)}return o}function l(t){var e=document.createElement(\\\"style\\\"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),\\\"function\\\"==typeof t.insert)t.insert(e);else{var a=r(t.insert||\\\"head\\\");if(!a)throw new Error(\\\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\\\");a.appendChild(e)}return e}var u,d=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join(\\\"\\\\n\\\")});function f(t,e,n,o){var i=n?\\\"\\\":o.media?\\\"@media \\\".concat(o.media,\\\" {\\\").concat(o.css,\\\"}\\\"):o.css;if(t.styleSheet)t.styleSheet.cssText=d(e,i);else{var r=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(r,a[e]):t.appendChild(r)}}function p(t,e,n){var o=n.css,i=n.media,r=n.sourceMap;if(i?t.setAttribute(\\\"media\\\",i):t.removeAttribute(\\\"media\\\"),r&&\\\"undefined\\\"!=typeof btoa&&(o+=\\\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r)))),\\\" */\\\")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var g=null,v=0;function m(t,e){var n,o,i;if(e.singleton){var r=v++;n=g||(g=l(e)),o=f.bind(null,n,r,!1),i=f.bind(null,n,r,!0)}else n=l(e),o=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||\\\"boolean\\\"==typeof e.singleton||(e.singleton=i());var n=c(t=t||[],e);return function(t){if(t=t||[],\\\"[object Array]\\\"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var i=s(n[o]);a[i].references--}for(var r=c(t,e),l=0;l<n.length;l++){var u=s(n[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=r}}}},202:function(t,e,n){\\\"use strict\\\";n.r(e),n.d(e,{default:function(){return f}});var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\\\"div\\\",{staticClass:\\\"multiple-widgets\\\"},[n(\\\"DefaultWidget\\\",{attrs:{disabled:t.disabled,name:\\\"‰∏ãËΩΩÂ≠óÂπï (JSON)\\\",icon:\\\"subtitle\\\"},on:{click:function(e){return t.download(\\\"json\\\")}}}),t._v(\\\" \\\"),n(\\\"DefaultWidget\\\",{attrs:{disabled:t.disabled,name:\\\"‰∏ãËΩΩÂ≠óÂπï (ASS)\\\",icon:\\\"subtitle\\\"},on:{click:function(e){return t.download(\\\"ass\\\")}}})],1)};o._withStripped=!0;var i=coreApis.pluginApis.data,r=n(648),a=coreApis.utils.log,s=n(674),c=coreApis.download,l=n(550);(0,i.addData)(\\\"ui.icons\\\",(t=>{t.subtitle='<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\"><path d=\\\"M4 4h14a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V6a2 2 0 012-2zm5 5.5a1 1 0 100-2H6a2 2 0 00-2 2v3a2 2 0 002 2h3a1 1 0 000-2H7a1 1 0 01-1-1v-1a1 1 0 011-1h2zm8 0a1 1 0 000-2h-3a2 2 0 00-2 2v3a2 2 0 002 2h3a1 1 0 000-2h-2a1 1 0 01-1-1v-1a1 1 0 011-1h2z\\\" fill-rule=\\\"evenodd\\\"/></svg>'}));var u=Vue.extend({components:{DefaultWidget:r.DefaultWidget},data:()=>({disabled:!1}),methods:{async download(t){try{this.disabled=!0;const e=await(0,l.mE)(t);c.DownloadPackage.single(`${(0,s.getFriendlyTitle)(!0)}.${t}`,e)}catch(t){(0,a.logError)(t)}finally{this.disabled=!1}}}}),d=(0,n(900).Z)(u,o,[],!1,null,null,null);d.options.__file=\\\"registry/lib/components/video/subtitle/download/DownloadSubtitle.vue\\\";var f=d.exports},175:function(t,e,n){\\\"use strict\\\";n.r(e),n.d(e,{default:function(){return g}});var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\\\"div\\\",{staticClass:\\\"download-subtitle-config download-video-config-section\\\"},[n(\\\"div\\\",{staticClass:\\\"download-video-config-item\\\"},[n(\\\"div\\\",{staticClass:\\\"download-video-config-title\\\"},[t._v(\\\"\\\\n      Â≠óÂπï:\\\\n    \\\")]),t._v(\\\" \\\"),n(\\\"VDropdown\\\",{attrs:{items:t.items},scopedSlots:t._u([{key:\\\"item\\\",fn:function(e){var n=e.item;return[t._v(\\\"\\\\n        \\\"+t._s(n)+\\\"\\\\n      \\\")]}}]),model:{value:t.type,callback:function(e){t.type=e},expression:\\\"type\\\"}})],1)])};o._withStripped=!0;var i=coreApis.settings,r=n(648);const a=(0,i.getComponentSettings)(\\\"downloadVideo\\\").options;var s=Vue.extend({components:{VDropdown:r.VDropdown},data:()=>({type:a.subtitleType??\\\"Êó†\\\",items:[\\\"Êó†\\\",\\\"ass\\\",\\\"json\\\"]}),computed:{enabled(){return\\\"Êó†\\\"!==this.type}},watch:{type(t){a.subtitleType=t}}}),c=n(379),l=n.n(c),u=n(427),d=n.n(u),f={insert:\\\"head\\\",singleton:!1},p=(l()(d(),f),d().locals,(0,n(900).Z)(s,o,[],!1,null,null,null));p.options.__file=\\\"registry/lib/components/video/subtitle/download/Plugin.vue\\\";var g=p.exports},900:function(t,e,n){\\\"use strict\\\";function o(t,e,n,o,i,r,a,s){var c,l=\\\"function\\\"==typeof t?t.options:t;if(e&&(l.render=e,l.staticRenderFns=n,l._compiled=!0),o&&(l.functional=!0),r&&(l._scopeId=\\\"data-v-\\\"+r),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\\\"undefined\\\"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},l._ssrRegister=c):i&&(c=s?function(){i.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:i),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(t,e){return c.call(e),u(t,e)}}else{var d=l.beforeCreate;l.beforeCreate=d?[].concat(d,c):[c]}return{exports:t,options:l}}n.d(e,{Z:function(){return o}})},726:function(t){\\\"use strict\\\";t.exports=coreApis.componentApis.video.assUtils},833:function(t){\\\"use strict\\\";t.exports=coreApis.componentApis.video.playerAgent},77:function(t){\\\"use strict\\\";t.exports=coreApis.componentApis.video.videoInfo},391:function(t){\\\"use strict\\\";t.exports=coreApis.toast},648:function(t){\\\"use strict\\\";t.exports=coreApis.ui},674:function(t){\\\"use strict\\\";t.exports=coreApis.utils.title}},o={};function i(t){var e=o[t];if(void 0!==e)return e.exports;var r=o[t]={id:t,exports:{}};return n[t](r,r.exports,i),r.exports}i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,{a:e}),e},e=Object.getPrototypeOf?function(t){return Object.getPrototypeOf(t)}:function(t){return t.__proto__},i.t=function(n,o){if(1&o&&(n=this(n)),8&o)return n;if(\\\"object\\\"==typeof n&&n){if(4&o&&n.__esModule)return n;if(16&o&&\\\"function\\\"==typeof n.then)return n}var r=Object.create(null);i.r(r);var a={};t=t||[null,e({}),e([]),e(e)];for(var s=2&o&&n;\\\"object\\\"==typeof s&&!~t.indexOf(s);s=e(s))Object.getOwnPropertyNames(s).forEach((function(t){a[t]=function(){return n[t]}}));return a.default=function(){return n},i.d(r,a),r},i.d=function(t,e){for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})};var r={};return function(){\\\"use strict\\\";i.d(r,{component:function(){return a}});var t=coreApis.spinQuery,e=i(391),n=coreApis.utils.urls,o=i(550);const a={name:\\\"downloadSubtitle\\\",displayName:\\\"‰∏ãËΩΩÂ≠óÂπï\\\",description:{\\\"zh-CN\\\":\\\"ÂêØÁî®‰∏ãËΩΩÂ≠óÂπïÊîØÊåÅ, Âú®ËßÜÈ¢ëÈ°µÈù¢‰∏≠ÂèØ‰ªéÂäüËÉΩÈù¢ÊùøÈáå‰∏ãËΩΩÂ≠óÂπï.\\\"},tags:[componentsTags.video],entry:none,urlInclude:n.videoUrls,widget:{condition:t.hasVideo,component:()=>Promise.resolve().then(i.bind(i,202)).then((t=>t.default))},plugin:{displayName:\\\"‰∏ãËΩΩËßÜÈ¢ë - ‰∏ãËΩΩÂ≠óÂπïÊîØÊåÅ\\\",setup:t=>{let{addData:n}=t;n(\\\"downloadVideo.assets\\\",(async t=>{t.push({name:\\\"downloadSubtitles\\\",displayName:\\\"‰∏ãËΩΩÂ≠óÂπï\\\",getAssets:async(t,n)=>{const{type:i,enabled:r}=n;if(!r)return[];const a=e.Toast.info(\\\"Ëé∑ÂèñÂ≠óÂπï‰∏≠...\\\",\\\"‰∏ãËΩΩÂ≠óÂπï\\\");let s=0;const c=await Promise.allSettled(t.map((async e=>{const n=await(0,o.mE)(i,e.input);return s++,a.message=`Ëé∑ÂèñÂ≠óÂπï‰∏≠... (${s}/${t.length})`,{name:`${e.input.title}.${i}`,data:n}}))),l=c.filter((t=>\\\"fulfilled\\\"===t.status)),u=c.filter((t=>\\\"rejected\\\"===t.status));return a.message=`Ëé∑ÂèñÂÆåÊàê. ÊàêÂäü ${l.length} ‰∏™, Â§±Ë¥• ${u.length} ‰∏™.`,l.map((t=>t.value))},component:()=>Promise.resolve().then(i.bind(i,175)).then((t=>t.default))})}))}},commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"}}(),r=r.component}()}));\",\"metadata\": {\"name\": \"downloadSubtitle\",\"displayName\": \"‰∏ãËΩΩÂ≠óÂπï\",\"description\": {\"zh-CN\": \"ÂêØÁî®‰∏ãËΩΩÂ≠óÂπïÊîØÊåÅ, Âú®ËßÜÈ¢ëÈ°µÈù¢‰∏≠ÂèØ‰ªéÂäüËÉΩÈù¢ÊùøÈáå‰∏ãËΩΩÂ≠óÂπï.\"},\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1}],\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {}}},\"downloadAudio\": {\"code\": \"!function(e,t){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=t():\\\"function\\\"==typeof define&&define.amd?define([],t):\\\"object\\\"==typeof exports?exports[\\\"utils/download-audio\\\"]=t():e[\\\"utils/download-audio\\\"]=t()}(self,(function(){return function(){\\\"use strict\\\";var e,t,o={395:function(e,t,o){o.r(t),o.d(t,{default:function(){return c}});var n=function(){var e=this,t=e.$createElement;return(e._self._c||t)(\\\"DefaultWidget\\\",{attrs:{disabled:e.disabled||e.downloading,name:e.progress||\\\"‰∏ãËΩΩÈü≥È¢ë\\\",icon:\\\"mdi-download\\\"},on:{click:function(t){return e.download()}}})};n._withStripped=!0;var r=coreApis.spinQuery,i=coreApis.observer,s=coreApis.download,d=coreApis.ui;function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class l{constructor(){a(this,\\\"progress\\\",null),a(this,\\\"sid\\\",void 0)}async getDownloadUrl(){const{getJsonWithCredentials:e}=await Promise.resolve().then(o.t.bind(o,375,23)),{Toast:t}=await Promise.resolve().then(o.t.bind(o,391,23)),n=`https://www.bilibili.com/audio/music-service-c/web/url?sid=${this.sid}&privilege=2&quality=2`,r=await e(n);return 0!==r.code?(t.error(\\\"Ëé∑Âèñ‰∏ãËΩΩÈìæÊé•Â§±Ë¥•, ËØ∑Á°Æ‰øùÂΩìÂâçË¥¶Âè∑Êúâ‰∏ãËΩΩÊùÉÈôê.\\\",\\\"‰∏ãËΩΩÈü≥È¢ë\\\",1e4),null):r.data.cdns.shift()}async download(){const e=await this.getDownloadUrl();return new Promise(((t,o)=>{const n=new XMLHttpRequest;n.open(\\\"GET\\\",e),n.responseType=\\\"blob\\\",n.addEventListener(\\\"load\\\",(()=>t(n.response))),n.addEventListener(\\\"error\\\",(()=>o(n.status))),n.addEventListener(\\\"progress\\\",(e=>{var t;return null===(t=this.progress)||void 0===t?void 0:t.call(this,100*e.loaded/e.total)})),n.send()}))}}var u=function(e,t,o,n,r,i,s,d){var a,l=\\\"function\\\"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=o,l._compiled=!0),n&&(l.functional=!0),i&&(l._scopeId=\\\"data-v-\\\"+i),s?(a=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\\\"undefined\\\"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s)},l._ssrRegister=a):r&&(a=d?function(){r.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:r),a)if(l.functional){l._injectStyles=a;var u=l.render;l.render=function(e,t){return a.call(t),u(e,t)}}else{var c=l.beforeCreate;l.beforeCreate=c?[].concat(c,a):[a]}return{exports:e,options:l}}(Vue.extend({components:{DefaultWidget:d.DefaultWidget},data:()=>({progress:\\\"\\\",disabled:!0,downloader:new l,downloading:!1}),async mounted(){const e=await(0,r.select)(\\\"#app\\\"),t=this.downloader;t.progress=e=>{this.progress=`${Math.round(e)}%`},(0,i.childList)(e,(()=>{const e=document.URL.match(/bilibili\\\\.com\\\\/audio\\\\/au([\\\\d]+)/);e&&e[1]?(this.disabled=!1,[,t.sid]=e):this.disabled=!0}))},methods:{async download(){if(!this.downloading){this.downloading=!0;try{const e=this.downloader;if(null===e.sid)return;const t=await e.download(),o=`${(()=>{const e=document.querySelector(\\\".song-title\\\");return e?e.getAttribute(\\\"title\\\"):\\\"Á•ûÁßòÈü≥È¢ë\\\"})()}.mp3`;this.progress=\\\"\\\",await s.DownloadPackage.single(o,t)}finally{this.downloading=!1}}}}}),n,[],!1,null,null,null);u.options.__file=\\\"registry/lib/components/utils/download-audio/DownloadAudio.vue\\\";var c=u.exports},375:function(e){e.exports=coreApis.ajax},391:function(e){e.exports=coreApis.toast}},n={};function r(e){var t=n[e];if(void 0!==t)return t.exports;var i=n[e]={exports:{}};return o[e](i,i.exports,r),i.exports}t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},r.t=function(o,n){if(1&n&&(o=this(o)),8&n)return o;if(\\\"object\\\"==typeof o&&o){if(4&n&&o.__esModule)return o;if(16&n&&\\\"function\\\"==typeof o.then)return o}var i=Object.create(null);r.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var d=2&n&&o;\\\"object\\\"==typeof d&&!~e.indexOf(d);d=t(d))Object.getOwnPropertyNames(d).forEach((function(e){s[e]=function(){return o[e]}}));return s.default=function(){return o},r.d(i,s),i},r.d=function(e,t){for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})};var i={};return function(){r.d(i,{component:function(){return e}});const e={name:\\\"downloadAudio\\\",displayName:\\\"‰∏ãËΩΩÈü≥È¢ë\\\",entry:none,tags:[componentsTags.utils],description:{\\\"zh-CN\\\":\\\"\\\\nÂºÄÂêØÈü≥È¢ë‰∏ãËΩΩÊîØÊåÅ, Èü≥È¢ëÈ°µÈù¢‰∏≠ÂèØ‰ª•Âú®ÂäüËÉΩÈù¢Êùø‰∏≠‰∏ãËΩΩÂΩìÂâçÈü≥È¢ë.\\\\n\\\\n> ÈúÄË¶ÅËøõÂÖ•Èü≥È¢ëÁöÑËØ¶ÁªÜ‰ø°ÊÅØÈ°µÈù¢ÊâçËÉΩ‰∏ãËΩΩ, Âú®ÂÖ∂‰ªñÈ°µÈù¢‰∏≠Ê≠§ÊåâÈíÆÂ∞Ü‰∏çÂèØÁÇπÂáª.\\\\n    \\\".trim()},widget:{component:()=>Promise.resolve().then(r.bind(r,395)).then((e=>e.default))},urlInclude:[\\\"//www.bilibili.com/audio/\\\"],commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"}}(),i=i.component}()}));\",\"metadata\": {\"name\": \"downloadAudio\",\"displayName\": \"‰∏ãËΩΩÈü≥È¢ë\",\"tags\": [{\"name\": \"utils\",\"displayName\": \"Â∑•ÂÖ∑\",\"color\": \"#A36FFD\",\"icon\": \"mdi-rocket-launch-outline\",\"order\": 5}],\"description\": {\"zh-CN\": \"ÂºÄÂêØÈü≥È¢ë‰∏ãËΩΩÊîØÊåÅ, Èü≥È¢ëÈ°µÈù¢‰∏≠ÂèØ‰ª•Âú®ÂäüËÉΩÈù¢Êùø‰∏≠‰∏ãËΩΩÂΩìÂâçÈü≥È¢ë.\\n\\n> ÈúÄË¶ÅËøõÂÖ•Èü≥È¢ëÁöÑËØ¶ÁªÜ‰ø°ÊÅØÈ°µÈù¢ÊâçËÉΩ‰∏ãËΩΩ, Âú®ÂÖ∂‰ªñÈ°µÈù¢‰∏≠Ê≠§ÊåâÈíÆÂ∞Ü‰∏çÂèØÁÇπÂáª.\"},\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {}}},\"alwaysShowDuration\": {\"code\": \"!function(t,e){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=e():\\\"function\\\"==typeof define&&define.amd?define([],e):\\\"object\\\"==typeof exports?exports[\\\"style/always-show-duration\\\"]=e():t[\\\"style/always-show-duration\\\"]=e()}(self,(function(){return function(){var t,e,n={524:function(t,e,n){var o=n(645)((function(t){return t[1]}));o.push([t.id,\\\".watchlater-card .duration,\\\\n.time-group-item .duration,\\\\n.favorite-card .duration,\\\\n.video-card .duration {\\\\n  opacity: 1 !important;\\\\n}\\\",\\\"\\\"]),t.exports=o},645:function(t){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\nt.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?\\\"@media \\\".concat(e[2],\\\" {\\\").concat(n,\\\"}\\\"):n})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\ne.i=function(t,n,o){\\\"string\\\"==typeof t&&(\\n// eslint-disable-next-line no-param-reassign\\nt=[[null,t,\\\"\\\"]]);var r={};if(o)for(var i=0;i<this.length;i++){\\n// eslint-disable-next-line prefer-destructuring\\nvar u=this[i][0];null!=u&&(r[u]=!0)}for(var c=0;c<t.length;c++){var a=[].concat(t[c]);o&&r[a[0]]||(n&&(a[2]?a[2]=\\\"\\\".concat(n,\\\" and \\\").concat(a[2]):a[2]=n),e.push(a))}},e}},151:function(t,e,n){var o=n(524);o&&o.__esModule&&(o=o.default),t.exports=\\\"string\\\"==typeof o?o:o.toString()}},o={};function r(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={id:t,exports:{}};return n[t](i,i.exports,r),i.exports}e=Object.getPrototypeOf?function(t){return Object.getPrototypeOf(t)}:function(t){return t.__proto__},r.t=function(n,o){if(1&o&&(n=this(n)),8&o)return n;if(\\\"object\\\"==typeof n&&n){if(4&o&&n.__esModule)return n;if(16&o&&\\\"function\\\"==typeof n.then)return n}var i=Object.create(null);r.r(i);var u={};t=t||[null,e({}),e([]),e(e)];for(var c=2&o&&n;\\\"object\\\"==typeof c&&!~t.indexOf(c);c=e(c))Object.getOwnPropertyNames(c).forEach((function(t){u[t]=function(){return n[t]}}));return u.default=function(){return n},r.d(i,u),i},r.d=function(t,e){for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})};var i={};return function(){\\\"use strict\\\";r.d(i,{component:function(){return e}});var t=coreApis.componentApis.styledComponent;const e=(0,coreApis.componentApis.define.defineComponentMetadata)({...(0,t.toggleStyle)(\\\"alwaysShowDuration\\\",(()=>Promise.resolve().then(r.t.bind(r,151,23)))),displayName:\\\"ÊÄªÊòØÊòæÁ§∫ËßÜÈ¢ëÊó∂Èïø\\\",description:{\\\"zh-CN\\\":\\\"‰ΩøËÑöÊú¨Â±ïÁ§∫ÁöÑÂêÑÁßçËßÜÈ¢ëÂç°Áâá‰∏≠ÁöÑÊó∂ÈïøÊó†ÈúÄÈº†Ê†áÁªèËøá‰πüËÉΩ‰∏ÄÁõ¥ÊòæÁ§∫.\\\"},tags:[componentsTags.video,componentsTags.style],commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"})}(),i=i.component}()}));\",\"metadata\": {\"name\": \"alwaysShowDuration\",\"displayName\": \"ÊÄªÊòØÊòæÁ§∫ËßÜÈ¢ëÊó∂Èïø\",\"description\": {\"zh-CN\": \"‰ΩøËÑöÊú¨Â±ïÁ§∫ÁöÑÂêÑÁßçËßÜÈ¢ëÂç°Áâá‰∏≠ÁöÑÊó∂ÈïøÊó†ÈúÄÈº†Ê†áÁªèËøá‰πüËÉΩ‰∏ÄÁõ¥ÊòæÁ§∫.\"},\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1},{\"name\": \"style\",\"displayName\": \"Ê†∑Âºè\",\"color\": \"#8BC34A\",\"icon\": \"mdi-palette-outline\",\"order\": 2}],\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {}}},\"simplifyLiveroom\": {\"code\": \"!function(i,e){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=e():\\\"function\\\"==typeof define&&define.amd?define([],e):\\\"object\\\"==typeof exports?exports[\\\"style/simplify/live\\\"]=e():i[\\\"style/simplify/live\\\"]=e()}(self,(function(){return function(){var i,e,t={506:function(i,e,t){\\\"use strict\\\";t.r(e),t.d(e,{setupSkinSimplify:function(){return r}});var n=coreApis.settings,o=coreApis.spinQuery;const r=async()=>{(0,n.addComponentListener)(\\\"simplifyLiveroom.switch-skin\\\",(async i=>{const e=await(0,o.select)(\\\"#skin-css\\\");e&&(e.media=i?\\\"none\\\":\\\"all\\\")}),!0)}},978:function(i,e,t){var n=t(645)((function(i){return i[1]}));n.push([i.id,\\\".simplifyLiveroom-switch-vip .vip-icon, .simplifyLiveroom-switch-fansMedal .fans-medal-item-ctnr, .simplifyLiveroom-switch-title .title-label, .simplifyLiveroom-switch-userLevel .user-level-icon, .simplifyLiveroom-switch-guard .chat-history-panel .guard-icon, .simplifyLiveroom-switch-systemMessage .system-msg, .simplifyLiveroom-switch-systemMessage .announcement-wrapper, .simplifyLiveroom-switch-welcomeMessage .welcome-guard, .simplifyLiveroom-switch-welcomeMessage .welcome-msg, .simplifyLiveroom-switch-popup .chat-popups-section, .simplifyLiveroom-switch-popup #chat-draw-area-vm, .simplifyLiveroom-switch-giftMessage .chat-item.gift-item, .simplifyLiveroom-switch-giftMessage .chat-history-panel .penury-gift-msg, .simplifyLiveroom-switch-guardPurchase .chat-item.guard-buy, .simplifyLiveroom-switch-eventsBanner .z-section-blocks .left-container .flip-view, .simplifyLiveroom-switch-eventsBanner .activity-pushing-out, .simplifyLiveroom-switch-userEffect .live-room-app .aside-area .activity-welcome-section, .simplifyLiveroom-switch-kanban .live-haruna-ctnr, .simplifyLiveroom-switch-enterPrompt .chat-item.important-prompt-item, .simplifyLiveroom-switch-enterPrompt .chat-history-panel .brush-prompt, .simplifyLiveroom-switch-enterPrompt .chat-item.convention-msg, .simplifyLiveroom-switch-pk .chaos-pk, .simplifyLiveroom-switch-topRank .chat-item.top3-notice, .simplifyLiveroom-switch-topRank .chat-item .rank-icon {\\\\n  display: none !important;\\\\n}\\\\n\\\\n.simplifyLiveroom-switch-headerPanel .control-panel-ctnr .dialog-ctnr {\\\\n  z-index: 800 !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .player-ctnr .room-info-ctnr {\\\\n  display: inline-flex !important;\\\\n  flex: 1 0 auto;\\\\n  align-items: center !important;\\\\n  margin-left: 12px !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .head-info-section {\\\\n  height: 52px !important;\\\\n  box-sizing: content-box !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .header-info-ctnr {\\\\n  display: flex !important;\\\\n  padding: 10px 24px 10px 12px !important;\\\\n  height: auto !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .header-info-ctnr .blive-avatar-icons,\\\\n.simplifyLiveroom-switch-headerPanel .header-info-ctnr .face-pendants {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .header-info-ctnr .blive-avatar-pendant {\\\\n  width: 48px !important;\\\\n  height: 48px !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .header-info-ctnr .blive-avatar-face,\\\\n.simplifyLiveroom-switch-headerPanel .header-info-ctnr .blive-avatar,\\\\n.simplifyLiveroom-switch-headerPanel .header-info-ctnr .avatar {\\\\n  height: 32px !important;\\\\n  width: 32px !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .room-cover {\\\\n  width: 32px !important;\\\\n  height: 32px !important;\\\\n  border-radius: 50% !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr {\\\\n  display: flex !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row {\\\\n  display: flex !important;\\\\n  align-items: center !important;\\\\n  flex: 1 0 auto !important;\\\\n  flex-direction: row-reverse !important;\\\\n  position: static !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .left-ctnr,\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .normal-mode,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .left-ctnr,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .normal-mode {\\\\n  position: absolute !important;\\\\n  left: 50% !important;\\\\n  transform: translateX(-50%) !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .live-area,\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .area-text,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .live-area,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .area-text {\\\\n  display: inline-flex !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .right-ctnr,\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .upper-right-ctnr,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .right-ctnr,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .upper-right-ctnr {\\\\n  position: static !important;\\\\n  transform: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .live-title,\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .room-title,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .live-title,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .room-title {\\\\n  display: flex !important;\\\\n  align-items: center !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .live-title .text,\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .room-title .text,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .live-title .text,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .room-title .text {\\\\n  line-height: normal !important;\\\\n}\\\\n@media screen and (max-width: 1750px) {\\\\n  .simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .live-title .title-length-limit,\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .room-title .title-length-limit,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .live-title .title-length-limit,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .room-title .title-length-limit {\\\\n    max-width: 250px !important;\\\\n  }\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .upper-row .info-section,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-upper-row .info-section {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .lower-row,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-down-row {\\\\n  margin: 0 !important;\\\\n  order: -1;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .lower-row .right-ctnr,\\\\n.simplifyLiveroom-switch-headerPanel .rows-ctnr .lower-row .left-ctnr > :nth-child(n+3),\\\\n.simplifyLiveroom-switch-headerPanel .room-info-down-row .right-ctnr,\\\\n.simplifyLiveroom-switch-headerPanel .room-info-down-row .left-ctnr > :nth-child(n+3) {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .room-owner-username {\\\\n  max-width: 150px !important;\\\\n}\\\\n.simplifyLiveroom-switch-headerPanel .live-status,\\\\n.simplifyLiveroom-switch-headerPanel .live-status-label {\\\\n  display: none !important;\\\\n}\\\\n\\\\n.simplifyLiveroom-switch-giftMessage:not(.simplifyLiveroom-switch-enterPrompt) .chat-history-list.with-penury-gift:not(.with-brush-prompt) {\\\\n  height: 100% !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftMessage:not(.simplifyLiveroom-switch-enterPrompt) .chat-history-list.with-penury-gift.with-brush-prompt {\\\\n  height: calc(100% - 32px) !important;\\\\n}\\\\n\\\\n.simplifyLiveroom-switch-enterPrompt:not(.simplifyLiveroom-switch-giftMessage) .chat-history-list.with-brush-prompt:not(.with-penury-gift) {\\\\n  height: 100% !important;\\\\n}\\\\n.simplifyLiveroom-switch-enterPrompt:not(.simplifyLiveroom-switch-giftMessage) .chat-history-list.with-brush-prompt.with-penury-gift {\\\\n  height: calc(100% - 32px) !important;\\\\n}\\\\n\\\\n.simplifyLiveroom-switch-enterPrompt.simplifyLiveroom-switch-giftMessage .chat-history-list {\\\\n  height: 100% !important;\\\\n}\\\\n\\\\n.simplifyLiveroom-switch-rankList .live-room-app .rank-list-section {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-rankList .live-room-app .chat-history-panel {\\\\n  height: calc(100% - 145px) !important;\\\\n}\\\\n.simplifyLiveroom-switch-rankList .live-room-app .chat-history-panel .chat-history-list::-webkit-scrollbar-track {\\\\n  background: transparent !important;\\\\n}\\\\n.simplifyLiveroom-switch-rankList .live-room-app .chat-history-panel,\\\\n.simplifyLiveroom-switch-rankList .live-room-app #pay-note-panel-vm .pay-note-panel,\\\\n.simplifyLiveroom-switch-rankList .live-room-app #pay-note-panel-vm .pay-note-panel .detail-info .mask {\\\\n  border-radius: 11px 11px 0 0 !important;\\\\n}\\\\n.simplifyLiveroom-switch-rankList.player-full-win .chat-history-panel,\\\\n.simplifyLiveroom-switch-rankList.player-full-win #pay-note-panel-vm .pay-note-panel,\\\\n.simplifyLiveroom-switch-rankList.player-full-win #pay-note-panel-vm .pay-note-panel .detail-info .mask {\\\\n  border-radius: 0 !important;\\\\n}\\\\n\\\\n.simplifyLiveroom-switch-giftPanel .gift-panel,\\\\n.simplifyLiveroom-switch-giftPanel .gift-panel-switch,\\\\n.simplifyLiveroom-switch-giftPanel .gift-section.guard-ent,\\\\n.simplifyLiveroom-switch-giftPanel .seeds-wrap > .dp-i-block > .item:not(.seeds),\\\\n.simplifyLiveroom-switch-giftPanel .gift-control-panel .wish-icon,\\\\n.simplifyLiveroom-switch-giftPanel .gift-control-panel .wish-tip {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .gift-control-section,\\\\n.simplifyLiveroom-switch-giftPanel .gift-control-panel {\\\\n  height: 48px !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box {\\\\n  display: flex !important;\\\\n  align-items: center !important;\\\\n  padding: 10px 0 0 16px !important;\\\\n  max-height: 36px !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .draw-box-pic,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .anchor-lot-icon,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .box-icon,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .draw-box-pic,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .anchor-lot-icon,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .box-icon,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .draw-box-pic,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .anchor-lot-icon,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .box-icon {\\\\n  margin: 0 !important;\\\\n  width: 24px !important;\\\\n  height: 24px !important;\\\\n  background-position: 0 -2.5px !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .draw-box-pic.open,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .anchor-lot-icon.open,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .box-icon.open,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .draw-box-pic.open,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .anchor-lot-icon.open,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .box-icon.open,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .draw-box-pic.open,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .anchor-lot-icon.open,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .box-icon.open {\\\\n  background-position: 0 -1px !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .draw-box-pic,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .draw-box-pic,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .draw-box-pic {\\\\n  transform: scale(1.1);\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box #BLRHH_treasure_div_tip br,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry #BLRHH_treasure_div_tip br,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box #BLRHH_treasure_div_tip br {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box #BLRHH_treasure_div img,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box #BLRHH_treasure_div canvas,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry #BLRHH_treasure_div img,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry #BLRHH_treasure_div canvas,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box #BLRHH_treasure_div img,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box #BLRHH_treasure_div canvas {\\\\n  max-height: 24px !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .draw-box-text,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .anchor-lot-text,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .count-down,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box #BLRHH_treasure_div_tip,\\\\n.simplifyLiveroom-switch-giftPanel .draw-box #BLRHH_treasure_div_timer,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .draw-box-text,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .anchor-lot-text,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .count-down,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry #BLRHH_treasure_div_tip,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry #BLRHH_treasure_div_timer,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .draw-box-text,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .anchor-lot-text,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .count-down,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box #BLRHH_treasure_div_tip,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box #BLRHH_treasure_div_timer {\\\\n  margin-left: 12px !important;\\\\n  padding: 4px 8px !important;\\\\n  max-width: unset !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box .awarding-panel,\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry .awarding-panel,\\\\n.simplifyLiveroom-switch-giftPanel .treasure-box .awarding-panel {\\\\n  bottom: 42px !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .draw-box {\\\\n  padding-top: 11px !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .anchor-lottery-entry {\\\\n  padding-top: 12px !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .gift-control-panel .right-part {\\\\n  height: 48px !important;\\\\n  display: flex !important;\\\\n  justify-content: flex-end !important;\\\\n  min-width: unset !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .gift-control-panel .right-part > .dp-table-cell {\\\\n  display: flex !important;\\\\n  align-items: center !important;\\\\n}\\\\n.simplifyLiveroom-switch-giftPanel .gift-control-panel .right-part > .dp-table-cell .supporting-info {\\\\n  transform: translateY(-2px) !important;\\\\n}\\\\n\\\\n.simplifyLiveroom-switch-guard .guard-danmaku::before {\\\\n  -o-border-image: none !important;\\\\n     border-image: none !important;\\\\n  background-color: transparent !important;\\\\n}\\\\n.simplifyLiveroom-switch-guard .guard-danmaku::before .guard-danmaku {\\\\n  margin: 0 !important;\\\\n  padding: 4px 5px !important;\\\\n}\\\\n.simplifyLiveroom-switch-guard .guard-danmaku::before .guard-danmaku::after {\\\\n  background-image: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-guard .chat-history-panel [class*=guard-level-] {\\\\n  padding: 4px 5px !important;\\\\n  margin: 0 !important;\\\\n}\\\\n.simplifyLiveroom-switch-guard .chat-history-panel [class*=guard-level-]::after {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-guard .chat-history-panel .chat-colorful-bubble {\\\\n  margin: 0 !important;\\\\n  display: block !important;\\\\n  border-radius: 0 !important;\\\\n  background-color: transparent !important;\\\\n}\\\\n.simplifyLiveroom-switch-guard .fans-medal-item.medal-guard {\\\\n  margin-left: 0 !important;\\\\n}\\\\n\\\\n.simplifyLiveroom-switch-emoticons .control-panel-icon-row .emoticons-panel {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-emoticons .chat-history-list .chat-item .emoticon img {\\\\n  display: none !important;\\\\n}\\\\n.simplifyLiveroom-switch-emoticons .chat-history-list .chat-item .emoticon span {\\\\n  display: inline-flex !important;\\\\n}\\\\n.simplifyLiveroom-switch-emoticons .danmaku-item-container .bilibili-danmaku img {\\\\n  display: none !important;\\\\n}\\\",\\\"\\\"]),i.exports=n},645:function(i){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\ni.exports=function(i){var e=[];return e.toString=function(){return this.map((function(e){var t=i(e);return e[2]?\\\"@media \\\".concat(e[2],\\\" {\\\").concat(t,\\\"}\\\"):t})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\ne.i=function(i,t,n){\\\"string\\\"==typeof i&&(\\n// eslint-disable-next-line no-param-reassign\\ni=[[null,i,\\\"\\\"]]);var o={};if(n)for(var r=0;r<this.length;r++){\\n// eslint-disable-next-line prefer-destructuring\\nvar a=this[r][0];null!=a&&(o[a]=!0)}for(var s=0;s<i.length;s++){var l=[].concat(i[s]);n&&o[l[0]]||(t&&(l[2]?l[2]=\\\"\\\".concat(t,\\\" and \\\").concat(l[2]):l[2]=t),e.push(l))}},e}},693:function(i,e,t){var n=t(978);n&&n.__esModule&&(n=n.default),i.exports=\\\"string\\\"==typeof n?n:n.toString()}},n={};function o(i){var e=n[i];if(void 0!==e)return e.exports;var r=n[i]={id:i,exports:{}};return t[i](r,r.exports,o),r.exports}e=Object.getPrototypeOf?function(i){return Object.getPrototypeOf(i)}:function(i){return i.__proto__},o.t=function(t,n){if(1&n&&(t=this(t)),8&n)return t;if(\\\"object\\\"==typeof t&&t){if(4&n&&t.__esModule)return t;if(16&n&&\\\"function\\\"==typeof t.then)return t}var r=Object.create(null);o.r(r);var a={};i=i||[null,e({}),e([]),e(e)];for(var s=2&n&&t;\\\"object\\\"==typeof s&&!~i.indexOf(s);s=e(s))Object.getOwnPropertyNames(s).forEach((function(i){a[i]=function(){return t[i]}}));return a.default=function(){return t},o.d(r,a),r},o.d=function(i,e){for(var t in e)o.o(e,t)&&!o.o(i,t)&&Object.defineProperty(i,t,{enumerable:!0,get:e[t]})},o.o=function(i,e){return Object.prototype.hasOwnProperty.call(i,e)},o.r=function(i){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(i,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(i,\\\"__esModule\\\",{value:!0})};var r={};return function(){\\\"use strict\\\";o.d(r,{component:function(){return n}});var i=coreApis.componentApis.switchOptions,e=coreApis.componentApis.styledComponent,t=coreApis.utils.urls;const n=(0,i.createSwitchOptions)({name:\\\"simplifyOptions\\\",dimAt:\\\"checked\\\",switchProps:{checkedIcon:\\\"mdi-eye-off-outline\\\",notCheckedIcon:\\\"mdi-eye-outline\\\"},switches:{vip:{defaultValue:!0,displayName:\\\"ËÄÅÁà∑ÂõæÊ†á\\\"},enterPrompt:{defaultValue:!0,displayName:\\\"ÂÖ•Âú∫ÈÄöÁü•\\\"},fansMedal:{defaultValue:!0,displayName:\\\"Á≤â‰∏ùÂããÁ´†\\\"},title:{defaultValue:!0,displayName:\\\"Ê¥ªÂä®Â§¥Ë°î\\\"},guard:{defaultValue:!0,displayName:\\\"Ëà∞ÈïøÂõæÊ†á\\\"},systemMessage:{defaultValue:!0,displayName:\\\"ÂÖ®Âå∫ÂπøÊí≠\\\"},welcomeMessage:{defaultValue:!0,displayName:\\\"Ê¨¢Ëøé‰ø°ÊÅØ\\\"},giftMessage:{defaultValue:!0,displayName:\\\"Á§ºÁâ©ÂºπÂπï\\\"},emoticons:{defaultValue:!0,displayName:\\\"Ë°®ÊÉÖÁâπÊïà\\\"},guardPurchase:{defaultValue:!0,displayName:\\\"‰∏äËà∞ÊèêÁ§∫\\\"},giftPanel:{defaultValue:!0,displayName:\\\"‰ªòË¥πÁ§ºÁâ©\\\"},headerPanel:{defaultValue:!1,displayName:\\\"Ê†áÈ¢òÊ†èÊ¥ªÂä®\\\"},userEffect:{defaultValue:!0,displayName:\\\"ÂÖ•Âú∫ÁâπÊïà\\\"},kanban:{defaultValue:!0,displayName:\\\"ÁúãÊùøÂ®ò\\\"},eventsBanner:{defaultValue:!1,displayName:\\\"Ê¥ªÂä®Ê®™ÂπÖ\\\"},rankList:{defaultValue:!1,displayName:\\\"ÊéíË°åÊ¶ú\\\"},popup:{defaultValue:!1,displayName:\\\"ÊäΩÂ•ñÊèêÁ§∫\\\"},pk:{defaultValue:!1,displayName:\\\"PKÊµÆÁ™ó\\\"},topRank:{defaultValue:!1,displayName:\\\"È´òËÉΩÊ¶úÊèêÁ§∫\\\"},skin:{defaultValue:!1,displayName:\\\"ÊàøÈó¥ÁöÆËÇ§\\\"}}})({name:\\\"simplifyLiveroom\\\",displayName:\\\"ÁÆÄÂåñÁõ¥Êí≠Èó¥\\\",entry:(0,e.styledComponentEntry)((()=>Promise.resolve().then(o.t.bind(o,693,23))),(async()=>{const{setupSkinSimplify:i}=await Promise.resolve().then(o.bind(o,506));i()})),description:{\\\"zh-CN\\\":\\\"ÈöêËóèÁõ¥Êí≠Èó¥‰∏≠ÂêÑÁßç‰∏çÈúÄË¶ÅÁöÑÂÜÖÂÆπ.\\\"},tags:[componentsTags.live,componentsTags.style],urlInclude:t.liveUrls,commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"})}(),r=r.component}()}));\",\"metadata\": {\"name\": \"simplifyLiveroom\",\"displayName\": \"ÁÆÄÂåñÁõ¥Êí≠Èó¥\",\"description\": {\"zh-CN\": \"ÈöêËóèÁõ¥Êí≠Èó¥‰∏≠ÂêÑÁßç‰∏çÈúÄË¶ÅÁöÑÂÜÖÂÆπ.\"},\"tags\": [{\"name\": \"live\",\"displayName\": \"Áõ¥Êí≠\",\"color\": \"#26A69A\",\"icon\": \"mdi-video-wireless-outline\",\"order\": 4},{\"name\": \"style\",\"displayName\": \"Ê†∑Âºè\",\"color\": \"#8BC34A\",\"icon\": \"mdi-palette-outline\",\"order\": 2}],\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\",\"options\": {\"switch-vip\": {\"defaultValue\": true,\"displayName\": \"ËÄÅÁà∑ÂõæÊ†á\",\"hidden\": true},\"switch-enterPrompt\": {\"defaultValue\": true,\"displayName\": \"ÂÖ•Âú∫ÈÄöÁü•\",\"hidden\": true},\"switch-fansMedal\": {\"defaultValue\": true,\"displayName\": \"Á≤â‰∏ùÂããÁ´†\",\"hidden\": true},\"switch-title\": {\"defaultValue\": true,\"displayName\": \"Ê¥ªÂä®Â§¥Ë°î\",\"hidden\": true},\"switch-guard\": {\"defaultValue\": true,\"displayName\": \"Ëà∞ÈïøÂõæÊ†á\",\"hidden\": true},\"switch-systemMessage\": {\"defaultValue\": true,\"displayName\": \"ÂÖ®Âå∫ÂπøÊí≠\",\"hidden\": true},\"switch-welcomeMessage\": {\"defaultValue\": true,\"displayName\": \"Ê¨¢Ëøé‰ø°ÊÅØ\",\"hidden\": true},\"switch-giftMessage\": {\"defaultValue\": true,\"displayName\": \"Á§ºÁâ©ÂºπÂπï\",\"hidden\": true},\"switch-emoticons\": {\"defaultValue\": true,\"displayName\": \"Ë°®ÊÉÖÁâπÊïà\",\"hidden\": true},\"switch-guardPurchase\": {\"defaultValue\": true,\"displayName\": \"‰∏äËà∞ÊèêÁ§∫\",\"hidden\": true},\"switch-giftPanel\": {\"defaultValue\": true,\"displayName\": \"‰ªòË¥πÁ§ºÁâ©\",\"hidden\": true},\"switch-headerPanel\": {\"defaultValue\": false,\"displayName\": \"Ê†áÈ¢òÊ†èÊ¥ªÂä®\",\"hidden\": true},\"switch-userEffect\": {\"defaultValue\": true,\"displayName\": \"ÂÖ•Âú∫ÁâπÊïà\",\"hidden\": true},\"switch-kanban\": {\"defaultValue\": true,\"displayName\": \"ÁúãÊùøÂ®ò\",\"hidden\": true},\"switch-eventsBanner\": {\"defaultValue\": false,\"displayName\": \"Ê¥ªÂä®Ê®™ÂπÖ\",\"hidden\": true},\"switch-rankList\": {\"defaultValue\": false,\"displayName\": \"ÊéíË°åÊ¶ú\",\"hidden\": true},\"switch-popup\": {\"defaultValue\": false,\"displayName\": \"ÊäΩÂ•ñÊèêÁ§∫\",\"hidden\": true},\"switch-pk\": {\"defaultValue\": false,\"displayName\": \"PKÊµÆÁ™ó\",\"hidden\": true},\"switch-topRank\": {\"defaultValue\": false,\"displayName\": \"È´òËÉΩÊ¶úÊèêÁ§∫\",\"hidden\": true},\"switch-skin\": {\"defaultValue\": false,\"displayName\": \"ÊàøÈó¥ÁöÆËÇ§\",\"hidden\": true},\"simplifyOptions\": {\"defaultValue\": {\"name\": \"simplifyOptions\",\"dimAt\": \"checked\",\"switchProps\": {\"checkedIcon\": \"mdi-eye-off-outline\",\"notCheckedIcon\": \"mdi-eye-outline\"},\"switches\": {\"vip\": {\"defaultValue\": true,\"displayName\": \"ËÄÅÁà∑ÂõæÊ†á\"},\"enterPrompt\": {\"defaultValue\": true,\"displayName\": \"ÂÖ•Âú∫ÈÄöÁü•\"},\"fansMedal\": {\"defaultValue\": true,\"displayName\": \"Á≤â‰∏ùÂããÁ´†\"},\"title\": {\"defaultValue\": true,\"displayName\": \"Ê¥ªÂä®Â§¥Ë°î\"},\"guard\": {\"defaultValue\": true,\"displayName\": \"Ëà∞ÈïøÂõæÊ†á\"},\"systemMessage\": {\"defaultValue\": true,\"displayName\": \"ÂÖ®Âå∫ÂπøÊí≠\"},\"welcomeMessage\": {\"defaultValue\": true,\"displayName\": \"Ê¨¢Ëøé‰ø°ÊÅØ\"},\"giftMessage\": {\"defaultValue\": true,\"displayName\": \"Á§ºÁâ©ÂºπÂπï\"},\"emoticons\": {\"defaultValue\": true,\"displayName\": \"Ë°®ÊÉÖÁâπÊïà\"},\"guardPurchase\": {\"defaultValue\": true,\"displayName\": \"‰∏äËà∞ÊèêÁ§∫\"},\"giftPanel\": {\"defaultValue\": true,\"displayName\": \"‰ªòË¥πÁ§ºÁâ©\"},\"headerPanel\": {\"defaultValue\": false,\"displayName\": \"Ê†áÈ¢òÊ†èÊ¥ªÂä®\"},\"userEffect\": {\"defaultValue\": true,\"displayName\": \"ÂÖ•Âú∫ÁâπÊïà\"},\"kanban\": {\"defaultValue\": true,\"displayName\": \"ÁúãÊùøÂ®ò\"},\"eventsBanner\": {\"defaultValue\": false,\"displayName\": \"Ê¥ªÂä®Ê®™ÂπÖ\"},\"rankList\": {\"defaultValue\": false,\"displayName\": \"ÊéíË°åÊ¶ú\"},\"popup\": {\"defaultValue\": false,\"displayName\": \"ÊäΩÂ•ñÊèêÁ§∫\"},\"pk\": {\"defaultValue\": false,\"displayName\": \"PKÊµÆÁ™ó\"},\"topRank\": {\"defaultValue\": false,\"displayName\": \"È´òËÉΩÊ¶úÊèêÁ§∫\"},\"skin\": {\"defaultValue\": false,\"displayName\": \"ÊàøÈó¥ÁöÆËÇ§\"}},\"radio\": false,\"componentName\": \"simplifyLiveroom\",\"optionDisplayName\": \"ÁÆÄÂåñÁõ¥Êí≠Èó¥ÈÄâÈ°π\"},\"displayName\": \"ÁÆÄÂåñÁõ¥Êí≠Èó¥ÈÄâÈ°π\"}}},\"settings\": {\"enabled\": true,\"options\": {\"switch-vip\": true,\"switch-enterPrompt\": true,\"switch-fansMedal\": true,\"switch-title\": true,\"switch-guard\": true,\"switch-systemMessage\": true,\"switch-welcomeMessage\": true,\"switch-giftMessage\": true,\"switch-emoticons\": true,\"switch-guardPurchase\": true,\"switch-giftPanel\": true,\"switch-headerPanel\": false,\"switch-userEffect\": true,\"switch-kanban\": true,\"switch-eventsBanner\": false,\"switch-rankList\": false,\"switch-popup\": false,\"switch-pk\": false,\"switch-topRank\": false,\"switch-skin\": false,\"simplifyOptions\": {\"name\": \"simplifyOptions\",\"dimAt\": \"checked\",\"switchProps\": {\"checkedIcon\": \"mdi-eye-off-outline\",\"notCheckedIcon\": \"mdi-eye-outline\"},\"switches\": {\"vip\": {\"defaultValue\": true,\"displayName\": \"ËÄÅÁà∑ÂõæÊ†á\"},\"enterPrompt\": {\"defaultValue\": true,\"displayName\": \"ÂÖ•Âú∫ÈÄöÁü•\"},\"fansMedal\": {\"defaultValue\": true,\"displayName\": \"Á≤â‰∏ùÂããÁ´†\"},\"title\": {\"defaultValue\": true,\"displayName\": \"Ê¥ªÂä®Â§¥Ë°î\"},\"guard\": {\"defaultValue\": true,\"displayName\": \"Ëà∞ÈïøÂõæÊ†á\"},\"systemMessage\": {\"defaultValue\": true,\"displayName\": \"ÂÖ®Âå∫ÂπøÊí≠\"},\"welcomeMessage\": {\"defaultValue\": true,\"displayName\": \"Ê¨¢Ëøé‰ø°ÊÅØ\"},\"giftMessage\": {\"defaultValue\": true,\"displayName\": \"Á§ºÁâ©ÂºπÂπï\"},\"emoticons\": {\"defaultValue\": true,\"displayName\": \"Ë°®ÊÉÖÁâπÊïà\"},\"guardPurchase\": {\"defaultValue\": true,\"displayName\": \"‰∏äËà∞ÊèêÁ§∫\"},\"giftPanel\": {\"defaultValue\": true,\"displayName\": \"‰ªòË¥πÁ§ºÁâ©\"},\"headerPanel\": {\"defaultValue\": false,\"displayName\": \"Ê†áÈ¢òÊ†èÊ¥ªÂä®\"},\"userEffect\": {\"defaultValue\": true,\"displayName\": \"ÂÖ•Âú∫ÁâπÊïà\"},\"kanban\": {\"defaultValue\": true,\"displayName\": \"ÁúãÊùøÂ®ò\"},\"eventsBanner\": {\"defaultValue\": false,\"displayName\": \"Ê¥ªÂä®Ê®™ÂπÖ\"},\"rankList\": {\"defaultValue\": false,\"displayName\": \"ÊéíË°åÊ¶ú\"},\"popup\": {\"defaultValue\": false,\"displayName\": \"ÊäΩÂ•ñÊèêÁ§∫\"},\"pk\": {\"defaultValue\": false,\"displayName\": \"PKÊµÆÁ™ó\"},\"topRank\": {\"defaultValue\": false,\"displayName\": \"È´òËÉΩÊ¶úÊèêÁ§∫\"},\"skin\": {\"defaultValue\": false,\"displayName\": \"ÊàøÈó¥ÁöÆËÇ§\"}},\"radio\": false,\"componentName\": \"simplifyLiveroom\",\"optionDisplayName\": \"ÁÆÄÂåñÁõ¥Êí≠Èó¥ÈÄâÈ°π\"}}}},\"keymap\": {\"code\": \"!function(e,t){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=t():\\\"function\\\"==typeof define&&define.amd?define([],t):\\\"object\\\"==typeof exports?exports[\\\"utils/keymap\\\"]=t():e[\\\"utils/keymap\\\"]=t()}(self,(function(){return function(){var e,t,n={709:function(e,t,n){\\\"use strict\\\";n.d(t,{Nw:function(){return u},vN:function(){return l},$j:function(){return s},kW:function(){return d}});var i=coreApis.componentApis.video.playerAgent,o=n(986),r=n(153);const s=(e,t)=>{const{event:n}=t,i=new MouseEvent(\\\"click\\\",{...lodash.pick(n,\\\"ctrlKey\\\",\\\"shiftKey\\\",\\\"altKey\\\",\\\"metaKey\\\")});if(\\\"string\\\"==typeof e){const t=dq(e);if(!t)return!1;t.dispatchEvent(i)}else{if(!e)return!1;e.dispatchEvent(i)}return!0},a=e=>t=>s(e,t),l=e=>()=>i.playerAgent.changeTime(\\\"number\\\"==typeof e?e:e());let c;const d=async(e,t)=>{let n=dq(\\\".keymap-tip\\\");if(!n){const o=await i.playerAgent.query.playerArea();if(!o)return;o.insertAdjacentHTML(\\\"afterbegin\\\",`\\\\n      <div class=\\\"keymap-tip-container\\\">\\\\n        <i class=\\\"keymap-tip-icon mdi ${t}\\\"></i>\\\\n        <div class=\\\"keymap-tip\\\">${e}</div>\\\\n      </div>\\\\n    `),n=dq(\\\".keymap-tip\\\")}n.innerHTML=e;const o=dq(\\\".keymap-tip-container\\\"),r=dq(o,\\\".mdi\\\");r.classList.remove(...r.classList.values()),r.classList.add(\\\"mdi\\\",t),c&&clearTimeout(c),o.classList.add(\\\"show\\\"),c=window.setTimeout((()=>{o.classList.remove(\\\"show\\\")}),2e3)},p={fullscreen:{displayName:\\\"ÂÖ®Â±è\\\",run:()=>i.playerAgent.fullscreen()},webFullscreen:{displayName:\\\"ÁΩëÈ°µÂÖ®Â±è\\\",run:()=>i.playerAgent.webFullscreen()},wideScreen:{displayName:\\\"ÂÆΩÂ±è\\\",run:()=>i.playerAgent.widescreen()},volumeUp:{displayName:\\\"Â¢ûÂä†Èü≥Èáè\\\",run:()=>{const e=i.playerAgent.changeVolume(10);return lodash.isNil(e)?e:(d(`${e}%`,\\\"mdi-volume-high\\\"),!0)}},volumeDown:{displayName:\\\"Èôç‰ΩéÈü≥Èáè\\\",run:()=>{const e=i.playerAgent.changeVolume(-10);return lodash.isNil(e)?e:(0===e?d(\\\"ÈùôÈü≥\\\",\\\"mdi-volume-off\\\"):d(`${e}%`,\\\"mdi-volume-high\\\"),!0)}},mute:{displayName:\\\"ÈùôÈü≥\\\",run:()=>{const e=i.playerAgent.toggleMute();return lodash.isNil(e)?e:(i.playerAgent.isMute()?d(\\\"Â∑≤ÈùôÈü≥\\\",\\\"mdi-volume-off\\\"):d(\\\"Â∑≤ÂèñÊ∂àÈùôÈü≥\\\",\\\"mdi-volume-high\\\"),!0)}},pictureInPicture:{displayName:\\\"Áîª‰∏≠Áîª\\\",run:()=>i.playerAgent.togglePip()},coin:{displayName:\\\"ÊäïÂ∏Å\\\",run:a(\\\".video-toolbar .coin, .tool-bar .coin-info, .video-toolbar-module .coin-box, .play-options-ul > li:nth-child(2), .video-toolbar-v1 .coin\\\")},favorite:{displayName:\\\"Êî∂Ëóè\\\",run:a(\\\".video-toolbar .collect, .video-toolbar-module .fav-box, .play-options-ul > li:nth-child(3), .video-toolbar-v1 .collect\\\")},pause:{displayName:\\\"ÊöÇÂÅú/Êí≠Êîæ\\\",run:()=>i.playerAgent.togglePlay()},like:{displayName:\\\"ÁÇπËµû\\\",run:(()=>{let e=!0;return t=>{const{event:n}=t,i=dq(\\\".video-toolbar .like, .tool-bar .like-info, .video-toolbar-v1 .like\\\");if(!i)return!1;n.preventDefault();const o=(e,t)=>{const n=new CustomEvent(e,t);i.dispatchEvent(n)};return e=!0,setTimeout((()=>e=!1),200),o(\\\"mousedown\\\",n),document.body.addEventListener(\\\"keyup\\\",(t=>{t.preventDefault(),o(\\\"mouseup\\\",t),e&&o(\\\"click\\\",t)}),{once:!0}),!0}})()},danmaku:{displayName:\\\"ÂºπÂπïÂºÄÂÖ≥\\\",run:()=>i.playerAgent.toggleDanmaku()},longJumpBackward:{displayName:\\\"ÈïøÂÄíÈÄÄ\\\",run:()=>i.playerAgent.changeTime(-(0,o.getComponentSettings)(\\\"keymap\\\").options.longJumpSeconds)},longJumpForward:{displayName:\\\"ÈïøÂâçËøõ\\\",run:()=>i.playerAgent.changeTime((0,o.getComponentSettings)(\\\"keymap\\\").options.longJumpSeconds)},jumpBackward:{displayName:\\\"ÂÄíÈÄÄ\\\",run:()=>i.playerAgent.changeTime(-5)},jumpForward:{displayName:\\\"ÂâçËøõ\\\",run:()=>i.playerAgent.changeTime(5)},playerMenu:{displayName:\\\"Êí≠ÊîæÂô®ËèúÂçï\\\",run:()=>{const e=i.playerAgent.query.video.container.sync();if(!e)return null;const t=e.getBoundingClientRect();return e.dispatchEvent(new MouseEvent(\\\"contextmenu\\\",{bubbles:!0,cancelable:!1,view:unsafeWindow,button:2,buttons:0,clientX:t.x+t.width/2-88.325,clientY:t.y+t.height/2-97})),!0}},seekBegin:{displayName:\\\"ÂõûÂºÄÂ§¥\\\",run:()=>i.playerAgent.seek(0)},sendComment:{displayName:\\\"ÂèëÈÄÅËØÑËÆ∫\\\",ignoreTyping:!1,run:()=>{var e;const t=null===(e=document.activeElement)||void 0===e?void 0:e.nextElementSibling;return t?(t.click(),!0):null}}},[u]=(0,r.registerAndGetData)(\\\"keymap.actions\\\",p)},455:function(e,t,n){\\\"use strict\\\";n.d(t,{Wb:function(){return o},um:function(){return r}});var i=n(153);const o={fullscreen:\\\"f\\\",webFullscreen:\\\"w\\\",wideScreen:\\\"t\\\",volumeUp:\\\"arrowUp\\\",volumeDown:\\\"arrowDown\\\",mute:\\\"m\\\",pictureInPicture:\\\"p\\\",coin:\\\"c\\\",favorite:\\\"s\\\",pause:\\\"space\\\",like:\\\"l\\\",playerMenu:\\\"`\\\",longJumpForward:\\\"j\\\",longJumpBackward:\\\"shift j\\\",jumpBackward:\\\"arrowLeft\\\",jumpForward:\\\"arrowRight\\\",danmaku:\\\"d\\\",seekBegin:\\\"0\\\",sendComment:\\\"ctrl enter\\\"},[,r]=(0,i.registerAndGetData)(\\\"keymap.presets\\\",o,{Default:{},YouTube:{like:\\\"\\\",pause:\\\"space k\\\",longJumpForward:\\\"l\\\",longJumpBackward:\\\"j\\\",seekBegin:\\\"0 Home\\\"},HTML5Player:{coin:\\\"shift c\\\",danmaku:\\\"shift d\\\",fullscreen:\\\"enter\\\",webFullscreen:\\\"shift enter\\\",pictureInPicture:\\\"shift p\\\",longJumpBackward:\\\"ctrl arrowLeft\\\",longJumpForward:\\\"ctrl arrowRight\\\"},PotPlayer:{coin:\\\"shift c\\\",danmaku:\\\"shift d\\\",fullscreen:\\\"enter\\\",webFullscreen:\\\"6\\\",longJumpBackward:\\\"ctrl arrowLeft\\\",longJumpForward:\\\"ctrl arrowRight\\\",seekBegin:\\\"backspace\\\"}})},781:function(e,t,n){\\\"use strict\\\";n.r(t),n.d(t,{loadKeymapSettings:function(){return r},toggleKeymapSettings:function(){return s}});var i=n(605);let o;const r=async e=>{if(o)return;const t=await Promise.resolve().then(n.bind(n,742)).then((e=>e.default));o=(0,i.mountVueComponent)(t),e&&(o.triggerElement=e),document.body.insertAdjacentElement(\\\"beforeend\\\",o.$el)},s=async e=>{o||await r(e),o.popupOpen=!o.popupOpen}},786:function(e,t,n){var i=n(645)((function(e){return e[1]}));i.push([e.id,\\\".keymap-extra-options {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n  justify-content: center;\\\\n}\\\\n.keymap-extra-options .keymap-settings-button .be-icon {\\\\n  margin-right: 8px;\\\\n}\\\",\\\"\\\"]),e.exports=i},848:function(e,t,n){var i=n(645)((function(e){return e[1]}));i.push([e.id,\\\".keymap-settings-popup {\\\\n  background-color: #fff;\\\\n  color: black;\\\\n  border-radius: 8px;\\\\n  border: 1px solid rgba(136, 136, 136, 0.1333333333);\\\\n  box-sizing: border-box;\\\\n  box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.05);\\\\n  transition: 0.2s ease-out;\\\\n  width: 550px;\\\\n  top: 50%;\\\\n  left: 50%;\\\\n  z-index: 100002;\\\\n  transform: translateX(-50%) translateY(-50%) scale(0.9);\\\\n  display: flex;\\\\n  flex-direction: column;\\\\n}\\\\nbody.dark .keymap-settings-popup {\\\\n  box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.2);\\\\n}\\\\nbody.dark .keymap-settings-popup {\\\\n  background-color: #282828;\\\\n  color: #eee;\\\\n}\\\\nbody.dark .keymap-settings-popup {\\\\n  background-color: #222;\\\\n}\\\\n.keymap-settings-popup.open {\\\\n  transform: translateX(-50%) translateY(-50%) scale(1);\\\\n}\\\\n.keymap-settings {\\\\n  font-size: 12px;\\\\n  display: flex;\\\\n  flex-direction: column;\\\\n  padding: 12px 12px 0 18px;\\\\n}\\\\n.keymap-settings-header {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n  margin-bottom: 8px;\\\\n}\\\\n.keymap-settings-header-title {\\\\n  flex: 1 0 auto;\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n  font-size: 18px;\\\\n  font-weight: bold;\\\\n}\\\\n.keymap-settings-header-title .be-icon {\\\\n  margin-right: 6px;\\\\n}\\\\n.keymap-settings-header-help, .keymap-settings-header-close {\\\\n  display: flex;\\\\n  padding: 6px;\\\\n  cursor: pointer;\\\\n  transition: 0.2s ease-out;\\\\n  color: inherit;\\\\n}\\\\n.keymap-settings-header-help:hover, .keymap-settings-header-close:hover {\\\\n  color: var(--theme-color);\\\\n}\\\\n.keymap-settings-content {\\\\n  flex: 1 0 auto;\\\\n  max-height: calc(100vh - 200px);\\\\n  overflow: auto;\\\\n  padding-bottom: 12px;\\\\n}\\\\n.keymap-settings-content .keymap-settings-grid .grid-header,\\\\n.keymap-settings-content .keymap-settings-grid .grid-row {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n  gap: 8px;\\\\n  justify-content: space-between;\\\\n  height: 24px;\\\\n  box-sizing: content-box;\\\\n}\\\\n.keymap-settings-content .keymap-settings-grid .grid-header > *,\\\\n.keymap-settings-content .keymap-settings-grid .grid-row > * {\\\\n  flex: 1 0 0;\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n}\\\\n.keymap-settings-content .keymap-settings-grid .grid-header {\\\\n  margin-bottom: 4px;\\\\n  padding: 4px 0 6px 0;\\\\n  border-bottom: 1px solid rgba(136, 136, 136, 0.1333333333);\\\\n  position: sticky;\\\\n  top: 0;\\\\n  z-index: 1;\\\\n  background-color: #fff;\\\\n}\\\\nbody.dark .keymap-settings-content .keymap-settings-grid .grid-header {\\\\n  background-color: #222;\\\\n}\\\",\\\"\\\"]),e.exports=i},542:function(e,t,n){var i=n(645)((function(e){return e[1]}));i.push([e.id,\\\".keymap-settings-grid .grid-row {\\\\n  padding: 2px 0;\\\\n}\\\\n.keymap-settings-grid .grid-row .row-name,\\\\n.keymap-settings-grid .grid-row .row-default-binding,\\\\n.keymap-settings-grid .grid-row .row-preset-binding {\\\\n  overflow: hidden;\\\\n  text-overflow: ellipsis;\\\\n  white-space: nowrap;\\\\n  overflow: auto;\\\\n  scrollbar-width: none !important;\\\\n  overscroll-behavior: contain;\\\\n}\\\\n.keymap-settings-grid .grid-row .row-name::-webkit-scrollbar,\\\\n.keymap-settings-grid .grid-row .row-default-binding::-webkit-scrollbar,\\\\n.keymap-settings-grid .grid-row .row-preset-binding::-webkit-scrollbar {\\\\n  height: 0 !important;\\\\n  width: 0 !important;\\\\n}\\\\n.keymap-settings-grid .grid-row .row-name.not-set, .keymap-settings-grid .grid-row .row-name.overwritten,\\\\n.keymap-settings-grid .grid-row .row-default-binding.not-set,\\\\n.keymap-settings-grid .grid-row .row-default-binding.overwritten,\\\\n.keymap-settings-grid .grid-row .row-preset-binding.not-set,\\\\n.keymap-settings-grid .grid-row .row-preset-binding.overwritten {\\\\n  opacity: 0.25;\\\\n}\\\\n.keymap-settings-grid .grid-row .row-custom-binding .be-button {\\\\n  padding: 4px;\\\\n  margin-right: 4px;\\\\n}\\\\n.keymap-settings-grid .grid-row .row-custom-binding .be-icon {\\\\n  margin: 0;\\\\n}\\\\n.keymap-settings-grid .grid-row .row-custom-binding .be-textbox {\\\\n  margin-right: 6px;\\\\n  flex: 1 0 auto;\\\\n}\\\\n.keymap-settings-grid .grid-row .row-custom-binding .custom-binding-edit,\\\\n.keymap-settings-grid .grid-row .row-custom-binding .custom-binding-add {\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 0;\\\\n  flex: 1 0 auto;\\\\n}\\\",\\\"\\\"]),e.exports=i},280:function(e,t,n){var i=n(645)((function(e){return e[1]}));i.push([e.id,\\\".keymap-tip-container {\\\\n  position: absolute;\\\\n  left: 50%;\\\\n  top: 50%;\\\\n  transform: translate(-50%, -50%);\\\\n  padding: 8px 16px;\\\\n  background-color: rgba(0, 0, 0, 0.6666666667);\\\\n  color: white;\\\\n  pointer-events: none;\\\\n  opacity: 0;\\\\n  z-index: 100;\\\\n  display: flex;\\\\n  align-items: center;\\\\n  font-size: 14pt;\\\\n  border-radius: 4px;\\\\n  transition: 0.2s ease-out;\\\\n}\\\\nbody.player-mode-blackmask .keymap-tip-container {\\\\n  z-index: 10017;\\\\n}\\\\n.keymap-tip-container.show {\\\\n  opacity: 1;\\\\n}\\\\n.keymap-tip-container i {\\\\n  line-height: 1;\\\\n  margin-right: 8px;\\\\n  font-size: 18pt;\\\\n}\\\\n\\\\n.bilibili-player .bilibili-player-area .bilibili-player-video-wrap .bilibili-player-volumeHint {\\\\n  background-color: rgba(0, 0, 0, 0.6666666667);\\\\n  color: white;\\\\n}\\\\n.bilibili-player .bilibili-player-area .bilibili-player-video-wrap .bilibili-player-volumeHint-icon {\\\\n  line-height: 1;\\\\n}\\\",\\\"\\\"]),e.exports=i},645:function(e){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\ne.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?\\\"@media \\\".concat(t[2],\\\" {\\\").concat(n,\\\"}\\\"):n})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\nt.i=function(e,n,i){\\\"string\\\"==typeof e&&(\\n// eslint-disable-next-line no-param-reassign\\ne=[[null,e,\\\"\\\"]]);var o={};if(i)for(var r=0;r<this.length;r++){\\n// eslint-disable-next-line prefer-destructuring\\nvar s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);i&&o[l[0]]||(n&&(l[2]?l[2]=\\\"\\\".concat(n,\\\" and \\\").concat(l[2]):l[2]=n),t.push(l))}},t}},379:function(e,t,n){\\\"use strict\\\";var i,o=function(){return void 0===i&&(\\n// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\\n// @see https://github.com/webpack-contrib/style-loader/issues/177\\ni=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function a(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},i=[],o=0;o<e.length;o++){var r=e[o],l=t.base?r[0]+t.base:r[0],c=n[l]||0,d=\\\"\\\".concat(l,\\\" \\\").concat(c);n[l]=c+1;var p=a(d),u={css:r[1],media:r[2],sourceMap:r[3]};-1!==p?(s[p].references++,s[p].updater(u)):s.push({identifier:d,updater:y(u,t),references:1}),i.push(d)}return i}function c(e){var t=document.createElement(\\\"style\\\"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),\\\"function\\\"==typeof e.insert)e.insert(t);else{var s=r(e.insert||\\\"head\\\");if(!s)throw new Error(\\\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\\\");s.appendChild(t)}return t}var d,p=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join(\\\"\\\\n\\\")});function u(e,t,n,i){var o=n?\\\"\\\":i.media?\\\"@media \\\".concat(i.media,\\\" {\\\").concat(i.css,\\\"}\\\"):i.css;if(e.styleSheet)e.styleSheet.cssText=p(t,o);else{var r=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(r,s[t]):e.appendChild(r)}}function m(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute(\\\"media\\\",o):e.removeAttribute(\\\"media\\\"),r&&\\\"undefined\\\"!=typeof btoa&&(i+=\\\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r)))),\\\" */\\\")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var g=null,f=0;function y(e,t){var n,i,o;if(t.singleton){var r=f++;n=g||(g=c(t)),i=u.bind(null,n,r,!1),o=u.bind(null,n,r,!0)}else n=c(t),i=m.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||\\\"boolean\\\"==typeof t.singleton||(t.singleton=o());var n=l(e=e||[],t);return function(e){if(e=e||[],\\\"[object Array]\\\"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=a(n[i]);s[o].references--}for(var r=l(e,t),c=0;c<n.length;c++){var d=a(n[c]);0===s[d].references&&(s[d].updater(),s.splice(d,1))}n=r}}}},233:function(e,t,n){var i=n(280);i&&i.__esModule&&(i=i.default),e.exports=\\\"string\\\"==typeof i?i:i.toString()},658:function(e,t,n){\\\"use strict\\\";n.r(t),n.d(t,{default:function(){return m}});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\\\"div\\\",{staticClass:\\\"keymap-extra-options\\\"},[n(\\\"VButton\\\",{ref:\\\"button\\\",staticClass:\\\"keymap-settings-button\\\",on:{mouseover:function(t){return e.loadSettings()},click:function(t){return e.toggleSettings()}}},[n(\\\"VIcon\\\",{attrs:{icon:\\\"mdi-keyboard-settings-outline\\\",size:18}}),e._v(\\\"\\\\n    Âø´Êç∑ÈîÆËÆæÁΩÆ\\\\n  \\\")],1)],1)};i._withStripped=!0;var o=n(648),r=n(781),s=Vue.extend({components:{VButton:o.VButton,VIcon:o.VIcon},data:()=>({popupOpen:!1}),methods:{async loadSettings(){await(0,r.loadKeymapSettings)(this.$refs.button)},async toggleSettings(){await(0,r.toggleKeymapSettings)(this.$refs.button)}}}),a=n(379),l=n.n(a),c=n(786),d=n.n(c),p={insert:\\\"head\\\",singleton:!1},u=(l()(d(),p),d().locals,(0,n(900).Z)(s,i,[],!1,null,null,null));u.options.__file=\\\"registry/lib/components/utils/keymap/settings/ExtraOptions.vue\\\";var m=u.exports},742:function(e,t,n){\\\"use strict\\\";n.r(t),n.d(t,{default:function(){return S}});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\\\"VPopup\\\",{staticClass:\\\"keymap-settings-popup be-settings-extra-options\\\",attrs:{fixed:\\\"\\\",\\\"trigger-element\\\":e.triggerElement},model:{value:e.popupOpen,callback:function(t){e.popupOpen=t},expression:\\\"popupOpen\\\"}},[n(\\\"div\\\",{staticClass:\\\"keymap-settings\\\"},[n(\\\"div\\\",{staticClass:\\\"keymap-settings-header\\\"},[n(\\\"div\\\",{staticClass:\\\"keymap-settings-header-title\\\"},[n(\\\"VIcon\\\",{attrs:{icon:\\\"mdi-keyboard-settings-outline\\\"}}),e._v(\\\"\\\\n        Âø´Êç∑ÈîÆËÆæÁΩÆ\\\\n      \\\")],1),e._v(\\\" \\\"),n(\\\"a\\\",{staticClass:\\\"keymap-settings-header-help\\\",attrs:{href:\\\"https://github.com/the1812/Bilibili-Evolved/blob/preview/registry/lib/components/utils/keymap/help.md\\\",target:\\\"_blank\\\",title:\\\"Êü•ÁúãÂ∏ÆÂä©\\\"}},[n(\\\"VIcon\\\",{attrs:{size:18,icon:\\\"mdi-help-circle-outline\\\"}})],1),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"keymap-settings-header-close\\\",attrs:{title:\\\"ÂÖ≥Èó≠\\\"}},[n(\\\"VIcon\\\",{attrs:{size:18,icon:\\\"close\\\"},on:{click:function(t){e.popupOpen=!1}}})],1)]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"keymap-settings-content\\\"},[n(\\\"div\\\",{staticClass:\\\"keymap-settings-grid\\\"},[n(\\\"div\\\",{staticClass:\\\"grid-header\\\"},[n(\\\"div\\\",{staticClass:\\\"header-name\\\"},[e._v(\\\"\\\\n            Âä®‰Ωú\\\\n          \\\")]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"header-default-binding\\\"},[e._v(\\\"\\\\n            ÈªòËÆ§ÊåâÈîÆ\\\\n          \\\")]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"header-preset-binding\\\"},[n(\\\"VDropdown\\\",{attrs:{items:e.presetOptions,\\\"key-mapper\\\":function(e){return e}},scopedSlots:e._u([{key:\\\"item\\\",fn:function(t){var n=t.item;return[e._v(\\\"\\\\n                \\\"+e._s(n)+\\\"\\\\n              \\\")]}}]),model:{value:e.selectedPreset,callback:function(t){e.selectedPreset=t},expression:\\\"selectedPreset\\\"}})],1),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"header-custom-binding\\\"},[e._v(\\\"\\\\n            Ëá™ÂÆö‰πâÊåâÈîÆ\\\\n          \\\")])]),e._v(\\\" \\\"),e._l(e.rows,(function(t){return n(\\\"KeymapSettingsRow\\\",{key:t.name,attrs:{row:t,\\\"selected-preset\\\":e.selectedPreset}})}))],2)])])])};i._withStripped=!0;var o=n(986),r=n(648),s=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\\\"div\\\",{staticClass:\\\"grid-row\\\"},[n(\\\"div\\\",{staticClass:\\\"row-name\\\",attrs:{title:e.row.name}},[e._v(\\\"\\\\n    \\\"+e._s(e.row.displayName)+\\\"\\\\n  \\\")]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"row-default-binding\\\",class:{overwritten:e.isOverwrittern(e.presets[e.selectedPreset],e.customKeyBindings),\\\"not-set\\\":void 0===e.presetBase[e.row.name]}},[e._v(\\\"\\\\n    \\\"+e._s(e.showReadonlyKey(e.presetBase))+\\\"\\\\n  \\\")]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"row-preset-binding\\\",class:{overwritten:e.isOverwrittern(e.customKeyBindings),\\\"not-set\\\":void 0===e.presets[e.selectedPreset][e.row.name]}},[e._v(\\\"\\\\n    \\\"+e._s(e.showReadonlyKey(e.presets[e.selectedPreset]))+\\\"\\\\n  \\\")]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"row-custom-binding\\\"},[e.editable?n(\\\"div\\\",{staticClass:\\\"custom-binding-edit\\\"},[n(\\\"TextBox\\\",{ref:\\\"customBindingTextBox\\\",attrs:{placeholder:\\\"Á¶ÅÁî®\\\",\\\"change-on-blur\\\":\\\"\\\",text:e.customKeyBindings[e.row.name]},on:{change:e.updateCustomBinding}}),e._v(\\\" \\\"),n(\\\"VButton\\\",{attrs:{type:\\\"transparent\\\",title:\\\"Âà†Èô§Ëá™ÂÆö‰πâÈîÆ‰Ωç\\\"},on:{click:function(t){return e.removeCustomBinding()}}},[n(\\\"VIcon\\\",{attrs:{icon:\\\"mdi-trash-can-outline\\\",size:16}})],1)],1):n(\\\"div\\\",{staticClass:\\\"custom-binding-add\\\"},[n(\\\"VButton\\\",{attrs:{type:\\\"transparent\\\",title:\\\"Ê∑ªÂä†Ëá™ÂÆö‰πâÈîÆ‰Ωç\\\"},on:{click:function(t){return e.addCustomBinding()}}},[n(\\\"VIcon\\\",{attrs:{icon:\\\"mdi-plus\\\",size:16}})],1)],1)])])};s._withStripped=!0;var a=n(455);const l=(0,o.getComponentSettings)(\\\"keymap\\\").options;var c=Vue.extend({components:{TextBox:r.TextBox,VButton:r.VButton,VIcon:r.VIcon},props:{row:{type:Object,required:!0},selectedPreset:{type:String,required:!0}},data:()=>({presets:a.um,presetBase:a.Wb,customKeyBindings:l.customKeyBindings,editable:!1}),created(){this.checkEditable()},methods:{checkEditable(){this.editable=void 0!==this.customKeyBindings[this.row.name]},showReadonlyKey(e){const{name:t}=this.row,n=e[t];return void 0===n?\\\"ÁªßÊâø\\\":\\\"\\\"===n?\\\"Á¶ÅÁî®\\\":n},isOverwrittern(){const{name:e}=this.row;for(var t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];return n.some((t=>void 0!==t[e]))},async addCustomBinding(){const{name:e}=this.row;this.customKeyBindings[e]=\\\"\\\",this.checkEditable(),await this.$nextTick(),this.$refs.customBindingTextBox.focus()},removeCustomBinding(){const{name:e}=this.row;delete this.customKeyBindings[e],this.checkEditable()},updateCustomBinding(e){console.log(\\\"update\\\",e);const{name:t}=this.row;this.customKeyBindings[t]=e}}}),d=c,p=n(379),u=n.n(p),m=n(542),g=n.n(m),f={insert:\\\"head\\\",singleton:!1},y=(u()(g(),f),g().locals,n(900)),h=(0,y.Z)(d,s,[],!1,null,null,null);h.options.__file=\\\"registry/lib/components/utils/keymap/settings/KeymapSettingsRow.vue\\\";var v=h.exports,b=n(709);const w=(0,o.getComponentSettings)(\\\"keymap\\\").options;console.log(a.um,b.Nw,w.preset,w.customKeyBindings);var k=Vue.extend({components:{VIcon:r.VIcon,VDropdown:r.VDropdown,VPopup:r.VPopup,KeymapSettingsRow:v},props:{triggerElement:{type:HTMLElement,default:null}},data:()=>({popupOpen:!1,actions:b.Nw,presets:a.um,customKeyBindings:w.customKeyBindings}),computed:{selectedPreset:{get:()=>w.preset,set(e){w.preset=e}},rows(){return Object.entries(this.actions).map((e=>{let[t,n]=e;return{name:t,...n}}))},presetOptions(){return Object.keys(this.presets)}}}),x=n(848),_=n.n(x),C={insert:\\\"head\\\",singleton:!1},B=(u()(_(),C),_().locals,(0,y.Z)(k,i,[],!1,null,null,null));B.options.__file=\\\"registry/lib/components/utils/keymap/settings/KeymapSettings.vue\\\";var S=B.exports},900:function(e,t,n){\\\"use strict\\\";function i(e,t,n,i,o,r,s,a){var l,c=\\\"function\\\"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),i&&(c.functional=!0),r&&(c._scopeId=\\\"data-v-\\\"+r),s?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\\\"undefined\\\"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s)},c._ssrRegister=l):o&&(l=a?function(){o.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:o),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(e,t){return l.call(t),d(e,t)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:e,options:c}}n.d(t,{Z:function(){return i}})},153:function(e){\\\"use strict\\\";e.exports=coreApis.pluginApis.data},986:function(e){\\\"use strict\\\";e.exports=coreApis.settings},648:function(e){\\\"use strict\\\";e.exports=coreApis.ui},605:function(e){\\\"use strict\\\";e.exports=coreApis.utils}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var r=i[e]={id:e,exports:{}};return n[e](r,r.exports,o),r.exports}o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,{a:t}),t},t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},o.t=function(n,i){if(1&i&&(n=this(n)),8&i)return n;if(\\\"object\\\"==typeof n&&n){if(4&i&&n.__esModule)return n;if(16&i&&\\\"function\\\"==typeof n.then)return n}var r=Object.create(null);o.r(r);var s={};e=e||[null,t({}),t([]),t(t)];for(var a=2&i&&n;\\\"object\\\"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((function(e){s[e]=function(){return n[e]}}));return s.default=function(){return n},o.d(r,s),r},o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})};var r={};return function(){\\\"use strict\\\";o.d(r,{component:function(){return u}});var e=coreApis.componentApis.styledComponent,t=o(986),n=o(709),i=o(605),s=coreApis.utils.urls;const a=[\\\"shift\\\",\\\"alt\\\",\\\"ctrl\\\",\\\"meta\\\"],l=lodash.once((e=>{const t=s.watchlaterUrls.some((e=>(0,i.matchUrlPattern)(e))),o=s.mediaListUrls.some((e=>(0,i.matchUrlPattern)(e))),r={enable:!0,bindings:e};return document.body.addEventListener(\\\"keydown\\\",(e=>{r.enable&&r.bindings.forEach((r=>{if(0===r.keys.length)return;if(!1!==r.action.ignoreTyping&&(0,i.isTyping)())return;const s=e.key.toLowerCase(),l=dq(\\\".bilibili-player-sphere-control\\\");if(null!==l&&\\\"none\\\"!==l.style.display&&[\\\"w\\\",\\\"a\\\",\\\"s\\\",\\\"d\\\"].includes(s))return;if(a.some((t=>{const n=r.keys.includes(t);if(r.keys.includes(`[${t}]`))return!1;return n!==e[`${t}Key`]})))return;const c=r.keys.filter((e=>!a.includes(e.toLowerCase()))).map((e=>e.toLowerCase()));if(!(c.includes(e.key.toLowerCase())||c.includes(e.code.toLowerCase())))return;const d=r.action.run({binding:r,isWatchlater:t,isMediaList:o,event:e,clickElement:n.$j,changeVideoTime:n.vN,showTip:n.kW}),p=!lodash.isNil(d);(r.action.prevent??p)&&(e.stopPropagation(),e.preventDefault())}))})),r}));var c=o(455);let d=null;const p=(0,e.styledComponentEntry)((()=>Promise.resolve().then(o.t.bind(o,233,23))),(async e=>{let{settings:i}=e;const o=()=>{const e=i.options.preset,t=c.um[e]||{},o=(e=>Object.entries(e).map((e=>{let[t,i]=e;return{keys:i.split(\\\" \\\").filter((e=>\\\"\\\"!==e)),action:n.Nw[t]||none}})))({...c.Wb,...t,...i.options.customKeyBindings});d?d.bindings=o:d=l(o)};(0,t.addComponentListener)(\\\"keymap.preset\\\",o,!0),(0,t.addComponentListener)(\\\"keymap.customKeyBindings\\\",o)})),u={name:\\\"keymap\\\",displayName:\\\"Âø´Êç∑ÈîÆÊâ©Â±ï\\\",tags:[componentsTags.video,componentsTags.utils],entry:p,unload:()=>{d&&(d.enable=!1)},reload:()=>{d&&(d.enable=!0)},description:{\\\"zh-CN\\\":\\\"‰∏∫ËÑöÊú¨ÁöÑÂäüËÉΩÂíå b Á´ôÁöÑÂäüËÉΩÂêØÁî®ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ, Âø´Êç∑ÈîÆÂàóË°®ÂèØÂú®`Âø´Êç∑ÈîÆËÆæÁΩÆ`‰∏≠Êü•ÁúãÂíåÈÖçÁΩÆ.\\\"},extraOptions:()=>Promise.resolve().then(o.bind(o,658)).then((e=>e.default)),options:{longJumpSeconds:{defaultValue:85,displayName:\\\"ÈïøË∑≥Ë∑ÉÁßíÊï∞\\\"},customKeyBindings:{defaultValue:{},displayName:\\\"Ëá™ÂÆö‰πâÈîÆ‰Ωç\\\",hidden:!0},preset:{defaultValue:\\\"Default\\\",displayName:\\\"È¢ÑËÆæ\\\",hidden:!0}},plugin:{displayName:\\\"Âø´Êç∑ÈîÆÊâ©Â±ï - ÊêúÁ¥¢ÊîØÊåÅ\\\",setup:e=>{let{addData:t}=e;t(\\\"launchBar.actions\\\",(e=>{e.push({name:\\\"keymapSettings\\\",getActions:async()=>[{name:\\\"Âø´Êç∑ÈîÆÊâ©Â±ïËÆæÁΩÆ\\\",description:\\\"Keymap Settings\\\",icon:\\\"mdi-keyboard-settings-outline\\\",action:async()=>{const{toggleKeymapSettings:e}=await Promise.resolve().then(o.bind(o,781));e()}}]})}))}},commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"}}(),r=r.component}()}));\",\"metadata\": {\"name\": \"keymap\",\"displayName\": \"Âø´Êç∑ÈîÆÊâ©Â±ï\",\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1},{\"name\": \"utils\",\"displayName\": \"Â∑•ÂÖ∑\",\"color\": \"#A36FFD\",\"icon\": \"mdi-rocket-launch-outline\",\"order\": 5}],\"description\": {\"zh-CN\": \"‰∏∫ËÑöÊú¨ÁöÑÂäüËÉΩÂíå b Á´ôÁöÑÂäüËÉΩÂêØÁî®ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ, Âø´Êç∑ÈîÆÂàóË°®ÂèØÂú®`Âø´Êç∑ÈîÆËÆæÁΩÆ`‰∏≠Êü•ÁúãÂíåÈÖçÁΩÆ.\"},\"options\": {\"longJumpSeconds\": {\"defaultValue\": 85,\"displayName\": \"ÈïøË∑≥Ë∑ÉÁßíÊï∞\"},\"customKeyBindings\": {\"defaultValue\": {},\"displayName\": \"Ëá™ÂÆö‰πâÈîÆ‰Ωç\",\"hidden\": true},\"preset\": {\"defaultValue\": \"Default\",\"displayName\": \"È¢ÑËÆæ\",\"hidden\": true}},\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {\"longJumpSeconds\": 85,\"customKeyBindings\": {\"previousFrame\": \"-\",\"nextFrame\": \"=\",\"videoSpeedIncrease\": \"r\",\"videoSpeedDecrease\": \"e\",\"videoSpeedToggle\": \"q\"},\"preset\": \"Default\"}}},\"bvidConvert\": {\"code\": \"!function(e,t){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=t():\\\"function\\\"==typeof define&&define.amd?define([],t):\\\"object\\\"==typeof exports?exports[\\\"video/bvid-convert\\\"]=t():e[\\\"video/bvid-convert\\\"]=t()}(self,(function(){return function(){var e={230:function(e,t,n){var i=n(645)((function(e){return e[1]}));i.push([e.id,\\\".bvid-convert {\\\\n  order: -1;\\\\n  flex-direction: column;\\\\n  border-radius: 4px;\\\\n  padding: 6px 8px;\\\\n  width: 100%;\\\\n  -webkit-user-select: text;\\\\n          user-select: text;\\\\n  box-sizing: border-box;\\\\n  box-shadow: 0 0 0 1px rgba(136, 136, 136, 0.2666666667);\\\\n  background-color: #fff;\\\\n}\\\\nbody.dark .bvid-convert {\\\\n  background-color: #333;\\\\n}\\\\n.bvid-convert-item {\\\\n  font-size: 14px;\\\\n  display: flex;\\\\n  align-items: center;\\\\n  gap: 6px;\\\\n}\\\\n.bvid-convert-item-copy {\\\\n  transition: transform 0.3s ease-out;\\\\n  cursor: pointer;\\\\n}\\\\n.bvid-convert-item-copy:active {\\\\n  transform: scale(0.9);\\\\n}\\\",\\\"\\\"]),e.exports=i},645:function(e){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\ne.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?\\\"@media \\\".concat(t[2],\\\" {\\\").concat(n,\\\"}\\\"):n})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\nt.i=function(e,n,i){\\\"string\\\"==typeof e&&(\\n// eslint-disable-next-line no-param-reassign\\ne=[[null,e,\\\"\\\"]]);var o={};if(i)for(var r=0;r<this.length;r++){\\n// eslint-disable-next-line prefer-destructuring\\nvar a=this[r][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);i&&o[c[0]]||(n&&(c[2]?c[2]=\\\"\\\".concat(n,\\\" and \\\").concat(c[2]):c[2]=n),t.push(c))}},t}},379:function(e,t,n){\\\"use strict\\\";var i,o=function(){return void 0===i&&(\\n// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\\n// @see https://github.com/webpack-contrib/style-loader/issues/177\\ni=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},i=[],o=0;o<e.length;o++){var r=e[o],c=t.base?r[0]+t.base:r[0],d=n[c]||0,u=\\\"\\\".concat(c,\\\" \\\").concat(d);n[c]=d+1;var l=s(u),f={css:r[1],media:r[2],sourceMap:r[3]};-1!==l?(a[l].references++,a[l].updater(f)):a.push({identifier:u,updater:b(f,t),references:1}),i.push(u)}return i}function d(e){var t=document.createElement(\\\"style\\\"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),\\\"function\\\"==typeof e.insert)e.insert(t);else{var a=r(e.insert||\\\"head\\\");if(!a)throw new Error(\\\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\\\");a.appendChild(t)}return t}var u,l=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join(\\\"\\\\n\\\")});function f(e,t,n,i){var o=n?\\\"\\\":i.media?\\\"@media \\\".concat(i.media,\\\" {\\\").concat(i.css,\\\"}\\\"):i.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}function p(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute(\\\"media\\\",o):e.removeAttribute(\\\"media\\\"),r&&\\\"undefined\\\"!=typeof btoa&&(i+=\\\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r)))),\\\" */\\\")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var v=null,m=0;function b(e,t){var n,i,o;if(t.singleton){var r=m++;n=v||(v=d(t)),i=f.bind(null,n,r,!1),o=f.bind(null,n,r,!0)}else n=d(t),i=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||\\\"boolean\\\"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],\\\"[object Array]\\\"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=s(n[i]);a[o].references--}for(var r=c(e,t),d=0;d<n.length;d++){var u=s(n[d]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=r}}}},512:function(e,t,n){\\\"use strict\\\";n.r(t),n.d(t,{default:function(){return _}});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\\\"div\\\",{staticClass:\\\"bvid-convert\\\"},[e.aid&&e.bvid?[n(\\\"div\\\",{staticClass:\\\"bvid-convert-item\\\"},[e._v(\\\"\\\\n      \\\"+e._s(e.aid)+\\\"\\\\n      \\\"),n(\\\"div\\\",{staticClass:\\\"bvid-convert-item-copy\\\",attrs:{title:\\\"Â§çÂà∂ÈìæÊé•\\\"},on:{click:function(t){return e.copyLink(\\\"aid\\\")}}},[n(\\\"VIcon\\\",{attrs:{size:16,icon:e.aidCopied?\\\"mdi-check\\\":\\\"mdi-link\\\"}})],1)]),e._v(\\\" \\\"),n(\\\"div\\\",{staticClass:\\\"bvid-convert-item\\\"},[e._v(\\\"\\\\n      \\\"+e._s(e.bvid)+\\\"\\\\n      \\\"),n(\\\"div\\\",{staticClass:\\\"bvid-convert-item-copy\\\",attrs:{title:\\\"Â§çÂà∂ÈìæÊé•\\\"},on:{click:function(t){return e.copyLink(\\\"bvid\\\")}}},[n(\\\"VIcon\\\",{attrs:{size:16,icon:e.bvidCopied?\\\"mdi-check\\\":\\\"mdi-link\\\"}})],1)])]:e._e()],2)};i._withStripped=!0;var o=coreApis.observer,r=coreApis.settings,a=n(200),s=coreApis.utils,c=coreApis.utils.title,d=n(457),u=coreApis.ui;const{options:l}=(0,r.getComponentSettings)(\\\"bvidConvert\\\");var f;!function(e){e.Aid=\\\"aid\\\",e.Bvid=\\\"bvid\\\"}(f||(f={}));const p=[f.Aid,f.Bvid],v=[e=>{let{id:t,query:n}=e;return p.some((e=>n.includes(`${e}=`)))?`https://www.bilibili.com/video/${t}`:null},e=>{let{id:t}=e;return d.bangumiUrls.some((e=>(0,s.matchUrlPattern)(e)))?`https://www.bilibili.com/video/${t}`:null},e=>{let{id:t,url:n,query:i}=e;return n.replace(/\\\\/[^\\\\/]+$/,`/${t}`)+i}];var m=Vue.extend({components:{VIcon:u.VIcon},data:()=>({aid:\\\"\\\",aidCopied:!1,bvid:\\\"\\\",bvidCopied:!1}),async mounted(){(0,o.videoChange)((async()=>{this.aid=`av${unsafeWindow.aid}`,this.bvid=unsafeWindow.bvid;const e=await(0,a.select)(\\\".av-link,.bv-link,.bvid-link\\\");e&&(this.bvid=e.innerHTML.trim())}))},methods:{async copyLink(e){if(this[`${e}Copied`])return;const t={query:location.search,url:location.origin+location.pathname,id:this[e]},n=v.map((e=>e(t))).filter((e=>null!==e))[0];l.copyWithTitle?await navigator.clipboard.writeText(`${(0,c.getFriendlyTitle)()} ${n}`):await navigator.clipboard.writeText(n),this[`${e}Copied`]=!0,setTimeout((()=>this[`${e}Copied`]=!1),1e3)}}}),b=n(379),h=n.n(b),y=n(230),g=n.n(y),x={insert:\\\"head\\\",singleton:!1};h()(g(),x),g().locals;var C=function(e,t,n,i,o,r,a,s){var c,d=\\\"function\\\"==typeof e?e.options:e;if(t&&(d.render=t,d.staticRenderFns=n,d._compiled=!0),i&&(d.functional=!0),r&&(d._scopeId=\\\"data-v-\\\"+r),a?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||\\\"undefined\\\"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},d._ssrRegister=c):o&&(c=s?function(){o.call(this,(d.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(d.functional){d._injectStyles=c;var u=d.render;d.render=function(e,t){return c.call(t),u(e,t)}}else{var l=d.beforeCreate;d.beforeCreate=l?[].concat(l,c):[c]}return{exports:e,options:d}}(m,i,[],!1,null,null,null);C.options.__file=\\\"registry/lib/components/video/bvid-convert/BvidConvert.vue\\\";var _=C.exports},200:function(e){\\\"use strict\\\";e.exports=coreApis.spinQuery},457:function(e){\\\"use strict\\\";e.exports=coreApis.utils.urls}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={id:i,exports:{}};return e[i](r,r.exports,n),r.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})};var i={};return function(){\\\"use strict\\\";n.d(i,{component:function(){return a}});var e=coreApis.componentApis.define,t=n(200),o=n(457);const r=(0,e.defineOptionsMetadata)({copyWithTitle:{defaultValue:!1,displayName:\\\"Â§çÂà∂ÈìæÊé•Êó∂Â∏¶‰∏äÊ†áÈ¢ò\\\"}}),a=(0,e.defineComponentMetadata)({name:\\\"bvidConvert\\\",displayName:\\\"BV Âè∑ËΩ¨Êç¢\\\",options:r,entry:none,description:{\\\"zh-CN\\\":\\\"Âú®ÂäüËÉΩÈù¢Êùø‰∏≠ÊòæÁ§∫ËßÜÈ¢ëÁöÑ AV Âè∑Âíå BV Âè∑.\\\"},tags:[componentsTags.video,componentsTags.utils],widget:{component:()=>Promise.resolve().then(n.bind(n,512)).then((e=>e.default)),condition:t.hasVideo},urlInclude:o.videoAndBangumiUrls,commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"})}(),i=i.component}()}));\",\"metadata\": {\"name\": \"bvidConvert\",\"displayName\": \"BV Âè∑ËΩ¨Êç¢\",\"options\": {\"copyWithTitle\": {\"defaultValue\": false,\"displayName\": \"Â§çÂà∂ÈìæÊé•Êó∂Â∏¶‰∏äÊ†áÈ¢ò\"}},\"description\": {\"zh-CN\": \"Âú®ÂäüËÉΩÈù¢Êùø‰∏≠ÊòæÁ§∫ËßÜÈ¢ëÁöÑ AV Âè∑Âíå BV Âè∑.\"},\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1},{\"name\": \"utils\",\"displayName\": \"Â∑•ÂÖ∑\",\"color\": \"#A36FFD\",\"icon\": \"mdi-rocket-launch-outline\",\"order\": 5}],\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {\"copyWithTitle\": false}}},\"extendVideoSpeed\": {\"code\": \"!function(e,t){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=t():\\\"function\\\"==typeof define&&define.amd?define([],t):\\\"object\\\"==typeof exports?exports[\\\"video/player/extend-speed\\\"]=t():e[\\\"video/player/extend-speed\\\"]=t()}(self,(function(){return function(){\\\"use strict\\\";var e={d:function(t,n){for(var s in n)e.o(n,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:n[s]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},t={};e.d(t,{component:function(){return Q}});var n=coreApis.utils.urls,s=coreApis.settings,i=coreApis.utils.log,o=coreApis.pluginApis.hook;const r=e=>\\\"function\\\"==typeof e?{next:e}:e,a=e=>function e(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,o=!1;const a=[],l=[];let c=!1;const d=()=>{for(;a.length;)a.pop()();l.length=0,c=!0},p=e=>{c||(l.forEach((t=>{var n;null===(n=t.error)||void 0===n||n.call(t,e),(0,s.getGeneralSettings)().devMode&&console.error(e)})),d())},u=e=>{c||l.forEach((t=>{try{t.next(e)}catch(e){p(e)}}))},h=()=>{l.forEach((e=>{var t;null===(t=e.complete)||void 0===t||t.call(e)})),d()},m=()=>{if(o)return;const e=null==t?void 0:t({next:u,error:p,complete:h});e&&a.push(e),o=!0},b=e=>null==e?null:(l.push(e),()=>{lodash.pull(l,e)}),v=function(){for(var t=arguments.length,n=new Array(t),s=0;s<t;s++)n[s]=arguments[s];return 0===n.length?{subscribe:e=>{const t=b(r(e));return((null==i?void 0:i.connect)??m)(),t},pipe:v,next:u,error:p,complete:h,...i}:e(n[0],{subscribe:b},i||{connect:m,next:u}).pipe(...n.slice(1))};if(n){const e=null==t?void 0:t({subscribe:e=>n.subscribe({error:p,complete:h,...r(e)}),next:u,error:p,complete:h});e&&a.push(e)}return v()}(e),l=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return a((e=>{let{next:n,complete:s}=e;t.forEach((e=>{n(e)})),s()}))},c=(e,t)=>a((n=>{let{next:s}=n;return e.addEventListener(t,s),()=>e.removeEventListener(t,s)})),d=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),s=1;s<t;s++)n[s-1]=arguments[s];return a((t=>{let{next:s}=t;e(...n,s)}))},p=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return a((e=>{let{next:n,complete:s}=e;const i=[...t],o=()=>{const e=i.shift();e||s(),e.subscribe({next:n,complete:()=>{o()}})};o()}))},u=e=>new Promise(((t,n)=>{const s=e.subscribe({next:e=>{t(e),s()},error:()=>{n(),s()},complete:()=>{n(),s()}})}));var h=coreApis.componentApis.video.playerAgent,m=coreApis.lifeCycle,b=coreApis.observer,v=coreApis.utils,f=coreApis.utils.sort;const y=e=>t=>{let{subscribe:n,next:s,complete:i,error:o}=t;n(lodash.mapValues({next:s,complete:i,error:o},(t=>e(t))))},g=e=>function(){for(var t=arguments.length,n=new Array(t),s=0;s<t;s++)n[s]=arguments[s];Promise.resolve().then((()=>e(...n)))},x=e=>{const t=new Set;return e((e=>{lodash.castArray(e).forEach((e=>{t.add(e)}))})),()=>{t.forEach((e=>{e()}))}},S=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return a((e=>{let{next:n,error:s,complete:i}=e;return x((e=>{const o=[];let r=0;e(t.map(((e,a)=>e.pipe(y(g)).subscribe({next:e=>{o[a]=e,o.reduce((e=>e+1),0)===t.length&&n(o.slice())},complete:()=>{r++,r===t.length&&i()},error:s})))),e((()=>{o.length=0,r=0}))}))}))},w=e=>t=>{let{subscribe:n,next:s,error:i}=t;n(lodash.debounce((e=>{try{s(e)}catch(e){i(e)}}),e))},E=e=>t=>{let{subscribe:n,next:s}=t;n((t=>{e(t)&&s(t)}))},$=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return e=>{let{next:n,subscribe:s}=e,i=!1;s((e=>{i||t.forEach((e=>n(e))),n(e),i=!0}))}};var C=coreApis.pluginApis.data;const V=e=>e.split(\\\",\\\").map((e=>e.trim().replace(/^\\\\./,\\\"\\\"))).join(\\\",\\\"),M=e=>e.split(\\\",\\\").join(\\\" \\\"),A=(e,t)=>{const n=t=>{(0,C.registerAndGetData)(e,t)[0]=t},s=(0,C.getData)(e);if(s.length)return[s[0],n];if(t){const e=t();return n(e),[e,n]}return[void 0,n]},L=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t&&1===e?\\\"ÂÄçÈÄü\\\":Math.trunc(e)===e?`${e}.0x`:`${e}x`},k=e=>{if(\\\"ÂÄçÈÄü\\\"===e)return 1;const t=/([0-9]*[.]?[0-9]+)x/.exec(e);if(t)return parseFloat(t[1]);throw new Error(`unknown speed text: ${e}`)};const N=h.playerAgent.provideCustomQuery({video:{speedMenuList:\\\".bilibili-player-video-btn-speed-menu,.bpx-player-ctrl-playbackrate-menu\\\",speedMenuItem:\\\".bilibili-player-video-btn-speed-menu-list,.bpx-player-ctrl-playbackrate-menu-item\\\",speedNameBtn:\\\".bilibili-player-video-btn-speed-name,.bpx-player-ctrl-playbackrate-result\\\",speedContainer:\\\".bilibili-player-video-btn-speed,.bpx-player-ctrl-playbackrate\\\",active:\\\".bilibili-player-active,.bpx-state-active\\\",show:\\\".bilibili-player-speed-show,.bpx-state-show\\\"},bangumi:{speedMenuList:\\\".squirtle-speed-select-list\\\",speedMenuItem:\\\".squirtle-select-item\\\",speedNameBtn:\\\".squirtle-speed-select-result\\\",speedContainer:\\\".squirtle-speed-wrap\\\",active:\\\".active\\\",show:\\\".bilibili-player-speed-show\\\"}});let O;!function(e){e[e.MIN=0]=\\\"MIN\\\",e[e.CURRENT=1]=\\\"CURRENT\\\",e[e.MAX=2]=\\\"MAX\\\"}(O||(O={}));const j=(e,t,n)=>{const s=new MutationObserver(n);return s.observe(e,t),s},T=e=>{let[t,n]=e;if(!t)throw new Error(\\\"speed container element not found!\\\");if(!n)throw new Error(\\\"video element not found!\\\");const s=t.querySelector(N.custom.speedNameBtn.selector),i=t.querySelector(N.custom.speedMenuList.selector);let o,r,l;const c=a(),d=a().pipe((e=>{let t,{subscribe:n,next:s}=e,i=!0;n((e=>{(i||t!==e)&&(i=!1,t=e,s(e))}))}));d.pipe($(void 0),(e=>{let{subscribe:t,next:n}=e;const s=[];return t((e=>{2===s.length&&s.shift(),s.push(e),2===s.length&&n(s.slice())})),()=>{s.length=0}})).subscribe((e=>{let[t,n]=e;r=t,o=n}));const p=e=>{if(e)switch(e.nodeType){case Node.TEXT_NODE:d.next(k(e.data));break;case Node.ELEMENT_NODE:d.next(k(e.innerHTML));break;default:console.warn(\\\"The target parameter of updateActiveVideoSpeed must be a Node, and the node type must be one of TEXT_NODE and ELEMENT_NODE\\\")}},u=()=>{l=lodash([...i.children]).map((e=>lodash.attempt((()=>k(e.textContent))))).reject((e=>lodash.isError(e))).sort((0,f.ascendingSort)()).value()};p(s),u();const h=j(i,{childList:!0,attributes:!0},(e=>{const{attributes:t=[],childList:n=[]}=lodash.groupBy(e,\\\"type\\\");n.length&&u(),c.next({attributes:t,childList:n})})),m=j(s,{childList:!0,subtree:!0},(e=>{e.forEach((e=>{const[t]=e.addedNodes;p(t)}))}));return{containerElement:t,videoElement:n,nameBtnElement:s,menuListElement:i,query:e=>(0,v.des)(`./*[(${function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\\\"or\\\";return e.split(\\\",\\\").map(V).flat().map((e=>`contains(@class, \\\"${e}\\\")`)).join(` ${t} `)}(N.custom.speedMenuItem.selector)}) and normalize-space()=\\\"${L(e)}\\\"]`,i),dispose:()=>{h.disconnect(),m.disconnect()},activeVideoSpeed$:d,menuListElementMutations$:c,getActiveVideoSpeed:()=>o,getOldActiveVideoSpeed:()=>r,getAvailableSpeedValues:()=>l}},I=e=>{const{videoElement:t,menuListElement:n}=e,s=c(n,\\\"click\\\").pipe((i=e=>{const{innerText:t,innerHTML:n}=e.target,s=t.trim()||n.trim();return lodash.attempt((()=>k(s)))},e=>{let{subscribe:t,next:n}=e;t((e=>{n(i(e))}))}),E((e=>!lodash.isError(e))));var i;const o=a((e=>{let{next:n}=e,s=t;do{s=Object.getPrototypeOf(s)}while(null===s||!Object.prototype.hasOwnProperty.call(s,\\\"playbackRate\\\"));const i=Object.getOwnPropertyDescriptor(s,\\\"playbackRate\\\");return Object.defineProperty(s,\\\"playbackRate\\\",{set(e){i.set.call(this,e),n(e)}}),()=>{Object.defineProperty(s,\\\"playbackRate\\\",i)}})),r=s.pipe((e=>{let t,{subscribe:n,next:s}=e,i=!0;n((e=>{(i||t!==e)&&(i=!1,t=e,s(e))}))})),l=o.pipe((e=>{let t,{subscribe:n,next:s}=e,i=!0;n((e=>{(i||t!==e)&&(i=!1,t=e,s(e))}))})),d=a((e=>{let{next:t}=e;const n=S(r,l);return n.subscribe((e=>{let[n,s]=e;n===s&&t(s)})),()=>n.complete()})).pipe((e=>{let t,{subscribe:n,next:s}=e,i=!0;n((e=>{(i||t!==e)&&(i=!1,t=e,s(e))}))}));let p;l.pipe(w(200),$(void 0),(e=>{let{subscribe:t,next:n}=e;const s=[];return t((e=>{2===s.length&&s.shift(),s.push(e),2===s.length&&n(s.slice())})),()=>{s.length=0}})).subscribe((e=>{let[t]=e;p=t}));const u={menuListElementClickSpeed$:s,menuListElementClickSpeedChange$:r,playbackRate$:o,playbackRateChange$:l,videoSpeedChange$:d};return{...e,...u,dispose:()=>{lodash.values(u).forEach((e=>{e.complete()})),e.dispose()},getOldPlaybackRate:()=>p}},[R]=A(\\\"speed.NoSuchSpeedMenuItemElementError\\\",(()=>class extends Error{constructor(e){const t=lodash.attempt((()=>L(e))),n=lodash.isError(t)?String(e):String(t);var s,i,o;super(`There is no such speed menu item as ${n}`),this.speed=e,o=void 0,(i=\\\"formattedSpeed\\\")in(s=this)?Object.defineProperty(s,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):s[i]=o,this.formattedSpeed=n}})),P=e=>{const{query:t,videoElement:n,videoSpeedChange$:s,getOldActiveVideoSpeed:i,getAvailableSpeedValues:o,getActiveVideoSpeed:r}=e,a=async function(e){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:200;const o=t(e);if(null==o)throw new R(e);o.click();const r=t=>{if((t??n.playbackRate)!==e)throw new Error(`failed to set ${L(e)} video speed.`)},a=[u(s.pipe(w(Math.max(0,i||0))))];i>0&&a.push(new Promise(((e,t)=>setTimeout((()=>setTimeout(t,i)))))),await Promise.all(a).then(r).catch(r)},l=async()=>{await a(1)},c=async(e,t)=>{if(lodash.isNil(e)&&(e=!1),\\\"boolean\\\"==typeof e)e||1===n.playbackRate?await a(i()):await l();else{const n=o();switch(t){case O.MIN:await a(n[e]);break;case O.MAX:await a(n[n.length-1+e]);break;case O.CURRENT:default:{const t=n.indexOf(r());if(-1===t)throw new Error(\\\"Unexpected Error: The available speed values do not include the active speed value, this should be a bug, please report the issue on github!\\\");await a(n[t+e])}}}},d=async e=>{try{await c(e,O.CURRENT)}catch(e){if(console.warn(e),!(e instanceof R))throw e}};return Object.assign(e,{set:a,force:async e=>{n.playbackRate=e},reset:l,toggle:c,step:d,increase:async()=>{await d(1)},decrease:async()=>{await d(-1)}})},q=()=>A(\\\"speed.speedContext\\\"),U=()=>A(\\\"speed.buildArguments$\\\",(()=>{return a().pipe((e=e=>e.settings.enabled,t=>{let{subscribe:n,next:s}=t;const i=new Set;return n((t=>{const n=i.size;e(t)?i.add(t):i.delete(t),i.size!==n&&s([...i])})),()=>{i.clear()}}));var e})),z=async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:lodash.identity;const[t,n]=q();if(t)return t;let s,i;const[o]=A(\\\"lifeCycleComponentLoaded$\\\",(()=>c(unsafeWindow,m.LifeCycleEventTypes.ComponentsLoaded))),[r]=U(),[h]=A(\\\"speed.videoChange$\\\",(()=>d(b.videoChange).pipe(E((e=>{let{aid:t,cid:n}=e;return t||n}))))),[v]=A(\\\"speed.speedContext$\\\",(()=>a((t=>{let{next:n}=t;return S(h,p(l([]),r),o).subscribe((t=>{var o;let[r,a]=t;const[l]=q();null==l||l.dispose(),null===(o=i)||void 0===o||o(\\\"context update\\\");const c=new Promise(((e,t)=>{s=e,i=t}));Promise.all([Promise.all([N.custom.speedContainer(),N.query.video.element()]).then(s),c]).then((e=>{let[,t]=e;return t})).then(T).then(I).then(P).then((e=>Object.assign(e,{videoIdObject:r,speedContext$:v,videoChange$:h}))).then(e(a)).then(n).catch((e=>console.error(e)))}))}))));return v.subscribe(n),u(v)};function H(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const B=[.5,.75,1,1.25,1.5,2],D=.0625;class X{constructor(e){var t;this.entryContext=e,H(this,\\\"speedContext\\\",void 0),H(this,\\\"settings\\\",void 0),H(this,\\\"coreApis\\\",void 0),H(this,\\\"metadata\\\",void 0),H(this,\\\"options\\\",void 0),H(this,\\\"getVideoIdObject\\\",void 0),H(this,\\\"getAvailableSpeedValues\\\",void 0),H(this,\\\"getOldActiveVideoSpeed\\\",void 0),H(this,\\\"forceVideoSpeed\\\",void 0),H(this,\\\"getVideoSpeed\\\",void 0),H(this,\\\"setVideoSpeed\\\",void 0),H(this,\\\"resetVideoSpeed\\\",void 0),H(this,\\\"toggleVideoSpeed\\\",void 0),H(this,\\\"increaseVideoSpeed\\\",void 0),H(this,\\\"decreaseVideoSpeed\\\",void 0),lodash.assign(this,e,{options:e.settings.options}),null===(t=this.migrate)||void 0===t||t.call(this),lodash.assign(this,lodash.mapValues(X.contextMap,(e=>async function(){const t=await z(),n=lodash.get(t,e),s=lodash.isFunction(n)?await n(...arguments):n;return s})))}}H(X,\\\"create\\\",void 0),H(X,\\\"contextMap\\\",{getVideoIdObject:\\\"videoIdObject\\\",getAvailableSpeedValues:\\\"getAvailableSpeedValues\\\",getOldActiveVideoSpeed:\\\"getOldActiveVideoSpeed\\\",getVideoSpeed:\\\"videoElement.playbackRate\\\",setVideoSpeed:\\\"set\\\",forceVideoSpeed:\\\"force\\\",resetVideoSpeed:\\\"reset\\\",toggleVideoSpeed:\\\"toggle\\\",increaseVideoSpeed:\\\"increase\\\",decreaseVideoSpeed:\\\"decrease\\\"}),z((e=>t=>{const n=lodash.omit(t,\\\"dispose\\\"),i=e.map((e=>e.getSpeedContextMixin(n)));if(i.length>1){const e=lodash.intersection(...i.map(Object.keys));if(e.length)throw new Error(`In the registered speed component, there is an implementation of getSpeedContextMixin that causes the speed context to be mixed in ambiguous.\\\\nThe repeated key names are ${e.join(\\\", \\\")}`)}lodash.assign(n,...i);const o=[];return e.forEach((e=>{const t=lodash(e.settings.options).mapValues(((t,n)=>d(s.addComponentListener,`${e.metadata.name}.${n}`).pipe((e=>{let t,{subscribe:n,next:s}=e,i=!0;n((e=>{(i||t!==e)&&(i=!1,t=e,s(e))}))})))).mapKeys(((e,t)=>`${t}$`)).value();o.push(...lodash.values(t)),e.options=new Proxy(e.settings.options,{get:(e,n,s)=>lodash.isSymbol(n)?Reflect.get(e,n,s):!Reflect.has(e,n)&&n.endsWith(\\\"$\\\")?t[n]:Reflect.get(e,n,s)}),e.speedContext=n,e.onSpeedContext(n),e.settings.enabled&&lodash(t).entries().forEach((t=>{let[n,s]=t;s.next(e.settings.options[n.slice(0,-1)])}))})),{...n,dispose:()=>{o.forEach((e=>e.complete())),t.dispose()}}})),X.create=function(e){const t=a().pipe((e=>{let t,{subscribe:n,next:s}=e,i=!0;n((e=>{(i||t!==e)&&(i=!1,t=e,s(e))}))}));return{...e,entry:n=>{const s=lodash.attempt((()=>new this(n)));if(s instanceof Error)return(0,i.logError)(s),null;const[r]=U();return t.subscribe((()=>{r.next(s)})),r.next(s),(0,o.getHook)(`speed.component.${e.name}`).after(s),s},reload:()=>t.next(!0),unload:()=>t.next(!1)}};var W=coreApis.style,F=coreApis.toast;const _=e=>{let t,{style:n,name:s,container:i}=e;const o=()=>{var e;return null===(e=t)||void 0===e?void 0:e.remove()};return{next:e=>{o();const r=\\\"function\\\"==typeof n?n(e):n;r&&(t=(0,W.addStyle)(r,s,i))},complete:o}};function G(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const J=function(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=document.createElement(\\\"div\\\");n.innerHTML=e;const s={},i=n.children.item(0),o=e=>{t&&(e.id=`scoped-element-${Math.random().toString(36).replace(/[^a-z0-9]+/g,\\\"\\\")}`);const n=e.getAttribute(\\\"data-ref\\\");n&&(s[lodash.camelCase(n)]=e);for(let t=0;t<e.children.length;t++)o(e.children.item(t))};return o(i),{...s,root:i}};class K extends X{constructor(){super(...arguments),G(this,\\\"elementMap\\\",[]),G(this,\\\"inputElement\\\",void 0),G(this,\\\"unpatch\\\",void 0),G(this,\\\"currentSpeedValue\\\",void 0),G(this,\\\"filterNativeSpeed\\\",(()=>e=>{let{subscribe:t,next:n}=e;t((e=>{B.includes(e)&&n(e)}))}))}static get activeClassName(){return V(N.custom.active.selector)}static get showClassName(){return V(N.custom.show.selector)}static get speedMenuItemClassName(){return V(N.custom.speedMenuItem.selector)}addSpeedValue(e){this.options.extendSpeedList=lodash.sortedUniq(this.options.extendSpeedList.concat(e).sort((0,f.ascendingSort)()))}removeSpeedValue(e){this.options.extendSpeedList=lodash.without(this.options.extendSpeedList,e)}createInputElement(){const{input:e,root:t,icon:n}=J(`\\\\n      <li class=\\\"${M(V(N.custom.speedMenuItem.selector))} extend-speed-input\\\">\\\\n        <i data-ref=\\\"icon\\\" class=\\\"mdi mdi-playlist-plus\\\" style=\\\"font-size: 1.5em\\\"></i>\\\\n        <input data-ref=\\\"input\\\" type=\\\"number\\\" title=\\\"Ê∑ªÂä†Êñ∞ÁöÑÂÄçÊï∞ÂÄº\\\" max=\\\"16\\\" step=\\\"0.5\\\" style=\\\"display: none;\\\"></input>\\\\n      </li>\\\\n    `),s=()=>{const t=this.speedContext.getAvailableSpeedValues().slice(-1)[0]+.5,n=lodash.toString(t>16?null:t);e.value=n,e.min=n};this.options.extendSpeedList$.pipe(y(g)).subscribe(s);const o=(0,W.addStyle)(`\\\\n      #${e.id} {\\\\n        font-size: inherit;\\\\n        color: inherit;\\\\n        line-height: inherit;\\\\n        background: transparent;\\\\n        outline: none;\\\\n        width: 100%;\\\\n        border: none;\\\\n        text-align: center;\\\\n        cursor: text;\\\\n      }\\\\n      /* https://stackoverflow.com/a/4298216 */\\\\n      /* Chrome */\\\\n      #${e.id}::-webkit-outer-spin-button,\\\\n      #${e.id}::-webkit-inner-spin-button {\\\\n        -webkit-appearance: none;\\\\n        margin: 0;\\\\n      }\\\\n      /* Firefox */\\\\n      #${e.id}[type=number] {\\\\n        -moz-appearance:textfield;\\\\n      }\\\\n    `),r=lodash.over(c(e,\\\"keydown\\\").pipe(w(200)).subscribe((t=>{let{key:n}=t;if(\\\"Enter\\\"!==n)return;const s=parseFloat(e.value);try{if(!lodash.isFinite(s))throw new Error(\\\"Êó†ÊïàÁöÑÂÄçÊï∞ÂÄº\\\");if(s<D)throw new Error(\\\"ÂÄçÊï∞ÂÄºÂ§™Â∞è‰∫Ü\\\");if(s>16)throw new Error(\\\"ÂÄçÊï∞ÂÄºÂ§™Â§ß‰∫Ü\\\");if(this.speedContext.getAvailableSpeedValues().includes(s))throw new Error(\\\"‰∏çËÉΩÈáçÂ§çÊ∑ªÂä†Â∑≤ÊúâÁöÑÂÄçÊï∞ÂÄº\\\");this.addSpeedValue(s)}catch(t){(0,i.logError)(String(t),5e3),e.focus(),e.select()}})),c(t,\\\"mouseenter\\\").subscribe((()=>{e.style.display=\\\"inline\\\",n.style.display=\\\"none\\\",s(),setTimeout((()=>e.focus()))})),c(t,\\\"mouseleave\\\").subscribe((()=>{e.style.display=\\\"none\\\",n.style.display=\\\"inline\\\"})),(()=>t.remove()),(()=>o.remove()));return{node:t,destroy:r}}createCustomSpeedMenuItemElement(e){const{closeBtn:t,root:n}=J(`\\\\n      <li class=\\\"${M(V(N.custom.speedMenuItem.selector))} extend-speed-item\\\" data-value=\\\"${e}\\\">\\\\n        ${L(e)}\\\\n        <i data-ref=\\\"close-btn\\\" class=\\\"mdi mdi-close-circle\\\"></i>\\\\n      </li>\\\\n    `),s=(0,W.addStyle)(`\\\\n      .extend-speed-item [data-ref=\\\"close-btn\\\"] {\\\\n        color: inherit;\\\\n        opacity: 0.5;\\\\n        display: none;\\\\n        position: absolute;\\\\n        right: 4px;\\\\n      }\\\\n      :is(${N.custom.speedMenuItem.selector}):not(${N.custom.active.selector}):hover [data-ref=\\\"close-btn\\\"] {\\\\n        display: inline;\\\\n      }\\\\n      .extend-speed-item [data-ref=\\\"close-btn\\\"]:hover {\\\\n        opacity: 1;\\\\n        transition: all .3s;\\\\n      }\\\\n    `),i=lodash.over(c(t,\\\"click\\\").subscribe((()=>{this.removeSpeedValue(e)})),(()=>n.remove()),(()=>s.remove()));return{tag:e,node:n,destroy:i}}migrate(){const{options:e}=this.settings,{options:t}=(0,s.getComponentSettings)(\\\"rememberVideoSpeed\\\");t.extendList&&(e.extendSpeedList=Array.from(t.extendList),delete t.extendList,delete t.extend,F.Toast.success(\\\"‰ªé„ÄåÂÄçÈÄüËÆ∞ÂøÜ„ÄçÁªÑ‰ª∂ËøÅÁßªÊóßÈÖçÁΩÆÊàêÂäü\\\",\\\"„ÄêÊâ©Â±ïÂÄçÈÄü„ÄëÊóßÈÖçÁΩÆËøÅÁßªÂÆåÊàê\\\",8e3))}// eslint-disable-next-line class-methods-use-this\\ngetSpeedContextMixin(e){let{menuListElement:t}=e;return{query:e=>(0,v.des)(`./*[(${K.speedMenuItemClassName.split(\\\",\\\").map((e=>`contains(@class, \\\"${e}\\\")`)).join(\\\" or \\\")}) and not(contains(@class, \\\"extend-speed-input\\\")) and normalize-space()=\\\"${L(e)}\\\"]`,t)}}onSpeedContext(e){let{menuListElementClickSpeedChange$:t,playbackRate$:n}=e;this.options.extendSpeedList$.subscribe({next:e=>this.patch(((e,t)=>{let n=0,s=e.length,i=0,o=t.length;for(;n<s&&i<o&&e[n]===t[i];)n++,i++;for(;n<s&&i<o&&e[s-1]===t[o-1];)s--,o--;return[n,s-n,t.slice(i,o)]})(this.elementMap.map((e=>e.tag)),Array.from(e))),complete:()=>{this.unpatch()}}),this.options.maxMenuHeight$.subscribe(_({name:\\\"extend-video-speed-style\\\",style:e=>`\\\\n                  ${N.custom.speedMenuList.selector} {\\\\n                    display: flex !important; /* Èò≤Ê≠¢3.XÊ†∑ÂºèË¶ÜÁõñ */\\\\n                    flex-direction: column;\\\\n                    justify-content: center; /* Ê∑ªÂä†ÂÄçÈÄüÈÇ£‰∏ÄÈ°πÔºåÂΩìÈº†Ê†áÂú®‰∏äÂçäÈÉ®ÂàÜ‰ºöÊúâËé´ÂêçÂÖ∂Â¶ôÁöÑ'mouseleave', Áî®Ëøô‰∏™‰øÆÂ§ç */\\\\n                    overflow-y: auto;\\\\n                    max-height: ${e}px;\\\\n                    visibility: hidden;\\\\n                  }\\\\n                  /* ‰øÆÂ§ç2.XÂÄçÈÄüÂàóË°®ÊòæÁ§∫ÈóÆÈ¢ò */\\\\n                  :is(${N.custom.show.selector}) :is(${N.custom.speedMenuList.selector}){\\\\n                    visibility: visible;\\\\n                  }\\\\n                  /* ‰øÆÂ§çÁï™ÂâßÂå∫ÁöÑÂàóË°®ÊòæÁ§∫ÈóÆÈ¢ò */\\\\n                  :is(${N.custom.speedMenuList.selector})[style*=\\\"block\\\"] {\\\\n                    visibility: visible;\\\\n                  }`})),this.options.hideScrollbar$.subscribe(_({name:\\\"extend-video-speed-no-scrollbar-style\\\",style:e=>e&&`\\\\n                ${N.custom.speedMenuList.selector} {\\\\n                  scrollbar-width: none !important;\\\\n                  overscroll-behavior: contain;\\\\n                }\\\\n                :is(${N.custom.speedMenuList.selector})::-webkit-scrollbar {\\\\n                    height: 0 !important;\\\\n                    width: 0 !important;\\\\n                }`}));let s=1;n.pipe(E((e=>B.includes(e)))).subscribe((e=>{s=e})),t.subscribe({next:e=>{this.forceVideoSpeedWithUpdateStyle(e),this.currentSpeedValue=e},complete:()=>{this.setVideoSpeed(s),this.forceVideoSpeedWithUpdateStyle(s)}}),this.currentSpeedValue&&requestIdleCallback((()=>{this.setVideoSpeed(this.currentSpeedValue,1e3)}))}async forceVideoSpeedWithUpdateStyle(e){await this.forceVideoSpeed(e),setTimeout((()=>this.forceUpdateStyle(e)))}patch(e){const[t,n,s]=e,{menuListElement:i}=this.speedContext;if(this.inputElement||(this.inputElement=this.createInputElement(),i.prepend(this.inputElement.node)),0===n&&0===s.length)return;const o=s.map((e=>this.createCustomSpeedMenuItemElement(e)));this.elementMap.splice(t,n,...o).forEach((e=>{e.destroy()})),(this.elementMap[t-1]||this.inputElement).node.after(...o.map((e=>e.node)).reverse()),i.querySelectorAll(`:is(${N.custom.speedMenuItem.selector}):not(#${this.inputElement.node.id})`).forEach((e=>{e.style.order=(1e4*(16-k(e.innerHTML))).toString()})),this.unpatch=()=>{this.inputElement.destroy(),this.inputElement=void 0,this.elementMap.forEach((e=>e.destroy())),this.elementMap.length=0}}forceUpdateStyle(e){const{menuListElement:t,containerElement:n,nameBtnElement:s,query:i}=this.speedContext;for(const e of(0,v.dea)(`./*[(${V(K.speedMenuItemClassName).split(\\\",\\\").map((e=>`contains(@class, \\\"${e}\\\")`)).join(\\\" or \\\")}) and (${V(K.activeClassName).split(\\\",\\\").map((e=>`contains(@class, \\\"${e}\\\")`)).join(\\\" or \\\")})]`,t))e.classList.remove(...K.activeClassName.split(\\\",\\\"));i(e).classList.add(...K.activeClassName.split(\\\",\\\")),n.classList.remove(...K.showClassName.split(\\\",\\\")),s.innerText=L(e,!0)}}const Q=K.create({name:\\\"extendVideoSpeed\\\",displayName:\\\"Êâ©Â±ïÂÄçÈÄü\\\",author:{name:\\\"JLoeve\\\",link:\\\"https://github.com/LonelySteve\\\"},description:{\\\"zh-CN\\\":\\\"\\\\n\\\\n> Êâ©Â±ïËßÜÈ¢ëÊí≠ÊîæÂô®ÁöÑÂÄçÈÄüËèúÂçïÈ°πÔºåÂèØÁî®‰∫éÁ™ÅÁ†¥ÂéüÊúâÊí≠ÊîæÂÄçÊï∞ÁöÑ‰∏äÈôêÊàñ‰∏ãÈôê.\\\\n\\\\n### üîß **ÈÄâÈ°π**\\\\n\\\\n- `ÈöêËóèÊªöÂä®Êù°`ÔºöÂ¶ÇÊûúÊ∑ªÂä†ÁöÑÂÄçÈÄüËøáÂ§öÔºåÂÄçÈÄüËèúÂçïÂ∞ÜÂá∫Áé∞ÊªöÂä®Êù°ÔºåÂú® Windows ‰∏ãÔºåËã•Ê≤°ÊúâÂÆâË£ÖÂπ∂ÂêØÁî®„ÄåÁªÜÊªöÂä®Êù°„ÄçÁªÑ‰ª∂‰ºöÊòæÂæóÊØîËæÉÊå§ÔºåÂª∫ËÆÆÂºÄÂêØÊ≠§ÈÄâÈ°πÈöêËóèÊªöÂä®Êù°.\\\\n\\\\n### **Êñ∞Â¢ûÂÄçÈÄü**\\\\n\\\\nÂºÄÂêØÁªÑ‰ª∂ÂêéÔºåÂú®ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÊí≠ÊîæÂô®ÁöÑÂÄçÈÄüËèúÂçïÂ∞±‰ºöÊñ∞Â¢û 2.5x Âíå 3.0x ‰∏§‰∏™ÂÄçÈÄüÈÄâÈ°π.\\\\n\\\\nÂ¶ÇÊûúÈúÄË¶ÅÊ∑ªÂä†Êõ¥Â§öÂÄçÈÄüÔºåÂè™ÈúÄÂ∞ÜÈº†Ê†áÊåáÈíàÁßªÂà∞ËèúÂçïÈ°∂ÈÉ®ÁöÑÊñ∞Â¢ûÂõæÊ†á‰∏äÔºåÂõæÊ†áÂ∞ÜÂèòÊàê‰∏Ä‰∏™ËæìÂÖ•Ê°ÜÔºåÊ†πÊçÆÈúÄË¶ÅÈîÆÂÖ•Êñ∞ÁöÑÂÄçÈÄüÂÄºÔºåÊàñÈÄöËøáÊªöËΩÆÂ¢ûÂáèÊï∞ÂÄºÔºåÊàñÁõ¥Êé•‰ΩøÁî®Êé®ËçêÁöÑÊï∞ÂÄºÔºåÂõûËΩ¶Á°ÆËÆ§Âç≥ÂèØ.\\\\n\\\\nÊñ∞Â¢ûÂÄçÈÄüÁöÑËåÉÂõ¥Ë¶ÅÊ±ÇÂú® 0.0625 Âà∞ 16 ‰πãÈó¥ÔºåÊï∞ÈáèÂàô‰∏çÂèóÈôêÂà∂.\\\\n\\\\n**‰∏çÊé®ËçêËÆæÁΩÆË∂ÖÈ´òÂÄçÈÄüÔºà>3.0xÔºâ**ÔºöÂéüÁîüÊí≠ÊîæÂô®ÂÜÖÈÉ®Ê≤°ÊúâÈíàÂØπË∂ÖÈ´òÂÄçÈÄüËøõË°å‰ºòÂåñÔºåÂèØËÉΩÂØºËá¥Èü≥Áîª‰∏çÂêåÊ≠•„ÄÅÊí≠ÊîæÂç°È°ø„ÄÅÂ£∞Èü≥ÂòàÊùÇ/Ê∂àÂ§±Á≠â‰∏ÄÁ≥ªÂàóÈóÆÈ¢ò.\\\\n\\\\n### **Âà†Èô§ÂÄçÈÄü**\\\\n\\\\nÂ∞ÜÈº†Ê†áÊåáÈíàÁßªÂà∞**Ëá™ÂÆö‰πâ**ÁöÑÂÄçÈÄüËèúÂçïÈ°π‰∏äÔºåÂÖ∂Âè≥‰æßÂ∞Ü‰ºöÊòæÁ§∫‰∏Ä‰∏™ÁßªÈô§ÂõæÊ†áÔºåÂçïÂáªÂç≥ÂèØÂà†Èô§Áõ∏Â∫îÁöÑÂÄçÈÄü.\\\\n\\\\n\\\"},tags:[componentsTags.video],urlInclude:n.playerUrls,options:{maxMenuHeight:{displayName:\\\"ÂÄçÈÄüËèúÂçïÊúÄÂ§ßÈ´òÂ∫¶\\\",defaultValue:360,hidden:!0,validator:e=>Math.max(parseInt(e),360)||360},hideScrollbar:{displayName:\\\"ÈöêËóèÊªöÂä®Êù°\\\",defaultValue:!1},extendSpeedList:{displayName:\\\"Êâ©Â±ïÂÄçÈÄüÂàóË°®\\\",defaultValue:[2.5,3],hidden:!0}},commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"});return t=t.component}()}));\",\"metadata\": {\"name\": \"extendVideoSpeed\",\"displayName\": \"Êâ©Â±ïÂÄçÈÄü\",\"author\": {\"name\": \"JLoeve\",\"link\": \"https://github.com/LonelySteve\"},\"description\": {\"zh-CN\": \"\\n\\n> Êâ©Â±ïËßÜÈ¢ëÊí≠ÊîæÂô®ÁöÑÂÄçÈÄüËèúÂçïÈ°πÔºåÂèØÁî®‰∫éÁ™ÅÁ†¥ÂéüÊúâÊí≠ÊîæÂÄçÊï∞ÁöÑ‰∏äÈôêÊàñ‰∏ãÈôê.\\n\\n### üîß **ÈÄâÈ°π**\\n\\n- `ÈöêËóèÊªöÂä®Êù°`ÔºöÂ¶ÇÊûúÊ∑ªÂä†ÁöÑÂÄçÈÄüËøáÂ§öÔºåÂÄçÈÄüËèúÂçïÂ∞ÜÂá∫Áé∞ÊªöÂä®Êù°ÔºåÂú® Windows ‰∏ãÔºåËã•Ê≤°ÊúâÂÆâË£ÖÂπ∂ÂêØÁî®„ÄåÁªÜÊªöÂä®Êù°„ÄçÁªÑ‰ª∂‰ºöÊòæÂæóÊØîËæÉÊå§ÔºåÂª∫ËÆÆÂºÄÂêØÊ≠§ÈÄâÈ°πÈöêËóèÊªöÂä®Êù°.\\n\\n### **Êñ∞Â¢ûÂÄçÈÄü**\\n\\nÂºÄÂêØÁªÑ‰ª∂ÂêéÔºåÂú®ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåÊí≠ÊîæÂô®ÁöÑÂÄçÈÄüËèúÂçïÂ∞±‰ºöÊñ∞Â¢û 2.5x Âíå 3.0x ‰∏§‰∏™ÂÄçÈÄüÈÄâÈ°π.\\n\\nÂ¶ÇÊûúÈúÄË¶ÅÊ∑ªÂä†Êõ¥Â§öÂÄçÈÄüÔºåÂè™ÈúÄÂ∞ÜÈº†Ê†áÊåáÈíàÁßªÂà∞ËèúÂçïÈ°∂ÈÉ®ÁöÑÊñ∞Â¢ûÂõæÊ†á‰∏äÔºåÂõæÊ†áÂ∞ÜÂèòÊàê‰∏Ä‰∏™ËæìÂÖ•Ê°ÜÔºåÊ†πÊçÆÈúÄË¶ÅÈîÆÂÖ•Êñ∞ÁöÑÂÄçÈÄüÂÄºÔºåÊàñÈÄöËøáÊªöËΩÆÂ¢ûÂáèÊï∞ÂÄºÔºåÊàñÁõ¥Êé•‰ΩøÁî®Êé®ËçêÁöÑÊï∞ÂÄºÔºåÂõûËΩ¶Á°ÆËÆ§Âç≥ÂèØ.\\n\\nÊñ∞Â¢ûÂÄçÈÄüÁöÑËåÉÂõ¥Ë¶ÅÊ±ÇÂú® 0.0625 Âà∞ 16 ‰πãÈó¥ÔºåÊï∞ÈáèÂàô‰∏çÂèóÈôêÂà∂.\\n\\n**‰∏çÊé®ËçêËÆæÁΩÆË∂ÖÈ´òÂÄçÈÄüÔºà>3.0xÔºâ**ÔºöÂéüÁîüÊí≠ÊîæÂô®ÂÜÖÈÉ®Ê≤°ÊúâÈíàÂØπË∂ÖÈ´òÂÄçÈÄüËøõË°å‰ºòÂåñÔºåÂèØËÉΩÂØºËá¥Èü≥Áîª‰∏çÂêåÊ≠•„ÄÅÊí≠ÊîæÂç°È°ø„ÄÅÂ£∞Èü≥ÂòàÊùÇ/Ê∂àÂ§±Á≠â‰∏ÄÁ≥ªÂàóÈóÆÈ¢ò.\\n\\n### **Âà†Èô§ÂÄçÈÄü**\\n\\nÂ∞ÜÈº†Ê†áÊåáÈíàÁßªÂà∞**Ëá™ÂÆö‰πâ**ÁöÑÂÄçÈÄüËèúÂçïÈ°π‰∏äÔºåÂÖ∂Âè≥‰æßÂ∞Ü‰ºöÊòæÁ§∫‰∏Ä‰∏™ÁßªÈô§ÂõæÊ†áÔºåÂçïÂáªÂç≥ÂèØÂà†Èô§Áõ∏Â∫îÁöÑÂÄçÈÄü.\\n\\n\"},\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1}],\"options\": {\"maxMenuHeight\": {\"displayName\": \"ÂÄçÈÄüËèúÂçïÊúÄÂ§ßÈ´òÂ∫¶\",\"defaultValue\": 360,\"hidden\": true},\"hideScrollbar\": {\"displayName\": \"ÈöêËóèÊªöÂä®Êù°\",\"defaultValue\": false},\"extendSpeedList\": {\"displayName\": \"Êâ©Â±ïÂÄçÈÄüÂàóË°®\",\"defaultValue\": [2.5,3],\"hidden\": true}},\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {\"maxMenuHeight\": 360,\"hideScrollbar\": true,\"extendSpeedList\": [0.25,1.75,2.5]}}},\"removePlayerPopup\": {\"code\": \"!function(e,o){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=o():\\\"function\\\"==typeof define&&define.amd?define([],o):\\\"object\\\"==typeof exports?exports[\\\"video/player/remove-popup\\\"]=o():e[\\\"video/player/remove-popup\\\"]=o()}(self,(function(){return function(){var e,o,p={926:function(e,o,p){var r=p(645)((function(e){return e[1]}));r.push([e.id,\\\"body.remove-player-popup-combo-likes .bilibili-player-video-popup-three,\\\\nbody.remove-player-popup-combo-likes .bilibili-player-video-popup-three-animate,\\\\nbody.remove-player-popup-combo-likes .bilibili-player-video-popup-follow,\\\\nbody.remove-player-popup-combo-likes .bilibili-player-video-popup-there-cyc,\\\\nbody.remove-player-popup-combo-likes .bpx-player-popup-three,\\\\nbody.remove-player-popup-combo-likes .bpx-player-popup-animate,\\\\nbody.remove-player-popup-combo-likes .bpx-player-popup-follow,\\\\nbody.remove-player-popup-combo-likes .bpx-player-popup-cyc {\\\\n  display: none !important;\\\\n}\\\\nbody.remove-player-popup-related-videos .bilibili-player-video-link,\\\\nbody.remove-player-popup-related-videos .bilibili-player-link,\\\\nbody.remove-player-popup-related-videos .bpx-player-link {\\\\n  display: none !important;\\\\n}\\\\nbody.remove-player-popup-votes .bilibili-player-video-popup-vote,\\\\nbody.remove-player-popup-votes .bpx-player-popup-dm-close,\\\\nbody.remove-player-popup-votes .bpx-player-popup-dm-shrink,\\\\nbody.remove-player-popup-votes .bpx-player-popup-vote {\\\\n  display: none !important;\\\\n}\\\\nbody.remove-player-popup-rates .bilibili-player-score,\\\\nbody.remove-player-popup-rates .bpx-player-popup-dm-close,\\\\nbody.remove-player-popup-rates .bpx-player-score-summary-wrap,\\\\nbody.remove-player-popup-rates .bpx-player-score {\\\\n  display: none !important;\\\\n}\\\",\\\"\\\"]),e.exports=r},645:function(e){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\ne.exports=function(e){var o=[];return o.toString=function(){return this.map((function(o){var p=e(o);return o[2]?\\\"@media \\\".concat(o[2],\\\" {\\\").concat(p,\\\"}\\\"):p})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\no.i=function(e,p,r){\\\"string\\\"==typeof e&&(\\n// eslint-disable-next-line no-param-reassign\\ne=[[null,e,\\\"\\\"]]);var t={};if(r)for(var n=0;n<this.length;n++){\\n// eslint-disable-next-line prefer-destructuring\\nvar i=this[n][0];null!=i&&(t[i]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);r&&t[l[0]]||(p&&(l[2]?l[2]=\\\"\\\".concat(p,\\\" and \\\").concat(l[2]):l[2]=p),o.push(l))}},o}},695:function(e,o,p){var r=p(926);r&&r.__esModule&&(r=r.default),e.exports=\\\"string\\\"==typeof r?r:r.toString()}},r={};function t(e){var o=r[e];if(void 0!==o)return o.exports;var n=r[e]={id:e,exports:{}};return p[e](n,n.exports,t),n.exports}o=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},t.t=function(p,r){if(1&r&&(p=this(p)),8&r)return p;if(\\\"object\\\"==typeof p&&p){if(4&r&&p.__esModule)return p;if(16&r&&\\\"function\\\"==typeof p.then)return p}var n=Object.create(null);t.r(n);var i={};e=e||[null,o({}),o([]),o(o)];for(var a=2&r&&p;\\\"object\\\"==typeof a&&!~e.indexOf(a);a=o(a))Object.getOwnPropertyNames(a).forEach((function(e){i[e]=function(){return p[e]}}));return i.default=function(){return p},t.d(n,i),n},t.d=function(e,o){for(var p in o)t.o(o,p)&&!t.o(e,p)&&Object.defineProperty(e,p,{enumerable:!0,get:o[p]})},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})};var n={};return function(){\\\"use strict\\\";t.d(n,{component:function(){return r}});var e=coreApis.settings,o=coreApis.utils.urls;const p=\\\"removePlayerPopup\\\",r={name:p,entry:o=>{let{settings:p,metadata:r}=o;const{options:t}=p,{kebabCase:n}=lodash;Object.keys(t).forEach((o=>{(0,e.addComponentListener)(`${r.name}.${o}`,(e=>{document.body.classList.toggle(`${n(r.name)}-${n(o)}`,e)}),!0)}))},instantStyles:[{name:p,style:()=>Promise.resolve().then(t.t.bind(t,695,23))}],displayName:\\\"Âà†Èô§ËßÜÈ¢ëÂºπÁ™ó\\\",tags:[componentsTags.video,componentsTags.style],description:{\\\"zh-CN\\\":\\\"Âà†Èô§ËßÜÈ¢ëÊí≠ÊîæÂô®‰∏≠Âá∫Áé∞ÁöÑÂêÑÁßçÂºπÁ™ó, Á±ªÂà´ÂèØÂú®ÈÄâÈ°π‰∏≠ÂàÜÂà´ÈÄâÊã©.\\\"},urlInclude:o.playerUrls,options:{votes:{defaultValue:!1,displayName:\\\"ÊäïÁ•®\\\"},relatedVideos:{defaultValue:!0,displayName:\\\"ÂÖ≥ËÅîËßÜÈ¢ë\\\"},comboLikes:{defaultValue:!0,displayName:\\\"ÂÖ≥Ê≥®/‰∏âËøû\\\"},rates:{defaultValue:!0,displayName:\\\"ËØÑÂàÜ\\\"}},commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"}}(),n=n.component}()}));\",\"metadata\": {\"name\": \"removePlayerPopup\",\"displayName\": \"Âà†Èô§ËßÜÈ¢ëÂºπÁ™ó\",\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1},{\"name\": \"style\",\"displayName\": \"Ê†∑Âºè\",\"color\": \"#8BC34A\",\"icon\": \"mdi-palette-outline\",\"order\": 2}],\"description\": {\"zh-CN\": \"Âà†Èô§ËßÜÈ¢ëÊí≠ÊîæÂô®‰∏≠Âá∫Áé∞ÁöÑÂêÑÁßçÂºπÁ™ó, Á±ªÂà´ÂèØÂú®ÈÄâÈ°π‰∏≠ÂàÜÂà´ÈÄâÊã©.\"},\"options\": {\"votes\": {\"defaultValue\": false,\"displayName\": \"ÊäïÁ•®\"},\"relatedVideos\": {\"defaultValue\": true,\"displayName\": \"ÂÖ≥ËÅîËßÜÈ¢ë\"},\"comboLikes\": {\"defaultValue\": true,\"displayName\": \"ÂÖ≥Ê≥®/‰∏âËøû\"},\"rates\": {\"defaultValue\": true,\"displayName\": \"ËØÑÂàÜ\"}},\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {\"votes\": false,\"relatedVideos\": true,\"comboLikes\": true,\"rates\": true}}},\"seekByFrames\": {\"code\": \"!function(e,t){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=t():\\\"function\\\"==typeof define&&define.amd?define([],t):\\\"object\\\"==typeof exports?exports[\\\"video/player/seek-by-frames\\\"]=t():e[\\\"video/player/seek-by-frames\\\"]=t()}(self,(function(){return function(){\\\"use strict\\\";var e,t,n={833:function(e){e.exports=coreApis.componentApis.video.playerAgent}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e](a,a.exports,o),a.exports}t=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if(\\\"object\\\"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&\\\"function\\\"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;\\\"object\\\"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((function(e){i[e]=function(){return n[e]}}));return i.default=function(){return n},o.d(a,i),a},o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.r=function(e){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})};var a={};return function(){o.d(a,{component:function(){return c}});var e=coreApis.componentApis.video.videoControlBar,t=coreApis.observer,n=coreApis.utils,r=coreApis.utils.urls,i=coreApis.pluginApis.data;const s=\\\"seek-by-frame-disable\\\",c={name:\\\"seekByFrames\\\",displayName:\\\"ÂêØÁî®ÈÄêÂ∏ßË∞ÉÊï¥\\\",tags:[componentsTags.video],description:{\\\"zh-CN\\\":\\\"Âú®Êí≠ÊîæÂô®ÁöÑÊó∂Èó¥Âè≥ËæπÂ¢ûÂä†‰∏§‰∏™ÊåâÈíÆ, Áî®‰∫é**ËæÉÁ≤æÁªÜ**Ë∞ÉÊï¥ËßÜÈ¢ëÊó∂Èó¥. Ë£ÖÊúâ `Âø´Êç∑ÈîÆÊâ©Â±ï` Êó∂ÊîØÊåÅÈîÆÁõòÂø´Êç∑ÈîÆ<kbd>Shift</kbd>+<kbd>‚Üê</kbd>/<kbd>‚Üí</kbd>.\\\\n\\\\n> Ê≥®: `ËßÜÈ¢ëÁöÑÂÆûÈôÖÊí≠ÊîæÂ∏ßÁéá`Ë∑ü`ËßÜÈ¢ëÊú¨Ë∫´ÁöÑÂ∏ßÁéá`Âíå`ÊòæÁ§∫Âô®ÁöÑÂà∑Êñ∞Áéá`ÊúâÂÖ≥, ÂæàÈöæËÆ°ÁÆó‰∏Ä‰∏™Á≤æÂáÜÁöÑÊï∞ÂÄº, ÈÉ®ÂàÜËßÜÈ¢ë‰ªçÁÑ∂‰ºöÊúâÊöÇÂÅú‰∏çÂà∞ÈÇ£Áßç‰∏ÄÈó™ËÄåËøáÁöÑÂõæÁöÑÊÉÖÂÜµ.\\\"},entry:async()=>{await(0,n.playerReady)();const{playerAgent:r}=await Promise.resolve().then(o.t.bind(o,833,23));(0,i.addData)(\\\"ui.icons\\\",(e=>{e[\\\"seek-left\\\"]='<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\\\n\\\\x3c!-- Generator: Adobe Illustrator 24.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\\\\x3e\\\\n<svg version=\\\"1.1\\\" id=\\\"ÂõæÂ±Ç_2_1_\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\"\\\\n\\\\t y=\\\"0px\\\" viewBox=\\\"0 0 24 24\\\" style=\\\"enable-background:new 0 0 24 24;\\\" xml:space=\\\"preserve\\\">\\\\n<g>\\\\n\\\\t<path d=\\\"M15.5,20.3c-0.4,0-0.7-0.1-1-0.4l-8.3-7.5c-0.3-0.3-0.5-0.7-0.5-1.1c0-0.4,0.2-0.8,0.5-1.1l8.3-7.5\\\\n\\\\t\\\\tc0.6-0.6,1.6-0.5,2.1,0.1c0.6,0.6,0.5,1.6-0.1,2.1l-7.1,6.3l7.1,6.4c0.6,0.6,0.7,1.5,0.1,2.1C16.3,20.2,15.9,20.3,15.5,20.3z\\\"/>\\\\n</g>\\\\n<circle cx=\\\"16.8\\\" cy=\\\"11.3\\\" r=\\\"2.4\\\"/>\\\\n</svg>\\\\n',e[\\\"seek-right\\\"]='<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\\\n\\\\x3c!-- Generator: Adobe Illustrator 24.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\\\\x3e\\\\n<svg version=\\\"1.1\\\" id=\\\"ÂõæÂ±Ç_2\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\\\n\\\\t viewBox=\\\"0 0 24 24\\\" style=\\\"enable-background:new 0 0 24 24;\\\" xml:space=\\\"preserve\\\">\\\\n<g>\\\\n\\\\t<path d=\\\"M8.2,20.3c0.4,0,0.7-0.1,1-0.4l8.3-7.5c0.3-0.3,0.5-0.7,0.5-1.1c0-0.4-0.2-0.8-0.5-1.1L9.2,2.7C8.6,2.2,7.7,2.2,7.1,2.9\\\\n\\\\t\\\\tC6.6,3.5,6.6,4.4,7.3,5l7.1,6.3l-7.1,6.4c-0.6,0.6-0.7,1.5-0.1,2.1C7.4,20.2,7.8,20.3,8.2,20.3z\\\"/>\\\\n</g>\\\\n<circle cx=\\\"7\\\" cy=\\\"11.3\\\" r=\\\"2.4\\\"/>\\\\n</svg>\\\\n'}));let a=0;(0,t.attributesSubtree)(`${r.query.control.buttons.quality.selector} ul`,(()=>{const e=dq(`${r.query.control.buttons.quality.selector} .bui-select-item-active, ${r.query.control.buttons.quality.selector} .active`),t=e?parseInt(e.getAttribute(\\\"data-value\\\")):0,n=(()=>{switch(t){case 116:case 74:return 6e4/1001;default:return 3e4/1001}})();a=1/n}));const s=e=>{r.changeTime(e*a)};(0,e.addControlBarButton)({name:\\\"seekPrevFrame\\\",displayName:\\\"‰∏ä‰∏ÄÂ∏ß\\\",icon:\\\"seek-left\\\",order:1,action:()=>{s(-1)}}),(0,e.addControlBarButton)({name:\\\"seekNextFrame\\\",displayName:\\\"‰∏ã‰∏ÄÂ∏ß\\\",icon:\\\"seek-right\\\",order:2,action:()=>{s(1)}})},reload:()=>document.body.classList.remove(s),unload:()=>document.body.classList.add(s),urlInclude:r.playerUrls,plugin:{displayName:\\\"ÈÄêÂ∏ßË∞ÉÊï¥ - Âø´Êç∑ÈîÆÊîØÊåÅ\\\",setup:()=>{(0,i.addData)(\\\"keymap.actions\\\",(e=>{e.previousFrame={displayName:\\\"‰∏ä‰∏ÄÂ∏ß\\\",run:e=>{const{clickElement:t}=e;return t('.be-video-control-bar-extend [data-name=\\\"seekPrevFrame\\\"]',e)}},e.nextFrame={displayName:\\\"‰∏ã‰∏ÄÂ∏ß\\\",run:e=>{const{clickElement:t}=e;return t('.be-video-control-bar-extend [data-name=\\\"seekNextFrame\\\"]',e)}}})),(0,i.addData)(\\\"keymap.presets\\\",(e=>{e.previousFrame=\\\"shift arrowLeft\\\",e.nextFrame=\\\"shift arrowRight\\\"}))}},commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"}}(),a=a.component}()}));\",\"metadata\": {\"name\": \"seekByFrames\",\"displayName\": \"ÂêØÁî®ÈÄêÂ∏ßË∞ÉÊï¥\",\"tags\": [{\"name\": \"video\",\"displayName\": \"ËßÜÈ¢ë\",\"color\": \"#2196F3\",\"icon\": \"mdi-play-circle-outline\",\"order\": 1}],\"description\": {\"zh-CN\": \"Âú®Êí≠ÊîæÂô®ÁöÑÊó∂Èó¥Âè≥ËæπÂ¢ûÂä†‰∏§‰∏™ÊåâÈíÆ, Áî®‰∫é**ËæÉÁ≤æÁªÜ**Ë∞ÉÊï¥ËßÜÈ¢ëÊó∂Èó¥. Ë£ÖÊúâ `Âø´Êç∑ÈîÆÊâ©Â±ï` Êó∂ÊîØÊåÅÈîÆÁõòÂø´Êç∑ÈîÆ<kbd>Shift</kbd>+<kbd>‚Üê</kbd>/<kbd>‚Üí</kbd>.\\n\\n> Ê≥®: `ËßÜÈ¢ëÁöÑÂÆûÈôÖÊí≠ÊîæÂ∏ßÁéá`Ë∑ü`ËßÜÈ¢ëÊú¨Ë∫´ÁöÑÂ∏ßÁéá`Âíå`ÊòæÁ§∫Âô®ÁöÑÂà∑Êñ∞Áéá`ÊúâÂÖ≥, ÂæàÈöæËÆ°ÁÆó‰∏Ä‰∏™Á≤æÂáÜÁöÑÊï∞ÂÄº, ÈÉ®ÂàÜËßÜÈ¢ë‰ªçÁÑ∂‰ºöÊúâÊöÇÂÅú‰∏çÂà∞ÈÇ£Áßç‰∏ÄÈó™ËÄåËøáÁöÑÂõæÁöÑÊÉÖÂÜµ.\"},\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {}}},\"elegantScrollbar\": {\"code\": \"!function(t,n){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=n():\\\"function\\\"==typeof define&&define.amd?define([],n):\\\"object\\\"==typeof exports?exports[\\\"style/scrollbar\\\"]=n():t[\\\"style/scrollbar\\\"]=n()}(self,(function(){return function(){var t,n,e={518:function(t,n,e){var r=e(645)((function(t){return t[1]}));r.push([t.id,\\\"html ::-webkit-scrollbar {\\\\n  width: 5px !important;\\\\n  height: 5px !important;\\\\n}\\\\nhtml ::-webkit-scrollbar-corner,\\\\nhtml ::-webkit-scrollbar-track {\\\\n  background: transparent !important;\\\\n}\\\\nhtml ::-webkit-resizer,\\\\nhtml ::-webkit-scrollbar-thumb {\\\\n  background: #aaa;\\\\n  border-radius: 3px;\\\\n}\\\\nhtml ::-webkit-scrollbar-thumb:hover {\\\\n  background: #888;\\\\n}\\\\nhtml,\\\\nhtml * {\\\\n  scrollbar-color: #aaa transparent;\\\\n  scrollbar-width: thin !important;\\\\n}\\\",\\\"\\\"]),t.exports=r},645:function(t){\\\"use strict\\\";\\n// eslint-disable-next-line func-names\\nt.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=t(n);return n[2]?\\\"@media \\\".concat(n[2],\\\" {\\\").concat(e,\\\"}\\\"):e})).join(\\\"\\\")},\\n// eslint-disable-next-line func-names\\nn.i=function(t,e,r){\\\"string\\\"==typeof t&&(\\n// eslint-disable-next-line no-param-reassign\\nt=[[null,t,\\\"\\\"]]);var o={};if(r)for(var i=0;i<this.length;i++){\\n// eslint-disable-next-line prefer-destructuring\\nvar a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&o[u[0]]||(e&&(u[2]?u[2]=\\\"\\\".concat(e,\\\" and \\\").concat(u[2]):u[2]=e),n.push(u))}},n}},110:function(t,n,e){var r=e(518);r&&r.__esModule&&(r=r.default),t.exports=\\\"string\\\"==typeof r?r:r.toString()}},r={};function o(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={id:t,exports:{}};return e[t](i,i.exports,o),i.exports}n=Object.getPrototypeOf?function(t){return Object.getPrototypeOf(t)}:function(t){return t.__proto__},o.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if(\\\"object\\\"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&\\\"function\\\"==typeof e.then)return e}var i=Object.create(null);o.r(i);var a={};t=t||[null,n({}),n([]),n(n)];for(var c=2&r&&e;\\\"object\\\"==typeof c&&!~t.indexOf(c);c=n(c))Object.getOwnPropertyNames(c).forEach((function(t){a[t]=function(){return e[t]}}));return a.default=function(){return e},o.d(i,a),i},o.d=function(t,n){for(var e in n)o.o(n,e)&&!o.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},o.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},o.r=function(t){\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})};var i={};return function(){\\\"use strict\\\";o.d(i,{component:function(){return t}});const t=(0,coreApis.componentApis.define.defineComponentMetadata)({name:\\\"elegantScrollbar\\\",entry:none,displayName:\\\"‰ΩøÁî®ÁªÜÊªöÂä®Êù°\\\",description:\\\"‰ΩøÁî®ÊµèËßàÂô®ÁöÑÊªöÂä®Êù°È£éÊ†ºÊõø‰ª£Á≥ªÁªüÁöÑÊªöÂä®Êù°, ‰∏çËøá macOS Á≥ªÁªüÊªöÂä®Êù°ÊØîÊµèËßàÂô®ÂÅöÂæóÂ•Ω‰∏Ä‰∫õ, Âõ†Ê≠§‰∏çÂª∫ËÆÆ macOS ‰ΩøÁî®Ê≠§ÂäüËÉΩ.\\\",tags:[componentsTags.style,componentsTags.general],instantStyles:[{name:\\\"elegant-scrollbar\\\",style:()=>Promise.resolve().then(o.t.bind(o,110,23))}],commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"})}(),i=i.component}()}));\",\"metadata\": {\"name\": \"elegantScrollbar\",\"displayName\": \"‰ΩøÁî®ÁªÜÊªöÂä®Êù°\",\"description\": \"‰ΩøÁî®ÊµèËßàÂô®ÁöÑÊªöÂä®Êù°È£éÊ†ºÊõø‰ª£Á≥ªÁªüÁöÑÊªöÂä®Êù°, ‰∏çËøá macOS Á≥ªÁªüÊªöÂä®Êù°ÊØîÊµèËßàÂô®ÂÅöÂæóÂ•Ω‰∏Ä‰∫õ, Âõ†Ê≠§‰∏çÂª∫ËÆÆ macOS ‰ΩøÁî®Ê≠§ÂäüËÉΩ.\",\"tags\": [{\"name\": \"style\",\"displayName\": \"Ê†∑Âºè\",\"color\": \"#8BC34A\",\"icon\": \"mdi-palette-outline\",\"order\": 2},{\"name\": \"general\",\"displayName\": \"ÈÄöÁî®\",\"color\": \"#888\",\"icon\": \"mdi-progress-wrench\",\"order\": 8}],\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"},\"settings\": {\"enabled\": true,\"options\": {}}}}","userPlugins":"o{\"speed.keymap\": {\"code\": \"!function(e,t){\\\"object\\\"==typeof exports&&\\\"object\\\"==typeof module?module.exports=t():\\\"function\\\"==typeof define&&define.amd?define([],t):\\\"object\\\"==typeof exports?exports[\\\"video/player/speed\\\"]=t():e[\\\"video/player/speed\\\"]=t()}(self,(function(){return function(){\\\"use strict\\\";var e={d:function(t,n){for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},t={};e.d(t,{plugin:function(){return H}});var n=coreApis.toast,o=coreApis.componentApis.video.playerAgent,s=coreApis.lifeCycle,r=coreApis.observer,i=coreApis.utils,a=coreApis.utils.sort,l=coreApis.settings;const c=e=>\\\"function\\\"==typeof e?{next:e}:e,d=e=>function e(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,s=!1;const r=[],i=[];let a=!1;const d=()=>{for(;r.length;)r.pop()();i.length=0,a=!0},p=e=>{a||(i.forEach((t=>{var n;null===(n=t.error)||void 0===n||n.call(t,e),(0,l.getGeneralSettings)().devMode&&console.error(e)})),d())},u=e=>{a||i.forEach((t=>{try{t.next(e)}catch(e){p(e)}}))},h=()=>{i.forEach((e=>{var t;null===(t=e.complete)||void 0===t||t.call(e)})),d()},b=()=>{if(s)return;const e=null==t?void 0:t({next:u,error:p,complete:h});e&&r.push(e),s=!0},m=e=>null==e?null:(i.push(e),()=>{lodash.pull(i,e)}),v=function(){for(var t=arguments.length,n=new Array(t),s=0;s<t;s++)n[s]=arguments[s];return 0===n.length?{subscribe:e=>{const t=m(c(e));return((null==o?void 0:o.connect)??b)(),t},pipe:v,next:u,error:p,complete:h,...o}:e(n[0],{subscribe:m},o||{connect:b,next:u}).pipe(...n.slice(1))};if(n){const e=null==t?void 0:t({subscribe:e=>n.subscribe({error:p,complete:h,...c(e)}),next:u,error:p,complete:h});e&&r.push(e)}return v()}(e),p=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return d((e=>{let{next:n,complete:o}=e;t.forEach((e=>{n(e)})),o()}))},u=(e,t)=>d((n=>{let{next:o}=n;return e.addEventListener(t,o),()=>e.removeEventListener(t,o)})),h=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return d((t=>{let{next:o}=t;e(...n,o)}))},b=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return d((e=>{let{next:n,complete:o}=e;const s=[...t],r=()=>{const e=s.shift();e||o(),e.subscribe({next:n,complete:()=>{r()}})};r()}))},m=e=>new Promise(((t,n)=>{const o=e.subscribe({next:e=>{t(e),o()},error:()=>{n(),o()},complete:()=>{n(),o()}})})),v=e=>t=>{let{subscribe:n,next:o,complete:s,error:r}=t;n(lodash.mapValues({next:o,complete:s,error:r},(t=>e(t))))},f=e=>function(){for(var t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];Promise.resolve().then((()=>e(...n)))},g=e=>{const t=new Set;return e((e=>{lodash.castArray(e).forEach((e=>{t.add(e)}))})),()=>{t.forEach((e=>{e()}))}},y=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return d((e=>{let{next:n,error:o,complete:s}=e;return g((e=>{const r=[];let i=0;e(t.map(((e,a)=>e.pipe(v(f)).subscribe({next:e=>{r[a]=e,r.reduce((e=>e+1),0)===t.length&&n(r.slice())},complete:()=>{i++,i===t.length&&s()},error:o})))),e((()=>{r.length=0,i=0}))}))}))},x=e=>t=>{let{subscribe:n,next:o,error:s}=t;n(lodash.debounce((e=>{try{o(e)}catch(e){s(e)}}),e))},w=e=>t=>{let{subscribe:n,next:o}=t;n((t=>{e(t)&&o(t)}))},S=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return e=>{let{next:n,subscribe:o}=e,s=!1;o((e=>{s||t.forEach((e=>n(e))),n(e),s=!0}))}};var E=coreApis.pluginApis.data;const A=e=>e.split(\\\",\\\").map((e=>e.trim().replace(/^\\\\./,\\\"\\\"))).join(\\\",\\\"),k=(e,t)=>{const n=t=>{(0,E.registerAndGetData)(e,t)[0]=t},o=(0,E.getData)(e);if(o.length)return[o[0],n];if(t){const e=t();return n(e),[e,n]}return[void 0,n]},V=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t&&1===e?\\\"ÂÄçÈÄü\\\":Math.trunc(e)===e?`${e}.0x`:`${e}x`},C=e=>{if(\\\"ÂÄçÈÄü\\\"===e)return 1;const t=/([0-9]*[.]?[0-9]+)x/.exec(e);if(t)return parseFloat(t[1]);throw new Error(`unknown speed text: ${e}`)};const O=o.playerAgent.provideCustomQuery({video:{speedMenuList:\\\".bilibili-player-video-btn-speed-menu,.bpx-player-ctrl-playbackrate-menu\\\",speedMenuItem:\\\".bilibili-player-video-btn-speed-menu-list,.bpx-player-ctrl-playbackrate-menu-item\\\",speedNameBtn:\\\".bilibili-player-video-btn-speed-name,.bpx-player-ctrl-playbackrate-result\\\",speedContainer:\\\".bilibili-player-video-btn-speed,.bpx-player-ctrl-playbackrate\\\",active:\\\".bilibili-player-active,.bpx-state-active\\\",show:\\\".bilibili-player-speed-show,.bpx-state-show\\\"},bangumi:{speedMenuList:\\\".squirtle-speed-select-list\\\",speedMenuItem:\\\".squirtle-select-item\\\",speedNameBtn:\\\".squirtle-speed-select-result\\\",speedContainer:\\\".squirtle-speed-wrap\\\",active:\\\".active\\\",show:\\\".bilibili-player-speed-show\\\"}});let N;!function(e){e[e.MIN=0]=\\\"MIN\\\",e[e.CURRENT=1]=\\\"CURRENT\\\",e[e.MAX=2]=\\\"MAX\\\"}(N||(N={}));const $=(e,t,n)=>{const o=new MutationObserver(n);return o.observe(e,t),o},T=e=>{let[t,n]=e;if(!t)throw new Error(\\\"speed container element not found!\\\");if(!n)throw new Error(\\\"video element not found!\\\");const o=t.querySelector(O.custom.speedNameBtn.selector),s=t.querySelector(O.custom.speedMenuList.selector);let r,l,c;const p=d(),u=d().pipe((e=>{let t,{subscribe:n,next:o}=e,s=!0;n((e=>{(s||t!==e)&&(s=!1,t=e,o(e))}))}));u.pipe(S(void 0),(e=>{let{subscribe:t,next:n}=e;const o=[];return t((e=>{2===o.length&&o.shift(),o.push(e),2===o.length&&n(o.slice())})),()=>{o.length=0}})).subscribe((e=>{let[t,n]=e;l=t,r=n}));const h=e=>{if(e)switch(e.nodeType){case Node.TEXT_NODE:u.next(C(e.data));break;case Node.ELEMENT_NODE:u.next(C(e.innerHTML));break;default:console.warn(\\\"The target parameter of updateActiveVideoSpeed must be a Node, and the node type must be one of TEXT_NODE and ELEMENT_NODE\\\")}},b=()=>{c=lodash([...s.children]).map((e=>lodash.attempt((()=>C(e.textContent))))).reject((e=>lodash.isError(e))).sort((0,a.ascendingSort)()).value()};h(o),b();const m=$(s,{childList:!0,attributes:!0},(e=>{const{attributes:t=[],childList:n=[]}=lodash.groupBy(e,\\\"type\\\");n.length&&b(),p.next({attributes:t,childList:n})})),v=$(o,{childList:!0,subtree:!0},(e=>{e.forEach((e=>{const[t]=e.addedNodes;h(t)}))}));return{containerElement:t,videoElement:n,nameBtnElement:o,menuListElement:s,query:e=>(0,i.des)(`./*[(${function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\\\"or\\\";return e.split(\\\",\\\").map(A).flat().map((e=>`contains(@class, \\\"${e}\\\")`)).join(` ${t} `)}(O.custom.speedMenuItem.selector)}) and normalize-space()=\\\"${V(e)}\\\"]`,s),dispose:()=>{m.disconnect(),v.disconnect()},activeVideoSpeed$:u,menuListElementMutations$:p,getActiveVideoSpeed:()=>r,getOldActiveVideoSpeed:()=>l,getAvailableSpeedValues:()=>c}},M=e=>{const{videoElement:t,menuListElement:n}=e,o=u(n,\\\"click\\\").pipe((s=e=>{const{innerText:t,innerHTML:n}=e.target,o=t.trim()||n.trim();return lodash.attempt((()=>C(o)))},e=>{let{subscribe:t,next:n}=e;t((e=>{n(s(e))}))}),w((e=>!lodash.isError(e))));var s;const r=d((e=>{let{next:n}=e,o=t;do{o=Object.getPrototypeOf(o)}while(null===o||!Object.prototype.hasOwnProperty.call(o,\\\"playbackRate\\\"));const s=Object.getOwnPropertyDescriptor(o,\\\"playbackRate\\\");return Object.defineProperty(o,\\\"playbackRate\\\",{set(e){s.set.call(this,e),n(e)}}),()=>{Object.defineProperty(o,\\\"playbackRate\\\",s)}})),i=o.pipe((e=>{let t,{subscribe:n,next:o}=e,s=!0;n((e=>{(s||t!==e)&&(s=!1,t=e,o(e))}))})),a=r.pipe((e=>{let t,{subscribe:n,next:o}=e,s=!0;n((e=>{(s||t!==e)&&(s=!1,t=e,o(e))}))})),l=d((e=>{let{next:t}=e;const n=y(i,a);return n.subscribe((e=>{let[n,o]=e;n===o&&t(o)})),()=>n.complete()})).pipe((e=>{let t,{subscribe:n,next:o}=e,s=!0;n((e=>{(s||t!==e)&&(s=!1,t=e,o(e))}))}));let c;a.pipe(x(200),S(void 0),(e=>{let{subscribe:t,next:n}=e;const o=[];return t((e=>{2===o.length&&o.shift(),o.push(e),2===o.length&&n(o.slice())})),()=>{o.length=0}})).subscribe((e=>{let[t]=e;c=t}));const p={menuListElementClickSpeed$:o,menuListElementClickSpeedChange$:i,playbackRate$:r,playbackRateChange$:a,videoSpeedChange$:l};return{...e,...p,dispose:()=>{lodash.values(p).forEach((e=>{e.complete()})),e.dispose()},getOldPlaybackRate:()=>c}},[j]=k(\\\"speed.NoSuchSpeedMenuItemElementError\\\",(()=>class extends Error{constructor(e){const t=lodash.attempt((()=>V(e))),n=lodash.isError(t)?String(e):String(t);var o,s,r;super(`There is no such speed menu item as ${n}`),this.speed=e,r=void 0,(s=\\\"formattedSpeed\\\")in(o=this)?Object.defineProperty(o,s,{value:r,enumerable:!0,configurable:!0,writable:!0}):o[s]=r,this.formattedSpeed=n}})),L=e=>{const{query:t,videoElement:n,videoSpeedChange$:o,getOldActiveVideoSpeed:s,getAvailableSpeedValues:r,getActiveVideoSpeed:i}=e,a=async function(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:200;const r=t(e);if(null==r)throw new j(e);r.click();const i=t=>{if((t??n.playbackRate)!==e)throw new Error(`failed to set ${V(e)} video speed.`)},a=[m(o.pipe(x(Math.max(0,s||0))))];s>0&&a.push(new Promise(((e,t)=>setTimeout((()=>setTimeout(t,s)))))),await Promise.all(a).then(i).catch(i)},l=async()=>{await a(1)},c=async(e,t)=>{if(lodash.isNil(e)&&(e=!1),\\\"boolean\\\"==typeof e)e||1===n.playbackRate?await a(s()):await l();else{const n=r();switch(t){case N.MIN:await a(n[e]);break;case N.MAX:await a(n[n.length-1+e]);break;case N.CURRENT:default:{const t=n.indexOf(i());if(-1===t)throw new Error(\\\"Unexpected Error: The available speed values do not include the active speed value, this should be a bug, please report the issue on github!\\\");await a(n[t+e])}}}},d=async e=>{try{await c(e,N.CURRENT)}catch(e){if(console.warn(e),!(e instanceof j))throw e}};return Object.assign(e,{set:a,force:async e=>{n.playbackRate=e},reset:l,toggle:c,step:d,increase:async()=>{await d(1)},decrease:async()=>{await d(-1)}})},R=()=>k(\\\"speed.speedContext\\\"),P=()=>k(\\\"speed.buildArguments$\\\",(()=>{return d().pipe((e=e=>e.settings.enabled,t=>{let{subscribe:n,next:o}=t;const s=new Set;return n((t=>{const n=s.size;e(t)?s.add(t):s.delete(t),s.size!==n&&o([...s])})),()=>{s.clear()}}));var e})),I=async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:lodash.identity;const[t,n]=R();if(t)return t;let o,i;const[a]=k(\\\"lifeCycleComponentLoaded$\\\",(()=>u(unsafeWindow,s.LifeCycleEventTypes.ComponentsLoaded))),[l]=P(),[c]=k(\\\"speed.videoChange$\\\",(()=>h(r.videoChange).pipe(w((e=>{let{aid:t,cid:n}=e;return t||n}))))),[v]=k(\\\"speed.speedContext$\\\",(()=>d((t=>{let{next:n}=t;return y(c,b(p([]),l),a).subscribe((t=>{var s;let[r,a]=t;const[l]=R();null==l||l.dispose(),null===(s=i)||void 0===s||s(\\\"context update\\\");const d=new Promise(((e,t)=>{o=e,i=t}));Promise.all([Promise.all([O.custom.speedContainer(),O.query.video.element()]).then(o),d]).then((e=>{let[,t]=e;return t})).then(T).then(M).then(L).then((e=>Object.assign(e,{videoIdObject:r,speedContext$:v,videoChange$:c}))).then(e(a)).then(n).catch((e=>console.error(e)))}))}))));return v.subscribe(n),m(v)};var D=coreApis.utils.log,q=coreApis.pluginApis.hook;function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class B{constructor(e){var t;this.entryContext=e,U(this,\\\"speedContext\\\",void 0),U(this,\\\"settings\\\",void 0),U(this,\\\"coreApis\\\",void 0),U(this,\\\"metadata\\\",void 0),U(this,\\\"options\\\",void 0),U(this,\\\"getVideoIdObject\\\",void 0),U(this,\\\"getAvailableSpeedValues\\\",void 0),U(this,\\\"getOldActiveVideoSpeed\\\",void 0),U(this,\\\"forceVideoSpeed\\\",void 0),U(this,\\\"getVideoSpeed\\\",void 0),U(this,\\\"setVideoSpeed\\\",void 0),U(this,\\\"resetVideoSpeed\\\",void 0),U(this,\\\"toggleVideoSpeed\\\",void 0),U(this,\\\"increaseVideoSpeed\\\",void 0),U(this,\\\"decreaseVideoSpeed\\\",void 0),lodash.assign(this,e,{options:e.settings.options}),null===(t=this.migrate)||void 0===t||t.call(this),lodash.assign(this,lodash.mapValues(B.contextMap,(e=>async function(){const t=await I(),n=lodash.get(t,e),o=lodash.isFunction(n)?await n(...arguments):n;return o})))}}U(B,\\\"create\\\",void 0),U(B,\\\"contextMap\\\",{getVideoIdObject:\\\"videoIdObject\\\",getAvailableSpeedValues:\\\"getAvailableSpeedValues\\\",getOldActiveVideoSpeed:\\\"getOldActiveVideoSpeed\\\",getVideoSpeed:\\\"videoElement.playbackRate\\\",setVideoSpeed:\\\"set\\\",forceVideoSpeed:\\\"force\\\",resetVideoSpeed:\\\"reset\\\",toggleVideoSpeed:\\\"toggle\\\",increaseVideoSpeed:\\\"increase\\\",decreaseVideoSpeed:\\\"decrease\\\"}),I((e=>t=>{const n=lodash.omit(t,\\\"dispose\\\"),o=e.map((e=>e.getSpeedContextMixin(n)));if(o.length>1){const e=lodash.intersection(...o.map(Object.keys));if(e.length)throw new Error(`In the registered speed component, there is an implementation of getSpeedContextMixin that causes the speed context to be mixed in ambiguous.\\\\nThe repeated key names are ${e.join(\\\", \\\")}`)}lodash.assign(n,...o);const s=[];return e.forEach((e=>{const t=lodash(e.settings.options).mapValues(((t,n)=>h(l.addComponentListener,`${e.metadata.name}.${n}`).pipe((e=>{let t,{subscribe:n,next:o}=e,s=!0;n((e=>{(s||t!==e)&&(s=!1,t=e,o(e))}))})))).mapKeys(((e,t)=>`${t}$`)).value();s.push(...lodash.values(t)),e.options=new Proxy(e.settings.options,{get:(e,n,o)=>lodash.isSymbol(n)?Reflect.get(e,n,o):!Reflect.has(e,n)&&n.endsWith(\\\"$\\\")?t[n]:Reflect.get(e,n,o)}),e.speedContext=n,e.onSpeedContext(n),e.settings.enabled&&lodash(t).entries().forEach((t=>{let[n,o]=t;o.next(e.settings.options[n.slice(0,-1)])}))})),{...n,dispose:()=>{s.forEach((e=>e.complete())),t.dispose()}}})),B.create=function(e){const t=d().pipe((e=>{let t,{subscribe:n,next:o}=e,s=!0;n((e=>{(s||t!==e)&&(s=!1,t=e,o(e))}))}));return{...e,entry:n=>{const o=lodash.attempt((()=>new this(n)));if(o instanceof Error)return(0,D.logError)(o),null;const[s]=P();return t.subscribe((()=>{s.next(o)})),s.next(o),(0,q.getHook)(`speed.component.${e.name}`).after(o),o},reload:()=>t.next(!0),unload:()=>t.next(!1)}};const H={name:\\\"speed.keymap\\\",displayName:\\\"Âø´Êç∑ÈîÆÊâ©Â±ï - ËßÜÈ¢ëÂÄçÈÄü\\\",author:{name:\\\"JLoeve\\\",link:\\\"https://github.com/LonelySteve\\\"},description:\\\"\\\\n\\\\n‰∏∫Êìç‰ΩúËßÜÈ¢ëÂÄçÈÄüÊèê‰æõÂø´Êç∑ÈîÆÊîØÊåÅÔºö\\\\n\\\\n- ÊèêÈ´òÂÄçÈÄü\\\\n- Èôç‰ΩéÂÄçÈÄü\\\\n- ÂàáÊç¢ÂÄçÈÄü\\\\n\\\\nËã•Ê∑ªÂä†Âπ∂ÂêØÁî®‰∫ÜËÆ∞ÂøÜÂÄçÈÄüÁªÑ‰ª∂ÔºåÂàôËøò‰ºöÂ¢ûÂä†‰∏Ä‰∏™Âø´Êç∑ÈîÆÔºö\\\\n\\\\n- Ê∏ÖÈô§ÂÄçÈÄüËÆ∞ÂøÜ\\\\n  \\\",setup:e=>{let{addData:t,addHook:o}=e;const s=e=>async t=>{const n=await I();return await e(n),t.showTip(V(n.videoElement.playbackRate),\\\"mdi-fast-forward\\\"),!0};t(\\\"keymap.actions\\\",(e=>{Object.assign(e,{videoSpeedIncrease:{displayName:\\\"ÊèêÈ´òÂÄçÈÄü\\\",run:s((e=>{let{increase:t}=e;return t()}))},videoSpeedDecrease:{displayName:\\\"Èôç‰ΩéÂÄçÈÄü\\\",run:s((e=>{let{decrease:t}=e;return t()}))},videoSpeedToggle:{displayName:\\\"ÂàáÊç¢ÂÄçÈÄü\\\",run:s((e=>{let{toggle:t}=e;t()}))}})})),t(\\\"keymap.presets\\\",(e=>{e.videoSpeedIncrease=\\\"shift > „Äã arrowUp\\\",e.videoSpeedDecrease=\\\"shift < „Ää arrowDown\\\",e.videoSpeedToggle=\\\"shift ? Ôºü\\\"})),o(\\\"speed.component.rememberVideoSpeed\\\",{after:e=>{t(\\\"keymap.actions\\\",(t=>{t.videoSpeedForget={displayName:\\\"Ê∏ÖÈô§ÂÄçÈÄüËÆ∞ÂøÜ\\\",run:lodash.debounce(s((async()=>{e.settings.enabled?e.options.individualRemember?(e.forgetSpeed(),await e.resetVideoSpeed(),n.Toast.success(\\\"Â∑≤Ê∏ÖÈô§ÂΩìÂâçËßÜÈ¢ëÂÄçÈÄüËÆ∞ÂøÜÂÄº\\\",e.metadata.displayName,3e3)):n.Toast.error(\\\"ÈÄâÈ°π„ÄåÂêÑËßÜÈ¢ëÂàÜÂà´ËÆ∞ÂøÜ„ÄçÂ∑≤Á¶ÅÁî®Ôºå‰∏çËÉΩÊ∏ÖÈô§ÂΩìÂâçËßÜÈ¢ëÂÄçÈÄüËÆ∞ÂøÜÂÄº\\\",e.metadata.displayName,5e3):n.Toast.error(\\\"ÁªÑ‰ª∂Â∑≤Á¶ÅÁî®Ôºå‰∏çËÉΩÊ∏ÖÈô§ÂΩìÂâçËßÜÈ¢ëÂÄçÈÄüËÆ∞ÂøÜÂÄº\\\",e.metadata.displayName,5e3)})),200)}})),t(\\\"keymap.presets\\\",(e=>{e.videoSpeedForget=\\\"shift : Ôºö\\\"}))}})},commitHash:\\\"124fff7f99d2437df482016133ef933bd1d837b3\\\",coreVersion:\\\"2.4.0\\\"};return t=t.plugin}()}));\",\"displayName\": \"Âø´Êç∑ÈîÆÊâ©Â±ï - ËßÜÈ¢ëÂÄçÈÄü\",\"name\": \"speed.keymap\",\"author\": {\"name\": \"JLoeve\",\"link\": \"https://github.com/LonelySteve\"},\"description\": \"\\n\\n‰∏∫Êìç‰ΩúËßÜÈ¢ëÂÄçÈÄüÊèê‰æõÂø´Êç∑ÈîÆÊîØÊåÅÔºö\\n\\n- ÊèêÈ´òÂÄçÈÄü\\n- Èôç‰ΩéÂÄçÈÄü\\n- ÂàáÊç¢ÂÄçÈÄü\\n\\nËã•Ê∑ªÂä†Âπ∂ÂêØÁî®‰∫ÜËÆ∞ÂøÜÂÄçÈÄüÁªÑ‰ª∂ÔºåÂàôËøò‰ºöÂ¢ûÂä†‰∏Ä‰∏™Âø´Êç∑ÈîÆÔºö\\n\\n- Ê∏ÖÈô§ÂÄçÈÄüËÆ∞ÂøÜ\\n  \",\"commitHash\": \"124fff7f99d2437df482016133ef933bd1d837b3\",\"coreVersion\": \"2.4.0\"}}","userStyles":"o{}"}},"enabled":true,"position":5,"file_url":"https://raw.githubusercontent.com/the1812/Bilibili-Evolved/master/dist/bilibili-evolved.user.js","uuid":"76640765-8dd5-434b-9ffc-dfe797e81943","source":"","requires":[{"meta":{"name":"lodash.min.js","url":"https://raw.githubusercontent.com/lodash/lodash/4.17.21/dist/lodash.min.js","ts":1662639221511,"mimetype":"text/javascript"},"source":""}]}]}